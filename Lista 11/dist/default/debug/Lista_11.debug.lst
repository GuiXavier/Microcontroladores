

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Feb 17 15:50:28 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20     0000                     
    21                           ; Generated 12/10/2023 GMT
    22                           ; 
    23                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F877 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55     0004                     fsr             equ	4
    56     0004                     fsr0            equ	4
    57     0000                     indf            equ	0
    58     0000                     indf0           equ	0
    59     0002                     pc              equ	2
    60     0002                     pcl             equ	2
    61     000A                     pclath          equ	10
    62     0003                     status          equ	3
    63     0000                     INDF            equ	0	;# 
    64     0001                     TMR0            equ	1	;# 
    65     0002                     PCL             equ	2	;# 
    66     0003                     STATUS          equ	3	;# 
    67     0004                     FSR             equ	4	;# 
    68     0005                     PORTA           equ	5	;# 
    69     0006                     PORTB           equ	6	;# 
    70     0007                     PORTC           equ	7	;# 
    71     0008                     PORTD           equ	8	;# 
    72     0009                     PORTE           equ	9	;# 
    73     000A                     PCLATH          equ	10	;# 
    74     000B                     INTCON          equ	11	;# 
    75     000C                     PIR1            equ	12	;# 
    76     000D                     PIR2            equ	13	;# 
    77     000E                     TMR1            equ	14	;# 
    78     000E                     TMR1L           equ	14	;# 
    79     000F                     TMR1H           equ	15	;# 
    80     0010                     T1CON           equ	16	;# 
    81     0011                     TMR2            equ	17	;# 
    82     0012                     T2CON           equ	18	;# 
    83     0013                     SSPBUF          equ	19	;# 
    84     0014                     SSPCON          equ	20	;# 
    85     0015                     CCPR1           equ	21	;# 
    86     0015                     CCPR1L          equ	21	;# 
    87     0016                     CCPR1H          equ	22	;# 
    88     0017                     CCP1CON         equ	23	;# 
    89     0018                     RCSTA           equ	24	;# 
    90     0019                     TXREG           equ	25	;# 
    91     001A                     RCREG           equ	26	;# 
    92     001B                     CCPR2           equ	27	;# 
    93     001B                     CCPR2L          equ	27	;# 
    94     001C                     CCPR2H          equ	28	;# 
    95     001D                     CCP2CON         equ	29	;# 
    96     001E                     ADRESH          equ	30	;# 
    97     001F                     ADCON0          equ	31	;# 
    98     0081                     OPTION_REG      equ	129	;# 
    99     0085                     TRISA           equ	133	;# 
   100     0086                     TRISB           equ	134	;# 
   101     0087                     TRISC           equ	135	;# 
   102     0088                     TRISD           equ	136	;# 
   103     0089                     TRISE           equ	137	;# 
   104     008C                     PIE1            equ	140	;# 
   105     008D                     PIE2            equ	141	;# 
   106     008E                     PCON            equ	142	;# 
   107     0091                     SSPCON2         equ	145	;# 
   108     0092                     PR2             equ	146	;# 
   109     0093                     SSPADD          equ	147	;# 
   110     0094                     SSPSTAT         equ	148	;# 
   111     0098                     TXSTA           equ	152	;# 
   112     0099                     SPBRG           equ	153	;# 
   113     009E                     ADRESL          equ	158	;# 
   114     009F                     ADCON1          equ	159	;# 
   115     010C                     EEDATA          equ	268	;# 
   116     010D                     EEADR           equ	269	;# 
   117     010E                     EEDATH          equ	270	;# 
   118     010F                     EEADRH          equ	271	;# 
   119     018C                     EECON1          equ	396	;# 
   120     018D                     EECON2          equ	397	;# 
   121     0000                     INDF            equ	0	;# 
   122     0001                     TMR0            equ	1	;# 
   123     0002                     PCL             equ	2	;# 
   124     0003                     STATUS          equ	3	;# 
   125     0004                     FSR             equ	4	;# 
   126     0005                     PORTA           equ	5	;# 
   127     0006                     PORTB           equ	6	;# 
   128     0007                     PORTC           equ	7	;# 
   129     0008                     PORTD           equ	8	;# 
   130     0009                     PORTE           equ	9	;# 
   131     000A                     PCLATH          equ	10	;# 
   132     000B                     INTCON          equ	11	;# 
   133     000C                     PIR1            equ	12	;# 
   134     000D                     PIR2            equ	13	;# 
   135     000E                     TMR1            equ	14	;# 
   136     000E                     TMR1L           equ	14	;# 
   137     000F                     TMR1H           equ	15	;# 
   138     0010                     T1CON           equ	16	;# 
   139     0011                     TMR2            equ	17	;# 
   140     0012                     T2CON           equ	18	;# 
   141     0013                     SSPBUF          equ	19	;# 
   142     0014                     SSPCON          equ	20	;# 
   143     0015                     CCPR1           equ	21	;# 
   144     0015                     CCPR1L          equ	21	;# 
   145     0016                     CCPR1H          equ	22	;# 
   146     0017                     CCP1CON         equ	23	;# 
   147     0018                     RCSTA           equ	24	;# 
   148     0019                     TXREG           equ	25	;# 
   149     001A                     RCREG           equ	26	;# 
   150     001B                     CCPR2           equ	27	;# 
   151     001B                     CCPR2L          equ	27	;# 
   152     001C                     CCPR2H          equ	28	;# 
   153     001D                     CCP2CON         equ	29	;# 
   154     001E                     ADRESH          equ	30	;# 
   155     001F                     ADCON0          equ	31	;# 
   156     0081                     OPTION_REG      equ	129	;# 
   157     0085                     TRISA           equ	133	;# 
   158     0086                     TRISB           equ	134	;# 
   159     0087                     TRISC           equ	135	;# 
   160     0088                     TRISD           equ	136	;# 
   161     0089                     TRISE           equ	137	;# 
   162     008C                     PIE1            equ	140	;# 
   163     008D                     PIE2            equ	141	;# 
   164     008E                     PCON            equ	142	;# 
   165     0091                     SSPCON2         equ	145	;# 
   166     0092                     PR2             equ	146	;# 
   167     0093                     SSPADD          equ	147	;# 
   168     0094                     SSPSTAT         equ	148	;# 
   169     0098                     TXSTA           equ	152	;# 
   170     0099                     SPBRG           equ	153	;# 
   171     009E                     ADRESL          equ	158	;# 
   172     009F                     ADCON1          equ	159	;# 
   173     010C                     EEDATA          equ	268	;# 
   174     010D                     EEADR           equ	269	;# 
   175     010E                     EEDATH          equ	270	;# 
   176     010F                     EEADRH          equ	271	;# 
   177     018C                     EECON1          equ	396	;# 
   178     018D                     EECON2          equ	397	;# 
   179                           
   180                           	psect	strings
   181     0003                     __pstrings:
   182     0003                     stringtab:
   183     0003                     __stringtab:
   184     0003                     stringcode:	
   185                           ;	String table - string pointers are 1 byte each
   186                           
   187     0003                     stringdir:
   188     0003  3000               	movlw	high stringdir
   189     0004  008A               	movwf	10
   190     0005  0804               	movf	4,w
   191     0006  0A84               	incf	4,f
   192     0007  0782               	addwf	2,f
   193     0008                     __stringbase:
   194     0008  3400               	retlw	0
   195     0009                     __end_of__stringtab:
   196     0009                     _keypad_map:
   197     0009  3430               	retlw	48
   198     000A  3431               	retlw	49
   199     000B  3432               	retlw	50
   200     000C  3433               	retlw	51
   201     000D  3434               	retlw	52
   202     000E  3435               	retlw	53
   203     000F  3436               	retlw	54
   204     0010  3437               	retlw	55
   205     0011  3438               	retlw	56
   206     0012  3439               	retlw	57
   207     0013  3441               	retlw	65
   208     0014  3442               	retlw	66
   209     0015  3443               	retlw	67
   210     0016  3444               	retlw	68
   211     0017  3445               	retlw	69
   212     0018  3446               	retlw	70
   213     0019                     __end_of_keypad_map:
   214     000B                     _INTCONbits     set	11
   215     0006                     _PORTBbits      set	6
   216     0007                     _PORTC          set	7
   217     0008                     _PORTD          set	8
   218     0049                     _RE1            set	73
   219     0048                     _RE0            set	72
   220     0081                     _OPTION_REGbits set	129
   221     0087                     _TRISC          set	135
   222     0447                     _TRISD7         set	1095
   223     0446                     _TRISD6         set	1094
   224     0445                     _TRISD5         set	1093
   225     0444                     _TRISD4         set	1092
   226     0449                     _TRISE1         set	1097
   227     0448                     _TRISE0         set	1096
   228     010C                     _EEDATA         set	268
   229     010D                     _EEADR          set	269
   230     018D                     _EECON2         set	397
   231     018C                     _EECON1bits     set	396
   232     0019                     STR_2:
   233     0019  3454               	retlw	84	;'T'
   234     001A  3465               	retlw	101	;'e'
   235     001B  3463               	retlw	99	;'c'
   236     001C  346C               	retlw	108	;'l'
   237     001D  3461               	retlw	97	;'a'
   238     001E  3420               	retlw	32	;' '
   239     001F  3444               	retlw	68	;'D'
   240     0020  3469               	retlw	105	;'i'
   241     0021  3467               	retlw	103	;'g'
   242     0022  342E               	retlw	46	;'.'
   243     0023  3400               	retlw	0
   244     0024                     STR_1:
   245     0024  3444               	retlw	68	;'D'
   246     0025  3469               	retlw	105	;'i'
   247     0026  3467               	retlw	103	;'g'
   248     0027  342E               	retlw	46	;'.'
   249     0028  3420               	retlw	32	;' '
   250     0029  3454               	retlw	84	;'T'
   251     002A  3465               	retlw	101	;'e'
   252     002B  3463               	retlw	99	;'c'
   253     002C  346C               	retlw	108	;'l'
   254     002D  3461               	retlw	97	;'a'
   255     002E  3400               	retlw	0
   256                           
   257                           	psect	cinit
   258     07FC                     start_initialization:	
   259                           ; #config settings
   260                           
   261     07FC                     __initialization:
   262     07FC                     end_of_initialization:	
   263                           ;End of C runtime variable initialization code
   264                           
   265     07FC                     __end_of__initialization:
   266     07FC  0183               	clrf	3
   267     07FD  120A  118A  2F71   	ljmp	_main	;jump to C main() function
   268                           
   269                           	psect	cstackCOMMON
   270     0070                     __pcstackCOMMON:
   271     0070                     ?_LCD_Init:
   272     0070                     ?_Keypad_Init:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     0070                     ?_Keypad_GetChar:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     0070                     ?_LCD_Char:	
   279                           ; 1 bytes @ 0x0
   280                           
   281     0070                     ?_EEPROM_Write:	
   282                           ; 1 bytes @ 0x0
   283                           
   284     0070                     ?_LCD_Clear:	
   285                           ; 1 bytes @ 0x0
   286                           
   287     0070                     ?_EEPROM_Read:	
   288                           ; 1 bytes @ 0x0
   289                           
   290     0070                     ?_LCD_Cmd:	
   291                           ; 1 bytes @ 0x0
   292                           
   293     0070                     ?_main:	
   294                           ; 1 bytes @ 0x0
   295                           
   296     0070                     EEPROM_Write@data:	
   297                           ; 1 bytes @ 0x0
   298                           
   299     0070                     EEPROM_Read@address:	
   300                           ; 1 bytes @ 0x0
   301                           
   302     0070                     ??_Keypad_Init:	
   303                           ; 1 bytes @ 0x0
   304                           
   305     0070                     ??_Keypad_GetChar:	
   306                           ; 1 bytes @ 0x0
   307                           
   308     0070                     ??_LCD_Char:	
   309                           ; 1 bytes @ 0x0
   310                           
   311     0070                     ??_EEPROM_Read:	
   312                           ; 1 bytes @ 0x0
   313                           
   314     0070                     ??_LCD_Cmd:	
   315                           ; 1 bytes @ 0x0
   316                           
   317                           
   318                           ; 1 bytes @ 0x0
   319     0070                     	ds	1
   320     0071                     Keypad_GetChar@row:
   321     0071                     EEPROM_Write@address:	
   322                           ; 1 bytes @ 0x1
   323                           
   324     0071                     ??_EEPROM_Write:	
   325                           ; 1 bytes @ 0x1
   326                           
   327                           
   328                           ; 1 bytes @ 0x1
   329     0071                     	ds	1
   330     0072                     LCD_Cmd@cmd:
   331     0072                     LCD_Char@data:	
   332                           ; 1 bytes @ 0x2
   333                           
   334                           
   335                           ; 1 bytes @ 0x2
   336     0072                     	ds	1
   337     0073                     ?_LCD_SetCursor:
   338     0073                     ?_LCD_String:	
   339                           ; 1 bytes @ 0x3
   340                           
   341     0073                     LCD_String@str:	
   342                           ; 1 bytes @ 0x3
   343                           
   344     0073                     LCD_SetCursor@col:	
   345                           ; 1 bytes @ 0x3
   346                           
   347     0073                     ??_LCD_Init:	
   348                           ; 1 bytes @ 0x3
   349                           
   350     0073                     ??_LCD_Clear:	
   351                           ; 1 bytes @ 0x3
   352                           
   353                           
   354                           ; 1 bytes @ 0x3
   355     0073                     	ds	1
   356     0074                     LCD_SetCursor@row:
   357     0074                     ??_LCD_SetCursor:	
   358                           ; 1 bytes @ 0x4
   359                           
   360     0074                     ??_LCD_String:	
   361                           ; 1 bytes @ 0x4
   362                           
   363                           
   364                           ; 1 bytes @ 0x4
   365     0074                     	ds	1
   366     0075                     _LCD_SetCursor$212:
   367                           
   368                           ; 2 bytes @ 0x5
   369     0075                     	ds	2
   370     0077                     LCD_SetCursor@address:
   371                           
   372                           ; 1 bytes @ 0x7
   373     0077                     	ds	1
   374     0078                     ??_main:
   375                           
   376                           ; 1 bytes @ 0x8
   377     0078                     	ds	2
   378     007A                     main@eeprom_value:
   379                           
   380                           ; 1 bytes @ 0xA
   381     007A                     	ds	1
   382     007B                     main@previous_key:
   383                           
   384                           ; 1 bytes @ 0xB
   385     007B                     	ds	1
   386     007C                     main@key_pressed:
   387                           
   388                           ; 1 bytes @ 0xC
   389     007C                     	ds	1
   390                           
   391                           	psect	maintext
   392     0771                     __pmaintext:	
   393 ;;
   394 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   395 ;;
   396 ;; *************** function _main *****************
   397 ;; Defined at:
   398 ;;		line 80 in file "atividade10.c"
   399 ;; Parameters:    Size  Location     Type
   400 ;;		None
   401 ;; Auto vars:     Size  Location     Type
   402 ;;  key_pressed     1   12[COMMON] unsigned char 
   403 ;;  previous_key    1   11[COMMON] unsigned char 
   404 ;;  eeprom_value    1   10[COMMON] unsigned char 
   405 ;; Return value:  Size  Location     Type
   406 ;;                  1    wreg      void 
   407 ;; Registers used:
   408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   409 ;; Tracked objects:
   410 ;;		On entry : B00/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   414 ;;      Params:         0       0       0       0       0
   415 ;;      Locals:         3       0       0       0       0
   416 ;;      Temps:          2       0       0       0       0
   417 ;;      Totals:         5       0       0       0       0
   418 ;;Total ram usage:        5 bytes
   419 ;; Hardware stack levels required when called: 2
   420 ;; This function calls:
   421 ;;		_EEPROM_Read
   422 ;;		_EEPROM_Write
   423 ;;		_Keypad_GetChar
   424 ;;		_Keypad_Init
   425 ;;		_LCD_Char
   426 ;;		_LCD_Clear
   427 ;;		_LCD_Init
   428 ;;		_LCD_SetCursor
   429 ;;		_LCD_String
   430 ;; This function is called by:
   431 ;;		Startup code after reset
   432 ;; This function uses a non-reentrant model
   433 ;;
   434                           
   435     0771                     _main:	
   436                           ;psect for function _main
   437                           
   438     0771                     l989:	
   439                           ;incstack = 0
   440                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   441                           
   442                           
   443                           ;atividade10.c: 82:     char key_pressed;;atividade10.c: 83:     char previous_key = 0;
   444     0771  01FB               	clrf	main@previous_key
   445     0772                     l991:
   446                           
   447                           ;atividade10.c: 84:     char eeprom_value;;atividade10.c: 86:     LCD_Init();
   448     0772  120A  118A  2687  120A  118A  	fcall	_LCD_Init
   449     0777                     l993:
   450                           
   451                           ;atividade10.c: 87:     Keypad_Init();
   452     0777  120A  118A  25A6  120A  118A  	fcall	_Keypad_Init
   453     077C                     l995:
   454                           
   455                           ;atividade10.c: 90:     {;atividade10.c: 91:         LCD_SetCursor(1, 1);
   456     077C  01F3               	clrf	LCD_SetCursor@col
   457     077D  0AF3               	incf	LCD_SetCursor@col,f
   458     077E  3001               	movlw	1
   459     077F  120A  118A  25FD  120A  118A  	fcall	_LCD_SetCursor
   460     0784                     l997:
   461                           
   462                           ;atividade10.c: 92:         LCD_String("Dig. Tecla");
   463     0784  301C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   464     0785  00F3               	movwf	LCD_String@str
   465     0786  120A  118A  25E1  120A  118A  	fcall	_LCD_String
   466     078B                     l999:
   467                           
   468                           ;atividade10.c: 94:         key_pressed = Keypad_GetChar();
   469     078B  120A  118A  26E9  120A  118A  	fcall	_Keypad_GetChar
   470     0790  00FC               	movwf	main@key_pressed
   471     0791                     l1001:
   472                           
   473                           ;atividade10.c: 95:         LCD_SetCursor(2, 1);
   474     0791  01F3               	clrf	LCD_SetCursor@col
   475     0792  0AF3               	incf	LCD_SetCursor@col,f
   476     0793  3002               	movlw	2
   477     0794  120A  118A  25FD  120A  118A  	fcall	_LCD_SetCursor
   478     0799                     l1003:
   479                           
   480                           ;atividade10.c: 96:         LCD_Char(key_pressed);
   481     0799  087C               	movf	main@key_pressed,w
   482     079A  120A  118A  2651  120A  118A  	fcall	_LCD_Char
   483     079F                     l1005:
   484                           
   485                           ;atividade10.c: 98:         if (key_pressed == 'F')
   486     079F  3046               	movlw	70
   487     07A0  067C               	xorwf	main@key_pressed,w
   488     07A1  1D03               	btfss	3,2
   489     07A2  2FA4               	goto	u391
   490     07A3  2FA5               	goto	u390
   491     07A4                     u391:
   492     07A4  2FC1               	goto	l1015
   493     07A5                     u390:
   494     07A5                     l1007:
   495                           
   496                           ;atividade10.c: 99:         {;atividade10.c: 100:             if (previous_key != 0)
   497     07A5  087B               	movf	main@previous_key,w
   498     07A6  1903               	btfsc	3,2
   499     07A7  2FA9               	goto	u401
   500     07A8  2FAA               	goto	u400
   501     07A9                     u401:
   502     07A9  2FBB               	goto	l1013
   503     07AA                     u400:
   504     07AA                     l1009:
   505                           
   506                           ;atividade10.c: 101:             {;atividade10.c: 102:                 EEPROM_Write(0x00
      +                          , (uint8_t)previous_key);
   507     07AA  087B               	movf	main@previous_key,w
   508     07AB  00F0               	movwf	EEPROM_Write@data
   509     07AC  3000               	movlw	0
   510     07AD  120A  118A  25CA  120A  118A  	fcall	_EEPROM_Write
   511     07B2                     l1011:
   512                           
   513                           ;atividade10.c: 103:                 _delay((unsigned long)((10)*(20000000UL/4000.0)));
   514     07B2  3041               	movlw	65
   515     07B3  00F9               	movwf	??_main+1
   516     07B4  30EE               	movlw	238
   517     07B5  00F8               	movwf	??_main
   518     07B6                     u427:
   519     07B6  0BF8               	decfsz	??_main,f
   520     07B7  2FB6               	goto	u427
   521     07B8  0BF9               	decfsz	??_main+1,f
   522     07B9  2FB6               	goto	u427
   523     07BA  0000               	nop
   524     07BB                     l1013:
   525                           
   526                           ;atividade10.c: 105:             LCD_Clear();
   527     07BB  120A  118A  25BA  120A  118A  	fcall	_LCD_Clear
   528                           
   529                           ;atividade10.c: 106:             continue;
   530     07C0  2F7C               	goto	l995
   531     07C1                     l1015:
   532                           
   533                           ;atividade10.c: 109:         if (key_pressed == 'E')
   534     07C1  3045               	movlw	69
   535     07C2  067C               	xorwf	main@key_pressed,w
   536     07C3  1D03               	btfss	3,2
   537     07C4  2FC6               	goto	u411
   538     07C5  2FC7               	goto	u410
   539     07C6                     u411:
   540     07C6  2FF6               	goto	l1033
   541     07C7                     u410:
   542     07C7                     l1017:
   543                           
   544                           ;atividade10.c: 110:         {;atividade10.c: 111:             eeprom_value = EEPROM_Rea
      +                          d(0x00);
   545     07C7  3000               	movlw	0
   546     07C8  120A  118A  25AC  120A  118A  	fcall	_EEPROM_Read
   547     07CD  00FA               	movwf	main@eeprom_value
   548     07CE                     l1019:
   549                           
   550                           ;atividade10.c: 112:             LCD_Clear();
   551     07CE  120A  118A  25BA  120A  118A  	fcall	_LCD_Clear
   552     07D3                     l1021:
   553                           
   554                           ;atividade10.c: 113:             LCD_SetCursor(1, 1);
   555     07D3  01F3               	clrf	LCD_SetCursor@col
   556     07D4  0AF3               	incf	LCD_SetCursor@col,f
   557     07D5  3001               	movlw	1
   558     07D6  120A  118A  25FD  120A  118A  	fcall	_LCD_SetCursor
   559     07DB                     l1023:
   560                           
   561                           ;atividade10.c: 114:             LCD_String("Tecla Dig.");
   562     07DB  3011               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   563     07DC  00F3               	movwf	LCD_String@str
   564     07DD  120A  118A  25E1  120A  118A  	fcall	_LCD_String
   565     07E2                     l1025:
   566                           
   567                           ;atividade10.c: 115:             LCD_SetCursor(2, 1);
   568     07E2  01F3               	clrf	LCD_SetCursor@col
   569     07E3  0AF3               	incf	LCD_SetCursor@col,f
   570     07E4  3002               	movlw	2
   571     07E5  120A  118A  25FD  120A  118A  	fcall	_LCD_SetCursor
   572     07EA                     l1027:
   573                           
   574                           ;atividade10.c: 116:             LCD_Char(eeprom_value);
   575     07EA  087A               	movf	main@eeprom_value,w
   576     07EB  120A  118A  2651  120A  118A  	fcall	_LCD_Char
   577     07F0                     l1029:
   578                           
   579                           ;atividade10.c: 117:             (void)Keypad_GetChar();
   580     07F0  120A  118A  26E9  120A  118A  	fcall	_Keypad_GetChar
   581     07F5  2FBB               	goto	l1013
   582     07F6                     l1033:
   583                           
   584                           ;atividade10.c: 122:         previous_key = key_pressed;
   585     07F6  087C               	movf	main@key_pressed,w
   586     07F7  00FB               	movwf	main@previous_key
   587     07F8  2F7C               	goto	l995
   588     07F9  120A  118A  2800   	ljmp	start
   589     07FC                     __end_of_main:
   590                           
   591                           	psect	text1
   592     05E1                     __ptext1:	
   593 ;; *************** function _LCD_String *****************
   594 ;; Defined at:
   595 ;;		line 172 in file "atividade10.c"
   596 ;; Parameters:    Size  Location     Type
   597 ;;  str             1    3[COMMON] PTR const unsigned char 
   598 ;;		 -> STR_2(11), STR_1(11), 
   599 ;; Auto vars:     Size  Location     Type
   600 ;;		None
   601 ;; Return value:  Size  Location     Type
   602 ;;                  1    wreg      void 
   603 ;; Registers used:
   604 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   605 ;; Tracked objects:
   606 ;;		On entry : 0/0
   607 ;;		On exit  : 0/0
   608 ;;		Unchanged: 0/0
   609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   610 ;;      Params:         1       0       0       0       0
   611 ;;      Locals:         0       0       0       0       0
   612 ;;      Temps:          0       0       0       0       0
   613 ;;      Totals:         1       0       0       0       0
   614 ;;Total ram usage:        1 bytes
   615 ;; Hardware stack levels used: 1
   616 ;; Hardware stack levels required when called: 1
   617 ;; This function calls:
   618 ;;		_LCD_Char
   619 ;; This function is called by:
   620 ;;		_main
   621 ;; This function uses a non-reentrant model
   622 ;;
   623                           
   624     05E1                     _LCD_String:	
   625                           ;psect for function _LCD_String
   626                           
   627     05E1                     l917:	
   628                           ;incstack = 0
   629                           ; Regs used in _LCD_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   630                           
   631                           
   632                           ;atividade10.c: 172: void LCD_String(const char *str);atividade10.c: 173: {;atividade10.
      +                          c: 174:     while(*str) LCD_Char(*str++);
   633     05E1  2DF0               	goto	l923
   634     05E2                     l919:
   635     05E2  0873               	movf	LCD_String@str,w
   636     05E3  0084               	movwf	4
   637     05E4  120A  118A  2003  120A  118A  	fcall	stringdir
   638     05E9  120A  118A  2651  120A  118A  	fcall	_LCD_Char
   639     05EE                     l921:
   640     05EE  3001               	movlw	1
   641     05EF  07F3               	addwf	LCD_String@str,f
   642     05F0                     l923:
   643     05F0  0873               	movf	LCD_String@str,w
   644     05F1  0084               	movwf	4
   645     05F2  120A  118A  2003  120A  118A  	fcall	stringdir
   646     05F7  3A00               	xorlw	0
   647     05F8  1D03               	skipz
   648     05F9  2DFB               	goto	u241
   649     05FA  2DFC               	goto	u240
   650     05FB                     u241:
   651     05FB  2DE2               	goto	l919
   652     05FC                     u240:
   653     05FC                     l86:
   654     05FC  0008               	return
   655     05FD                     __end_of_LCD_String:
   656                           
   657                           	psect	text2
   658     0651                     __ptext2:	
   659 ;; *************** function _LCD_Char *****************
   660 ;; Defined at:
   661 ;;		line 160 in file "atividade10.c"
   662 ;; Parameters:    Size  Location     Type
   663 ;;  data            1    wreg     unsigned char 
   664 ;; Auto vars:     Size  Location     Type
   665 ;;  data            1    2[COMMON] unsigned char 
   666 ;; Return value:  Size  Location     Type
   667 ;;                  1    wreg      void 
   668 ;; Registers used:
   669 ;;		wreg, status,2, status,0
   670 ;; Tracked objects:
   671 ;;		On entry : 0/0
   672 ;;		On exit  : 0/0
   673 ;;		Unchanged: 0/0
   674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   675 ;;      Params:         0       0       0       0       0
   676 ;;      Locals:         1       0       0       0       0
   677 ;;      Temps:          2       0       0       0       0
   678 ;;      Totals:         3       0       0       0       0
   679 ;;Total ram usage:        3 bytes
   680 ;; Hardware stack levels used: 1
   681 ;; This function calls:
   682 ;;		Nothing
   683 ;; This function is called by:
   684 ;;		_main
   685 ;;		_LCD_String
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689     0651                     _LCD_Char:	
   690                           ;psect for function _LCD_Char
   691                           
   692                           
   693                           ;incstack = 0
   694                           ; Regs used in _LCD_Char: [wreg+status,2+status,0]
   695                           ;LCD_Char@data stored from wreg
   696     0651  00F2               	movwf	LCD_Char@data
   697     0652                     l675:
   698                           
   699                           ;atividade10.c: 160: void LCD_Char(char data);atividade10.c: 161: {;atividade10.c: 162: 
      +                              RE0 = 1;
   700     0652  1283               	bcf	3,5	;RP0=0, select bank0
   701     0653  1303               	bcf	3,6	;RP1=0, select bank0
   702     0654  1409               	bsf	9,0	;volatile
   703     0655                     l677:
   704                           
   705                           ;atividade10.c: 163:     PORTD = (PORTD & 0x0F) | (data & 0xF0);
   706     0655  30F0               	movlw	240
   707     0656  0572               	andwf	LCD_Char@data,w
   708     0657  00F0               	movwf	??_LCD_Char
   709     0658  0808               	movf	8,w	;volatile
   710     0659  390F               	andlw	15
   711     065A  0470               	iorwf	??_LCD_Char,w
   712     065B  0088               	movwf	8	;volatile
   713     065C                     l679:
   714                           
   715                           ;atividade10.c: 164:     RE1 = 1; _delay((unsigned long)((10)*(20000000UL/4000000.0))); 
      +                          RE1 = 0;
   716     065C  1489               	bsf	9,1	;volatile
   717     065D                     l681:
   718     065D  3010               	movlw	16
   719     065E  00F0               	movwf	??_LCD_Char
   720     065F                     u437:
   721     065F  0BF0               	decfsz	??_LCD_Char,f
   722     0660  2E5F               	goto	u437
   723     0661  0000               	nop
   724     0662                     l683:
   725     0662  1283               	bcf	3,5	;RP0=0, select bank0
   726     0663  1303               	bcf	3,6	;RP1=0, select bank0
   727     0664  1089               	bcf	9,1	;volatile
   728     0665                     l685:
   729                           
   730                           ;atividade10.c: 166:     PORTD = (PORTD & 0x0F) | ((data << 4) & 0xF0);
   731     0665  0872               	movf	LCD_Char@data,w
   732     0666  00F0               	movwf	??_LCD_Char
   733     0667  3004               	movlw	4
   734     0668                     u15:
   735     0668  1003               	clrc
   736     0669  0DF0               	rlf	??_LCD_Char,f
   737     066A  3EFF               	addlw	-1
   738     066B  1D03               	skipz
   739     066C  2E68               	goto	u15
   740     066D  30F0               	movlw	240
   741     066E  0570               	andwf	??_LCD_Char,w
   742     066F  00F1               	movwf	??_LCD_Char+1
   743     0670  0808               	movf	8,w	;volatile
   744     0671  390F               	andlw	15
   745     0672  0471               	iorwf	??_LCD_Char+1,w
   746     0673  0088               	movwf	8	;volatile
   747     0674                     l687:
   748                           
   749                           ;atividade10.c: 167:     RE1 = 1; _delay((unsigned long)((10)*(20000000UL/4000000.0))); 
      +                          RE1 = 0;
   750     0674  1489               	bsf	9,1	;volatile
   751     0675  3010               	movlw	16
   752     0676  00F0               	movwf	??_LCD_Char
   753     0677                     u447:
   754     0677  0BF0               	decfsz	??_LCD_Char,f
   755     0678  2E77               	goto	u447
   756     0679  0000               	nop
   757     067A                     l689:
   758     067A  1283               	bcf	3,5	;RP0=0, select bank0
   759     067B  1303               	bcf	3,6	;RP1=0, select bank0
   760     067C  1089               	bcf	9,1	;volatile
   761                           
   762                           ;atividade10.c: 169:     _delay((unsigned long)((2)*(20000000UL/4000.0)));
   763     067D  300D               	movlw	13
   764     067E  00F1               	movwf	??_LCD_Char+1
   765     067F  30FB               	movlw	251
   766     0680  00F0               	movwf	??_LCD_Char
   767     0681                     u457:
   768     0681  0BF0               	decfsz	??_LCD_Char,f
   769     0682  2E81               	goto	u457
   770     0683  0BF1               	decfsz	??_LCD_Char+1,f
   771     0684  2E81               	goto	u457
   772     0685  2E86               	nop2
   773     0686                     l80:
   774     0686  0008               	return
   775     0687                     __end_of_LCD_Char:
   776                           
   777                           	psect	text3
   778     05FD                     __ptext3:	
   779 ;; *************** function _LCD_SetCursor *****************
   780 ;; Defined at:
   781 ;;		line 183 in file "atividade10.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;  row             1    wreg     unsigned char 
   784 ;;  col             1    3[COMMON] unsigned char 
   785 ;; Auto vars:     Size  Location     Type
   786 ;;  row             1    4[COMMON] unsigned char 
   787 ;;  address         1    7[COMMON] unsigned char 
   788 ;; Return value:  Size  Location     Type
   789 ;;                  1    wreg      void 
   790 ;; Registers used:
   791 ;;		wreg, status,2, status,0, pclath, cstack
   792 ;; Tracked objects:
   793 ;;		On entry : 0/0
   794 ;;		On exit  : 0/0
   795 ;;		Unchanged: 0/0
   796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   797 ;;      Params:         1       0       0       0       0
   798 ;;      Locals:         4       0       0       0       0
   799 ;;      Temps:          0       0       0       0       0
   800 ;;      Totals:         5       0       0       0       0
   801 ;;Total ram usage:        5 bytes
   802 ;; Hardware stack levels used: 1
   803 ;; Hardware stack levels required when called: 1
   804 ;; This function calls:
   805 ;;		_LCD_Cmd
   806 ;; This function is called by:
   807 ;;		_main
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811     05FD                     _LCD_SetCursor:	
   812                           ;psect for function _LCD_SetCursor
   813                           
   814                           
   815                           ;incstack = 0
   816                           ; Regs used in _LCD_SetCursor: [wreg+status,2+status,0+pclath+cstack]
   817                           ;LCD_SetCursor@row stored from wreg
   818     05FD  00F4               	movwf	LCD_SetCursor@row
   819     05FE                     l909:
   820                           
   821                           ;atividade10.c: 183: void LCD_SetCursor(uint8_t row, uint8_t col);atividade10.c: 184: {;
      +                          atividade10.c: 185:     uint8_t address = (row == 1) ? 0x80 + (col - 1) : 0xC0 + (col - 
      +                          1);
   822     05FE  0374               	decf	LCD_SetCursor@row,w
   823     05FF  1903               	btfsc	3,2
   824     0600  2E02               	goto	u231
   825     0601  2E03               	goto	u230
   826     0602                     u231:
   827     0602  2E0B               	goto	l913
   828     0603                     u230:
   829     0603                     l911:
   830     0603  0873               	movf	LCD_SetCursor@col,w
   831     0604  3EBF               	addlw	191
   832     0605  00F5               	movwf	_LCD_SetCursor$212
   833     0606  3000               	movlw	0
   834     0607  1803               	skipnc
   835     0608  3001               	movlw	1
   836     0609  00F6               	movwf	_LCD_SetCursor$212+1
   837     060A  2E12               	goto	l95
   838     060B                     l913:
   839     060B  0873               	movf	LCD_SetCursor@col,w
   840     060C  3E7F               	addlw	127
   841     060D  00F5               	movwf	_LCD_SetCursor$212
   842     060E  3000               	movlw	0
   843     060F  1803               	skipnc
   844     0610  3001               	movlw	1
   845     0611  00F6               	movwf	_LCD_SetCursor$212+1
   846     0612                     l95:
   847     0612  0875               	movf	_LCD_SetCursor$212,w
   848     0613  00F7               	movwf	LCD_SetCursor@address
   849     0614                     l915:
   850                           
   851                           ;atividade10.c: 186:     LCD_Cmd(address);
   852     0614  0877               	movf	LCD_SetCursor@address,w
   853     0615  120A  118A  261B  120A  118A  	fcall	_LCD_Cmd
   854     061A                     l96:
   855     061A  0008               	return
   856     061B                     __end_of_LCD_SetCursor:
   857                           
   858                           	psect	text4
   859     0687                     __ptext4:	
   860 ;; *************** function _LCD_Init *****************
   861 ;; Defined at:
   862 ;;		line 127 in file "atividade10.c"
   863 ;; Parameters:    Size  Location     Type
   864 ;;		None
   865 ;; Auto vars:     Size  Location     Type
   866 ;;		None
   867 ;; Return value:  Size  Location     Type
   868 ;;                  1    wreg      void 
   869 ;; Registers used:
   870 ;;		wreg, status,2, status,0, pclath, cstack
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   876 ;;      Params:         0       0       0       0       0
   877 ;;      Locals:         0       0       0       0       0
   878 ;;      Temps:          2       0       0       0       0
   879 ;;      Totals:         2       0       0       0       0
   880 ;;Total ram usage:        2 bytes
   881 ;; Hardware stack levels used: 1
   882 ;; Hardware stack levels required when called: 1
   883 ;; This function calls:
   884 ;;		_LCD_Cmd
   885 ;; This function is called by:
   886 ;;		_main
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890     0687                     _LCD_Init:	
   891                           ;psect for function _LCD_Init
   892                           
   893     0687                     l885:	
   894                           ;incstack = 0
   895                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
   896                           
   897                           
   898                           ;atividade10.c: 129:     TRISE0 = TRISE1 = TRISD4 = TRISD5 = TRISD6 = TRISD7 = 0;
   899     0687  1683               	bsf	3,5	;RP0=1, select bank1
   900     0688  1303               	bcf	3,6	;RP1=0, select bank1
   901     0689  1388               	bcf	8,7	;volatile
   902     068A  1308               	bcf	8,6	;volatile
   903     068B  1288               	bcf	8,5	;volatile
   904     068C  1208               	bcf	8,4	;volatile
   905     068D  1089               	bcf	9,1	;volatile
   906     068E  1009               	bcf	9,0	;volatile
   907     068F                     l887:
   908                           
   909                           ;atividade10.c: 131:     _delay((unsigned long)((20)*(20000000UL/4000.0)));
   910     068F  3082               	movlw	130
   911     0690  00F4               	movwf	??_LCD_Init+1
   912     0691  30DD               	movlw	221
   913     0692  00F3               	movwf	??_LCD_Init
   914     0693                     u467:
   915     0693  0BF3               	decfsz	??_LCD_Init,f
   916     0694  2E93               	goto	u467
   917     0695  0BF4               	decfsz	??_LCD_Init+1,f
   918     0696  2E93               	goto	u467
   919     0697  2E98               	nop2
   920     0698                     l889:
   921                           
   922                           ;atividade10.c: 133:     LCD_Cmd(0x03);
   923     0698  3003               	movlw	3
   924     0699  120A  118A  261B  120A  118A  	fcall	_LCD_Cmd
   925     069E                     l891:
   926                           
   927                           ;atividade10.c: 134:     _delay((unsigned long)((5)*(20000000UL/4000.0)));
   928     069E  3021               	movlw	33
   929     069F  00F4               	movwf	??_LCD_Init+1
   930     06A0  3076               	movlw	118
   931     06A1  00F3               	movwf	??_LCD_Init
   932     06A2                     u477:
   933     06A2  0BF3               	decfsz	??_LCD_Init,f
   934     06A3  2EA2               	goto	u477
   935     06A4  0BF4               	decfsz	??_LCD_Init+1,f
   936     06A5  2EA2               	goto	u477
   937     06A6  0000               	nop
   938                           
   939                           ;atividade10.c: 135:     LCD_Cmd(0x03);
   940     06A7  3003               	movlw	3
   941     06A8  120A  118A  261B  120A  118A  	fcall	_LCD_Cmd
   942     06AD                     l893:
   943                           
   944                           ;atividade10.c: 136:     _delay((unsigned long)((200)*(20000000UL/4000000.0)));
   945     06AD  30C7               	movlw	199
   946     06AE  00F3               	movwf	??_LCD_Init
   947     06AF                     u487:
   948     06AF  2EB0               	nop2
   949     06B0  0BF3               	decfsz	??_LCD_Init,f
   950     06B1  2EAF               	goto	u487
   951     06B2  2EB3               	nop2
   952     06B3  2EB4               	nop2
   953     06B4                     l895:
   954                           
   955                           ;atividade10.c: 137:     LCD_Cmd(0x03);
   956     06B4  3003               	movlw	3
   957     06B5  120A  118A  261B  120A  118A  	fcall	_LCD_Cmd
   958                           
   959                           ;atividade10.c: 138:     _delay((unsigned long)((200)*(20000000UL/4000000.0)));
   960     06BA  30C7               	movlw	199
   961     06BB  00F3               	movwf	??_LCD_Init
   962     06BC                     u497:
   963     06BC  2EBD               	nop2
   964     06BD  0BF3               	decfsz	??_LCD_Init,f
   965     06BE  2EBC               	goto	u497
   966     06BF  2EC0               	nop2
   967     06C0  2EC1               	nop2
   968     06C1                     l897:
   969                           
   970                           ;atividade10.c: 140:     LCD_Cmd(0x02);
   971     06C1  3002               	movlw	2
   972     06C2  120A  118A  261B  120A  118A  	fcall	_LCD_Cmd
   973     06C7                     l899:
   974                           
   975                           ;atividade10.c: 141:     LCD_Cmd(0x28);
   976     06C7  3028               	movlw	40
   977     06C8  120A  118A  261B  120A  118A  	fcall	_LCD_Cmd
   978     06CD                     l901:
   979                           
   980                           ;atividade10.c: 142:     LCD_Cmd(0x0C);
   981     06CD  300C               	movlw	12
   982     06CE  120A  118A  261B  120A  118A  	fcall	_LCD_Cmd
   983     06D3                     l903:
   984                           
   985                           ;atividade10.c: 143:     LCD_Cmd(0x06);
   986     06D3  3006               	movlw	6
   987     06D4  120A  118A  261B  120A  118A  	fcall	_LCD_Cmd
   988     06D9                     l905:
   989                           
   990                           ;atividade10.c: 144:     LCD_Cmd(0x01);
   991     06D9  3001               	movlw	1
   992     06DA  120A  118A  261B  120A  118A  	fcall	_LCD_Cmd
   993     06DF                     l907:
   994                           
   995                           ;atividade10.c: 145:     _delay((unsigned long)((2)*(20000000UL/4000.0)));
   996     06DF  300D               	movlw	13
   997     06E0  00F4               	movwf	??_LCD_Init+1
   998     06E1  30FB               	movlw	251
   999     06E2  00F3               	movwf	??_LCD_Init
  1000     06E3                     u507:
  1001     06E3  0BF3               	decfsz	??_LCD_Init,f
  1002     06E4  2EE3               	goto	u507
  1003     06E5  0BF4               	decfsz	??_LCD_Init+1,f
  1004     06E6  2EE3               	goto	u507
  1005     06E7  2EE8               	nop2
  1006     06E8                     l74:
  1007     06E8  0008               	return
  1008     06E9                     __end_of_LCD_Init:
  1009                           
  1010                           	psect	text5
  1011     05BA                     __ptext5:	
  1012 ;; *************** function _LCD_Clear *****************
  1013 ;; Defined at:
  1014 ;;		line 177 in file "atividade10.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;		None
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;		None
  1019 ;; Return value:  Size  Location     Type
  1020 ;;                  1    wreg      void 
  1021 ;; Registers used:
  1022 ;;		wreg, status,2, status,0, pclath, cstack
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1028 ;;      Params:         0       0       0       0       0
  1029 ;;      Locals:         0       0       0       0       0
  1030 ;;      Temps:          2       0       0       0       0
  1031 ;;      Totals:         2       0       0       0       0
  1032 ;;Total ram usage:        2 bytes
  1033 ;; Hardware stack levels used: 1
  1034 ;; Hardware stack levels required when called: 1
  1035 ;; This function calls:
  1036 ;;		_LCD_Cmd
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042     05BA                     _LCD_Clear:	
  1043                           ;psect for function _LCD_Clear
  1044                           
  1045     05BA                     l985:	
  1046                           ;incstack = 0
  1047                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  1048                           
  1049                           
  1050                           ;atividade10.c: 179:     LCD_Cmd(0x01);
  1051     05BA  3001               	movlw	1
  1052     05BB  120A  118A  261B  120A  118A  	fcall	_LCD_Cmd
  1053     05C0                     l987:
  1054                           
  1055                           ;atividade10.c: 180:     _delay((unsigned long)((2)*(20000000UL/4000.0)));
  1056     05C0  300D               	movlw	13
  1057     05C1  00F4               	movwf	??_LCD_Clear+1
  1058     05C2  30FB               	movlw	251
  1059     05C3  00F3               	movwf	??_LCD_Clear
  1060     05C4                     u517:
  1061     05C4  0BF3               	decfsz	??_LCD_Clear,f
  1062     05C5  2DC4               	goto	u517
  1063     05C6  0BF4               	decfsz	??_LCD_Clear+1,f
  1064     05C7  2DC4               	goto	u517
  1065     05C8  2DC9               	nop2
  1066     05C9                     l89:
  1067     05C9  0008               	return
  1068     05CA                     __end_of_LCD_Clear:
  1069                           
  1070                           	psect	text6
  1071     061B                     __ptext6:	
  1072 ;; *************** function _LCD_Cmd *****************
  1073 ;; Defined at:
  1074 ;;		line 148 in file "atividade10.c"
  1075 ;; Parameters:    Size  Location     Type
  1076 ;;  cmd             1    wreg     unsigned char 
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;  cmd             1    2[COMMON] unsigned char 
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  1    wreg      void 
  1081 ;; Registers used:
  1082 ;;		wreg, status,2, status,0
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1088 ;;      Params:         0       0       0       0       0
  1089 ;;      Locals:         1       0       0       0       0
  1090 ;;      Temps:          2       0       0       0       0
  1091 ;;      Totals:         3       0       0       0       0
  1092 ;;Total ram usage:        3 bytes
  1093 ;; Hardware stack levels used: 1
  1094 ;; This function calls:
  1095 ;;		Nothing
  1096 ;; This function is called by:
  1097 ;;		_LCD_Init
  1098 ;;		_LCD_Clear
  1099 ;;		_LCD_SetCursor
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103     061B                     _LCD_Cmd:	
  1104                           ;psect for function _LCD_Cmd
  1105                           
  1106                           
  1107                           ;incstack = 0
  1108                           ; Regs used in _LCD_Cmd: [wreg+status,2+status,0]
  1109                           ;LCD_Cmd@cmd stored from wreg
  1110     061B  00F2               	movwf	LCD_Cmd@cmd
  1111     061C                     l869:
  1112                           
  1113                           ;atividade10.c: 148: void LCD_Cmd(unsigned char cmd);atividade10.c: 149: {;atividade10.c
      +                          : 150:     RE0 = 0;
  1114     061C  1283               	bcf	3,5	;RP0=0, select bank0
  1115     061D  1303               	bcf	3,6	;RP1=0, select bank0
  1116     061E  1009               	bcf	9,0	;volatile
  1117     061F                     l871:
  1118                           
  1119                           ;atividade10.c: 151:     PORTD = (PORTD & 0x0F) | (cmd & 0xF0);
  1120     061F  30F0               	movlw	240
  1121     0620  0572               	andwf	LCD_Cmd@cmd,w
  1122     0621  00F0               	movwf	??_LCD_Cmd
  1123     0622  0808               	movf	8,w	;volatile
  1124     0623  390F               	andlw	15
  1125     0624  0470               	iorwf	??_LCD_Cmd,w
  1126     0625  0088               	movwf	8	;volatile
  1127     0626                     l873:
  1128                           
  1129                           ;atividade10.c: 152:     RE1 = 1; _delay((unsigned long)((10)*(20000000UL/4000000.0))); 
      +                          RE1 = 0;
  1130     0626  1489               	bsf	9,1	;volatile
  1131     0627                     l875:
  1132     0627  3010               	movlw	16
  1133     0628  00F0               	movwf	??_LCD_Cmd
  1134     0629                     u527:
  1135     0629  0BF0               	decfsz	??_LCD_Cmd,f
  1136     062A  2E29               	goto	u527
  1137     062B  0000               	nop
  1138     062C                     l877:
  1139     062C  1283               	bcf	3,5	;RP0=0, select bank0
  1140     062D  1303               	bcf	3,6	;RP1=0, select bank0
  1141     062E  1089               	bcf	9,1	;volatile
  1142     062F                     l879:
  1143                           
  1144                           ;atividade10.c: 154:     PORTD = (PORTD & 0x0F) | ((cmd << 4) & 0xF0);
  1145     062F  0872               	movf	LCD_Cmd@cmd,w
  1146     0630  00F0               	movwf	??_LCD_Cmd
  1147     0631  3004               	movlw	4
  1148     0632                     u225:
  1149     0632  1003               	clrc
  1150     0633  0DF0               	rlf	??_LCD_Cmd,f
  1151     0634  3EFF               	addlw	-1
  1152     0635  1D03               	skipz
  1153     0636  2E32               	goto	u225
  1154     0637  30F0               	movlw	240
  1155     0638  0570               	andwf	??_LCD_Cmd,w
  1156     0639  00F1               	movwf	??_LCD_Cmd+1
  1157     063A  0808               	movf	8,w	;volatile
  1158     063B  390F               	andlw	15
  1159     063C  0471               	iorwf	??_LCD_Cmd+1,w
  1160     063D  0088               	movwf	8	;volatile
  1161     063E                     l881:
  1162                           
  1163                           ;atividade10.c: 155:     RE1 = 1; _delay((unsigned long)((10)*(20000000UL/4000000.0))); 
      +                          RE1 = 0;
  1164     063E  1489               	bsf	9,1	;volatile
  1165     063F  3010               	movlw	16
  1166     0640  00F0               	movwf	??_LCD_Cmd
  1167     0641                     u537:
  1168     0641  0BF0               	decfsz	??_LCD_Cmd,f
  1169     0642  2E41               	goto	u537
  1170     0643  0000               	nop
  1171     0644                     l883:
  1172     0644  1283               	bcf	3,5	;RP0=0, select bank0
  1173     0645  1303               	bcf	3,6	;RP1=0, select bank0
  1174     0646  1089               	bcf	9,1	;volatile
  1175                           
  1176                           ;atividade10.c: 157:     _delay((unsigned long)((2)*(20000000UL/4000.0)));
  1177     0647  300D               	movlw	13
  1178     0648  00F1               	movwf	??_LCD_Cmd+1
  1179     0649  30FB               	movlw	251
  1180     064A  00F0               	movwf	??_LCD_Cmd
  1181     064B                     u547:
  1182     064B  0BF0               	decfsz	??_LCD_Cmd,f
  1183     064C  2E4B               	goto	u547
  1184     064D  0BF1               	decfsz	??_LCD_Cmd+1,f
  1185     064E  2E4B               	goto	u547
  1186     064F  2E50               	nop2
  1187     0650                     l77:
  1188     0650  0008               	return
  1189     0651                     __end_of_LCD_Cmd:
  1190                           
  1191                           	psect	text7
  1192     05A6                     __ptext7:	
  1193 ;; *************** function _Keypad_Init *****************
  1194 ;; Defined at:
  1195 ;;		line 198 in file "atividade10.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;		None
  1198 ;; Auto vars:     Size  Location     Type
  1199 ;;		None
  1200 ;; Return value:  Size  Location     Type
  1201 ;;                  1    wreg      void 
  1202 ;; Registers used:
  1203 ;;		None
  1204 ;; Tracked objects:
  1205 ;;		On entry : 0/0
  1206 ;;		On exit  : 0/0
  1207 ;;		Unchanged: 0/0
  1208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1209 ;;      Params:         0       0       0       0       0
  1210 ;;      Locals:         0       0       0       0       0
  1211 ;;      Temps:          0       0       0       0       0
  1212 ;;      Totals:         0       0       0       0       0
  1213 ;;Total ram usage:        0 bytes
  1214 ;; Hardware stack levels used: 1
  1215 ;; This function calls:
  1216 ;;		Nothing
  1217 ;; This function is called by:
  1218 ;;		_main
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222     05A6                     _Keypad_Init:	
  1223                           ;psect for function _Keypad_Init
  1224                           
  1225     05A6                     l731:	
  1226                           ;incstack = 0
  1227                           ; Regs used in _Keypad_Init: []
  1228                           
  1229                           
  1230                           ;atividade10.c: 200:     TRISC = 0xF0;
  1231     05A6  30F0               	movlw	240
  1232     05A7  1683               	bsf	3,5	;RP0=1, select bank1
  1233     05A8  1303               	bcf	3,6	;RP1=0, select bank1
  1234     05A9  0087               	movwf	7	;volatile
  1235                           
  1236                           ;atividade10.c: 201:     OPTION_REGbits.nRBPU = 0;
  1237     05AA  1381               	bcf	1,7	;volatile
  1238     05AB                     l101:
  1239     05AB  0008               	return
  1240     05AC                     __end_of_Keypad_Init:
  1241                           
  1242                           	psect	text8
  1243     06E9                     __ptext8:	
  1244 ;; *************** function _Keypad_GetChar *****************
  1245 ;; Defined at:
  1246 ;;		line 204 in file "atividade10.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;		None
  1249 ;; Auto vars:     Size  Location     Type
  1250 ;;  row             1    1[COMMON] unsigned char 
  1251 ;; Return value:  Size  Location     Type
  1252 ;;                  1    wreg      unsigned char 
  1253 ;; Registers used:
  1254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1255 ;; Tracked objects:
  1256 ;;		On entry : 0/0
  1257 ;;		On exit  : 0/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1260 ;;      Params:         0       0       0       0       0
  1261 ;;      Locals:         1       0       0       0       0
  1262 ;;      Temps:          1       0       0       0       0
  1263 ;;      Totals:         2       0       0       0       0
  1264 ;;Total ram usage:        2 bytes
  1265 ;; Hardware stack levels used: 2
  1266 ;; This function calls:
  1267 ;;		Nothing
  1268 ;; This function is called by:
  1269 ;;		_main
  1270 ;; This function uses a non-reentrant model
  1271 ;;
  1272                           
  1273     06E9                     _Keypad_GetChar:	
  1274                           ;psect for function _Keypad_GetChar
  1275                           
  1276     06E9                     l104:	
  1277                           ;incstack = 0
  1278                           ; Regs used in _Keypad_GetChar: [wreg-fsr0h+status,2+status,0+pclath]
  1279                           ;atividade10.c: 206:     while(1)
  1280                           
  1281     06E9                     l925:
  1282                           
  1283                           ;atividade10.c: 207:     {;atividade10.c: 208:         for(uint8_t row = 0; row < 4; row
      +                          ++)
  1284     06E9  01F1               	clrf	Keypad_GetChar@row
  1285     06EA                     l927:
  1286     06EA  3004               	movlw	4
  1287     06EB  0271               	subwf	Keypad_GetChar@row,w
  1288     06EC  1C03               	skipc
  1289     06ED  2EEF               	goto	u251
  1290     06EE  2EF0               	goto	u250
  1291     06EF                     u251:
  1292     06EF  2EF1               	goto	l931
  1293     06F0                     u250:
  1294     06F0  2EE9               	goto	l104
  1295     06F1                     l931:
  1296                           
  1297                           ;atividade10.c: 209:         {;atividade10.c: 210:             PORTC = ~(1 << row);
  1298     06F1  3001               	movlw	1
  1299     06F2  00F0               	movwf	??_Keypad_GetChar
  1300     06F3  0A71               	incf	Keypad_GetChar@row,w
  1301     06F4  2EF7               	goto	u264
  1302     06F5                     u265:
  1303     06F5  1003               	clrc
  1304     06F6  0DF0               	rlf	??_Keypad_GetChar,f
  1305     06F7                     u264:
  1306     06F7  3EFF               	addlw	-1
  1307     06F8  1D03               	skipz
  1308     06F9  2EF5               	goto	u265
  1309     06FA  0870               	movf	??_Keypad_GetChar,w
  1310     06FB  3AFF               	xorlw	255
  1311     06FC  1283               	bcf	3,5	;RP0=0, select bank0
  1312     06FD  1303               	bcf	3,6	;RP1=0, select bank0
  1313     06FE  0087               	movwf	7	;volatile
  1314     06FF                     l933:
  1315                           
  1316                           ;atividade10.c: 211:             _delay((unsigned long)((50)*(20000000UL/4000000.0)));
  1317     06FF  3053               	movlw	83
  1318     0700  00F0               	movwf	??_Keypad_GetChar
  1319     0701                     u557:
  1320     0701  0BF0               	decfsz	??_Keypad_GetChar,f
  1321     0702  2F01               	goto	u557
  1322     0703                     l935:
  1323                           
  1324                           ;atividade10.c: 213:             if(PORTBbits.RB0 == 0) { while(PORTBbits.RB0==0); retur
      +                          n keypad_map[row][0]; }
  1325     0703  1283               	bcf	3,5	;RP0=0, select bank0
  1326     0704  1303               	bcf	3,6	;RP1=0, select bank0
  1327     0705  1806               	btfsc	6,0	;volatile
  1328     0706  2F08               	goto	u271
  1329     0707  2F09               	goto	u270
  1330     0708                     u271:
  1331     0708  2F1F               	goto	l107
  1332     0709                     u270:
  1333     0709                     l108:
  1334     0709  1C06               	btfss	6,0	;volatile
  1335     070A  2F0C               	goto	u281
  1336     070B  2F0D               	goto	u280
  1337     070C                     u281:
  1338     070C  2F09               	goto	l108
  1339     070D                     u280:
  1340     070D                     l939:
  1341     070D  0871               	movf	Keypad_GetChar@row,w
  1342     070E  00F0               	movwf	??_Keypad_GetChar
  1343     070F  3001               	movlw	1
  1344     0710                     u295:
  1345     0710  1003               	clrc
  1346     0711  0DF0               	rlf	??_Keypad_GetChar,f
  1347     0712  3EFF               	addlw	-1
  1348     0713  1D03               	skipz
  1349     0714  2F10               	goto	u295
  1350     0715  1003               	clrc
  1351     0716  0D70               	rlf	??_Keypad_GetChar,w
  1352     0717  3E01               	addlw	low ((_keypad_map-__stringbase)| (0+32768))
  1353     0718  0084               	movwf	4
  1354     0719  120A  118A  2003  120A  118A  	fcall	stringdir
  1355     071E  2F70               	goto	l111
  1356     071F                     l107:
  1357                           
  1358                           ;atividade10.c: 214:             if(PORTBbits.RB1 == 0) { while(PORTBbits.RB1==0); retur
      +                          n keypad_map[row][1]; }
  1359     071F  1886               	btfsc	6,1	;volatile
  1360     0720  2F22               	goto	u301
  1361     0721  2F23               	goto	u300
  1362     0722                     u301:
  1363     0722  2F39               	goto	l112
  1364     0723                     u300:
  1365     0723                     l113:
  1366     0723  1C86               	btfss	6,1	;volatile
  1367     0724  2F26               	goto	u311
  1368     0725  2F27               	goto	u310
  1369     0726                     u311:
  1370     0726  2F23               	goto	l113
  1371     0727                     u310:
  1372     0727                     l945:
  1373     0727  0871               	movf	Keypad_GetChar@row,w
  1374     0728  00F0               	movwf	??_Keypad_GetChar
  1375     0729  3001               	movlw	1
  1376     072A                     u325:
  1377     072A  1003               	clrc
  1378     072B  0DF0               	rlf	??_Keypad_GetChar,f
  1379     072C  3EFF               	addlw	-1
  1380     072D  1D03               	skipz
  1381     072E  2F2A               	goto	u325
  1382     072F  1003               	clrc
  1383     0730  0D70               	rlf	??_Keypad_GetChar,w
  1384     0731  3E02               	addlw	low (((_keypad_map-__stringbase)| (0+32768)+1))
  1385     0732  0084               	movwf	4
  1386     0733  120A  118A  2003  120A  118A  	fcall	stringdir
  1387     0738  2F70               	goto	l111
  1388     0739                     l112:
  1389                           
  1390                           ;atividade10.c: 215:             if(PORTBbits.RB2 == 0) { while(PORTBbits.RB2==0); retur
      +                          n keypad_map[row][2]; }
  1391     0739  1906               	btfsc	6,2	;volatile
  1392     073A  2F3C               	goto	u331
  1393     073B  2F3D               	goto	u330
  1394     073C                     u331:
  1395     073C  2F53               	goto	l116
  1396     073D                     u330:
  1397     073D                     l117:
  1398     073D  1D06               	btfss	6,2	;volatile
  1399     073E  2F40               	goto	u341
  1400     073F  2F41               	goto	u340
  1401     0740                     u341:
  1402     0740  2F3D               	goto	l117
  1403     0741                     u340:
  1404     0741                     l951:
  1405     0741  0871               	movf	Keypad_GetChar@row,w
  1406     0742  00F0               	movwf	??_Keypad_GetChar
  1407     0743  3001               	movlw	1
  1408     0744                     u355:
  1409     0744  1003               	clrc
  1410     0745  0DF0               	rlf	??_Keypad_GetChar,f
  1411     0746  3EFF               	addlw	-1
  1412     0747  1D03               	skipz
  1413     0748  2F44               	goto	u355
  1414     0749  1003               	clrc
  1415     074A  0D70               	rlf	??_Keypad_GetChar,w
  1416     074B  3E03               	addlw	low (((_keypad_map-__stringbase)| (0+32768)+2))
  1417     074C  0084               	movwf	4
  1418     074D  120A  118A  2003  120A  118A  	fcall	stringdir
  1419     0752  2F70               	goto	l111
  1420     0753                     l116:
  1421                           
  1422                           ;atividade10.c: 216:             if(PORTBbits.RB3 == 0) { while(PORTBbits.RB3==0); retur
      +                          n keypad_map[row][3]; }
  1423     0753  1986               	btfsc	6,3	;volatile
  1424     0754  2F56               	goto	u361
  1425     0755  2F57               	goto	u360
  1426     0756                     u361:
  1427     0756  2F6D               	goto	l961
  1428     0757                     u360:
  1429     0757                     l121:
  1430     0757  1D86               	btfss	6,3	;volatile
  1431     0758  2F5A               	goto	u371
  1432     0759  2F5B               	goto	u370
  1433     075A                     u371:
  1434     075A  2F57               	goto	l121
  1435     075B                     u370:
  1436     075B                     l957:
  1437     075B  0871               	movf	Keypad_GetChar@row,w
  1438     075C  00F0               	movwf	??_Keypad_GetChar
  1439     075D  3001               	movlw	1
  1440     075E                     u385:
  1441     075E  1003               	clrc
  1442     075F  0DF0               	rlf	??_Keypad_GetChar,f
  1443     0760  3EFF               	addlw	-1
  1444     0761  1D03               	skipz
  1445     0762  2F5E               	goto	u385
  1446     0763  1003               	clrc
  1447     0764  0D70               	rlf	??_Keypad_GetChar,w
  1448     0765  3E04               	addlw	low (((_keypad_map-__stringbase)| (0+32768)+3))
  1449     0766  0084               	movwf	4
  1450     0767  120A  118A  2003  120A  118A  	fcall	stringdir
  1451     076C  2F70               	goto	l111
  1452     076D                     l961:
  1453                           
  1454                           ;atividade10.c: 217:         }
  1455     076D  3001               	movlw	1
  1456     076E  07F1               	addwf	Keypad_GetChar@row,f
  1457     076F  2EEA               	goto	l927
  1458     0770                     l111:
  1459     0770  0008               	return
  1460     0771                     __end_of_Keypad_GetChar:
  1461                           
  1462                           	psect	text9
  1463     05CA                     __ptext9:	
  1464 ;; *************** function _EEPROM_Write *****************
  1465 ;; Defined at:
  1466 ;;		line 222 in file "atividade10.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  address         1    wreg     unsigned char 
  1469 ;;  data            1    0[COMMON] unsigned char 
  1470 ;; Auto vars:     Size  Location     Type
  1471 ;;  address         1    1[COMMON] unsigned char 
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  1    wreg      void 
  1474 ;; Registers used:
  1475 ;;		wreg
  1476 ;; Tracked objects:
  1477 ;;		On entry : 0/0
  1478 ;;		On exit  : 0/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1481 ;;      Params:         1       0       0       0       0
  1482 ;;      Locals:         1       0       0       0       0
  1483 ;;      Temps:          0       0       0       0       0
  1484 ;;      Totals:         2       0       0       0       0
  1485 ;;Total ram usage:        2 bytes
  1486 ;; Hardware stack levels used: 1
  1487 ;; This function calls:
  1488 ;;		Nothing
  1489 ;; This function is called by:
  1490 ;;		_main
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494     05CA                     _EEPROM_Write:	
  1495                           ;psect for function _EEPROM_Write
  1496                           
  1497                           
  1498                           ;incstack = 0
  1499                           ; Regs used in _EEPROM_Write: [wreg]
  1500                           ;EEPROM_Write@address stored from wreg
  1501     05CA  00F1               	movwf	EEPROM_Write@address
  1502     05CB                     l965:
  1503                           
  1504                           ;atividade10.c: 222: void EEPROM_Write(uint8_t address, uint8_t data);atividade10.c: 223
      +                          : {;atividade10.c: 225:     EEADR = address;
  1505     05CB  0871               	movf	EEPROM_Write@address,w
  1506     05CC  1283               	bcf	3,5	;RP0=0, select bank2
  1507     05CD  1703               	bsf	3,6	;RP1=1, select bank2
  1508     05CE  008D               	movwf	13	;volatile
  1509                           
  1510                           ;atividade10.c: 226:     EEDATA = data;
  1511     05CF  0870               	movf	EEPROM_Write@data,w
  1512     05D0  008C               	movwf	12	;volatile
  1513     05D1                     l967:
  1514                           
  1515                           ;atividade10.c: 228:     EECON1bits.EEPGD = 0;
  1516     05D1  1683               	bsf	3,5	;RP0=1, select bank3
  1517     05D2  1703               	bsf	3,6	;RP1=1, select bank3
  1518     05D3  138C               	bcf	12,7	;volsfr
  1519     05D4                     l969:
  1520                           
  1521                           ;atividade10.c: 229:     EECON1bits.WREN = 1;
  1522     05D4  150C               	bsf	12,2	;volsfr
  1523     05D5                     l971:
  1524                           
  1525                           ;atividade10.c: 231:     INTCONbits.GIE = 0;
  1526     05D5  138B               	bcf	11,7	;volatile
  1527     05D6                     l973:
  1528                           
  1529                           ;atividade10.c: 232:     EECON2 = 0x55;
  1530     05D6  3055               	movlw	85
  1531     05D7  008D               	movwf	13	;volsfr
  1532     05D8                     l975:
  1533                           
  1534                           ;atividade10.c: 233:     EECON2 = 0xAA;
  1535     05D8  30AA               	movlw	170
  1536     05D9  008D               	movwf	13	;volsfr
  1537     05DA                     l977:
  1538                           
  1539                           ;atividade10.c: 234:     EECON1bits.WR = 1;
  1540     05DA  148C               	bsf	12,1	;volsfr
  1541     05DB                     l979:
  1542                           
  1543                           ;atividade10.c: 235:     __nop();
  1544     05DB  0000               	nop
  1545     05DC                     l981:
  1546                           
  1547                           ;atividade10.c: 237:     EECON1bits.WREN = 0;
  1548     05DC  1683               	bsf	3,5	;RP0=1, select bank3
  1549     05DD  1703               	bsf	3,6	;RP1=1, select bank3
  1550     05DE  110C               	bcf	12,2	;volsfr
  1551     05DF                     l983:
  1552                           
  1553                           ;atividade10.c: 238:     INTCONbits.GIE = 1;
  1554     05DF  178B               	bsf	11,7	;volatile
  1555     05E0                     l128:
  1556     05E0  0008               	return
  1557     05E1                     __end_of_EEPROM_Write:
  1558                           
  1559                           	psect	text10
  1560     05AC                     __ptext10:	
  1561 ;; *************** function _EEPROM_Read *****************
  1562 ;; Defined at:
  1563 ;;		line 241 in file "atividade10.c"
  1564 ;; Parameters:    Size  Location     Type
  1565 ;;  address         1    wreg     unsigned char 
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;  address         1    0[COMMON] unsigned char 
  1568 ;; Return value:  Size  Location     Type
  1569 ;;                  1    wreg      unsigned char 
  1570 ;; Registers used:
  1571 ;;		wreg
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1577 ;;      Params:         0       0       0       0       0
  1578 ;;      Locals:         1       0       0       0       0
  1579 ;;      Temps:          0       0       0       0       0
  1580 ;;      Totals:         1       0       0       0       0
  1581 ;;Total ram usage:        1 bytes
  1582 ;; Hardware stack levels used: 1
  1583 ;; This function calls:
  1584 ;;		Nothing
  1585 ;; This function is called by:
  1586 ;;		_main
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590     05AC                     _EEPROM_Read:	
  1591                           ;psect for function _EEPROM_Read
  1592                           
  1593                           
  1594                           ;incstack = 0
  1595                           ; Regs used in _EEPROM_Read: [wreg]
  1596                           ;EEPROM_Read@address stored from wreg
  1597     05AC  00F0               	movwf	EEPROM_Read@address
  1598     05AD                     l813:
  1599                           
  1600                           ;atividade10.c: 241: uint8_t EEPROM_Read(uint8_t address);atividade10.c: 242: {;atividad
      +                          e10.c: 243:     EEADR = address;
  1601     05AD  0870               	movf	EEPROM_Read@address,w
  1602     05AE  1283               	bcf	3,5	;RP0=0, select bank2
  1603     05AF  1703               	bsf	3,6	;RP1=1, select bank2
  1604     05B0  008D               	movwf	13	;volatile
  1605     05B1                     l815:
  1606                           
  1607                           ;atividade10.c: 244:     EECON1bits.EEPGD = 0;
  1608     05B1  1683               	bsf	3,5	;RP0=1, select bank3
  1609     05B2  1703               	bsf	3,6	;RP1=1, select bank3
  1610     05B3  138C               	bcf	12,7	;volsfr
  1611     05B4                     l817:
  1612                           
  1613                           ;atividade10.c: 245:     EECON1bits.RD = 1;
  1614     05B4  140C               	bsf	12,0	;volsfr
  1615     05B5                     l819:
  1616                           
  1617                           ;atividade10.c: 246:     __nop();
  1618     05B5  0000               	nop
  1619                           
  1620                           ;atividade10.c: 247:     return EEDATA;
  1621     05B6  1283               	bcf	3,5	;RP0=0, select bank2
  1622     05B7  1703               	bsf	3,6	;RP1=1, select bank2
  1623     05B8  080C               	movf	12,w	;volatile
  1624     05B9                     l131:
  1625     05B9  0008               	return
  1626     05BA                     __end_of_EEPROM_Read:
  1627     0002                     ___latbits      equ	2
  1628     007E                     btemp           set	126	;btemp
  1629     007E                     wtemp0          set	126
  1630                           
  1631                           	psect	config
  1632                           
  1633                           ;Config register CONFIG @ 0x2007
  1634                           ;	Oscillator Selection bits
  1635                           ;	FOSC = HS, HS oscillator
  1636                           ;	Watchdog Timer Enable bit
  1637                           ;	WDTE = OFF, WDT disabled
  1638                           ;	Power-up Timer Enable bit
  1639                           ;	PWRTE = ON, PWRT enabled
  1640                           ;	FLASH Program Memory Code Protection bits
  1641                           ;	CP = OFF, Code protection off
  1642                           ;	Brown-out Reset Enable bit
  1643                           ;	BOREN = ON, BOR enabled
  1644                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  1645                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1646                           ;	Data EE Memory Code Protection
  1647                           ;	CPD = OFF, Code Protection off
  1648                           ;	FLASH Program Memory Write Enable
  1649                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  1650                           ;	In-Circuit Debugger Mode bit
  1651                           ;	DEBUG = 0x1, unprogrammed default
  1652     2007                     	org	8199
  1653     2007  3D72               	dw	15730

Data Sizes:
    Strings     22
    Constant    16
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_String@str	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), STR_2(CODE[11]), 


Critical Paths under _main in COMMON

    _main->_LCD_SetCursor
    _LCD_String->_LCD_Char
    _LCD_SetCursor->_LCD_Cmd
    _LCD_Init->_LCD_Cmd
    _LCD_Clear->_LCD_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     786
                                              8 COMMON     5     5      0
                        _EEPROM_Read
                       _EEPROM_Write
                     _Keypad_GetChar
                        _Keypad_Init
                           _LCD_Char
                          _LCD_Clear
                           _LCD_Init
                      _LCD_SetCursor
                         _LCD_String
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           1     0      1      77
                                              3 COMMON     1     0      1
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Char                                             3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_SetCursor                                        5     4      1     182
                                              3 COMMON     5     4      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0      58
                                              3 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            2     2      0      58
                                              3 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0      58
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Keypad_GetChar                                       2     2      0     156
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         2     1      1      52
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read                                          1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM_Read
   _EEPROM_Write
   _Keypad_GetChar
   _Keypad_Init
   _LCD_Char
   _LCD_Clear
     _LCD_Cmd
   _LCD_Init
     _LCD_Cmd
   _LCD_SetCursor
     _LCD_Cmd
   _LCD_String
     _LCD_Char

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     13      13     92.9%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      13      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Feb 17 15:50:28 2025

                      pc 0002                       l80 0686                       l74 06E8  
                     l77 0650                       l86 05FC                       l95 0612  
                     l96 061A                       l89 05C9                       u15 0668  
                     fsr 0004              ?_LCD_String 0073            _LCD_SetCursor 05FD  
                    l101 05AB                      l111 0770                      l112 0739  
                    l104 06E9                      l121 0757                      l113 0723  
                    l131 05B9                      l107 071F                      l116 0753  
                    l108 0709                      l117 073D                      l128 05E0  
                    l731 05A6                      l813 05AD                      l901 06CD  
                    l815 05B1                      l903 06D3                      l911 0603  
                    l817 05B4                      l905 06D9                      l913 060B  
                    l681 065D                      l921 05EE                      l819 05B5  
                    l931 06F1                      l907 06DF                      l915 0614  
                    l683 0662                      l675 0652                      l923 05F0  
                    l933 06FF                      l925 06E9                      l909 05FE  
                    l685 0665                      l677 0655                      l917 05E1  
                    l951 0741                      l935 0703                      l927 06EA  
                    l871 061F                      l687 0674                      l679 065C  
                    l919 05E2                      l961 076D                      l945 0727  
                    l881 063E                      l873 0626                      l689 067A  
                    l971 05D5                      l939 070D                      l883 0644  
                    l875 0627                      l891 069E                      l981 05DC  
                    l973 05D6                      l965 05CB                      l957 075B  
                    l877 062C                      l869 061C                      l893 06AD  
                    l885 0687                      l983 05DF                      l975 05D8  
                    l967 05D1                      l879 062F                      l895 06B4  
                    l887 068F                      l991 0772                      l977 05DA  
                    l969 05D4                      l985 05BA                      l897 06C1  
                    l889 0698                      l993 0777                      l979 05DB  
                    l987 05C0                      l899 06C7                      l995 077C  
                    l997 0784                      l989 0771                      l999 078B  
                    _RE0 0048                      _RE1 0049                      u300 0723  
                    u301 0722                      u310 0727                      u230 0603  
                    u311 0726                      u231 0602                      u240 05FC  
                    u400 07AA                      u225 0632                      u241 05FB  
                    u401 07A9                      u330 073D                      u250 06F0  
                    u410 07C7                      u331 073C                      u251 06EF  
                    u411 07C6                      u340 0741                      u341 0740  
                    u325 072A                      u270 0709                      u271 0708  
                    u360 0757                      u280 070D                      u264 06F7  
                    u361 0756                      u281 070C                      u265 06F5  
                    u370 075B                      u371 075A                      u355 0744  
                    u507 06E3                      u427 07B6                      u517 05C4  
                    u437 065F                      u390 07A5                      u295 0710  
                    u527 0629                      u447 0677                      u391 07A4  
                    u385 075E                      u537 0641                      u457 0681  
                    u547 064B                      u467 0693                      u557 0701  
                    u477 06A2                      u487 06AF                      u497 06BC  
                    fsr0 0004          __end_of_LCD_Cmd 0651                     l1001 0791  
                   l1011 07B2                     l1003 0799                     l1021 07D3  
                   l1013 07BB                     l1005 079F                     l1023 07DB  
                   l1007 07A5                     l1015 07C1                     l1025 07E2  
                   l1017 07C7                     l1033 07F6                     l1009 07AA  
                   l1027 07EA                     l1019 07CE                     l1029 07F0  
                   STR_1 0024                     STR_2 0019                     _main 0771  
                   btemp 007E                     start 0000     __end_of_EEPROM_Write 05E1  
       __end_of_LCD_Char 0687         __end_of_LCD_Init 06E9             LCD_Char@data 0072  
         ?_LCD_SetCursor 0073                    ?_main 0070                    _EEADR 010D  
          ??_Keypad_Init 0070                    _PORTC 0007                    _PORTD 0008  
                  _TRISC 0087                    pclath 000A                    status 0003  
                  wtemp0 007E         EEPROM_Write@data 0070          __initialization 07FC  
           __end_of_main 07FC                   ??_main 0078        __end_of_LCD_Clear 05CA  
              ??_LCD_Cmd 0070                   _EEDATA 010C                   _EECON2 018D  
    __end_of_Keypad_Init 05AC                   _TRISE0 0448                   _TRISE1 0449  
                 _TRISD4 0444                   _TRISD5 0445                   _TRISD6 0446  
                 _TRISD7 0447     LCD_SetCursor@address 0077          ??_LCD_SetCursor 0074  
              ?_LCD_Char 0070  __end_of__initialization 07FC                ?_LCD_Init 0070  
         __pcstackCOMMON 0070        _LCD_SetCursor$212 0075             ??_LCD_String 0074  
         _OPTION_REGbits 0081              _Keypad_Init 05A6             _EEPROM_Write 05CA  
       main@eeprom_value 007A               ??_LCD_Char 0070               ??_LCD_Init 0073  
     __end_of_LCD_String 05FD               __pmaintext 0771           _Keypad_GetChar 06E9  
                _LCD_Cmd 061B               __stringtab 0003            LCD_String@str 0073  
 __end_of_Keypad_GetChar 0771                  __ptext1 05E1                  __ptext2 0651  
                __ptext3 05FD                  __ptext4 0687                  __ptext5 05BA  
                __ptext6 061B                  __ptext7 05A6                  __ptext8 06E9  
                __ptext9 05CA               _keypad_map 0009                _LCD_Clear 05BA  
   end_of_initialization 07FC         LCD_SetCursor@col 0073         LCD_SetCursor@row 0074  
          ??_EEPROM_Read 0070          ?_Keypad_GetChar 0070                _PORTBbits 0006  
             ?_LCD_Clear 0070               LCD_Cmd@cmd 0072      __end_of_EEPROM_Read 05BA  
  __end_of_LCD_SetCursor 061B             ?_Keypad_Init 0070      start_initialization 07FC  
               ?_LCD_Cmd 0070                ___latbits 0002              ??_LCD_Clear 0073  
            _EEPROM_Read 05AC                __pstrings 0003                 _LCD_Char 0651  
               _LCD_Init 0687         ??_Keypad_GetChar 0070              __stringbase 0008  
        main@key_pressed 007C               _EECON1bits 018C       __end_of__stringtab 0009  
      Keypad_GetChar@row 0071         main@previous_key 007B                 __ptext10 05AC  
          ?_EEPROM_Write 0070       __end_of_keypad_map 0019               _LCD_String 05E1  
             _INTCONbits 000B           ??_EEPROM_Write 0071             ?_EEPROM_Read 0070  
              stringcode 0003       EEPROM_Read@address 0070                 stringdir 0003  
               stringtab 0003      EEPROM_Write@address 0071  
