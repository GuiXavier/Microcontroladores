

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Feb 17 15:57:37 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20     0000                     
    21                           ; Generated 12/10/2023 GMT
    22                           ; 
    23                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F877 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55     0004                     fsr             equ	4
    56     0004                     fsr0            equ	4
    57     0000                     indf            equ	0
    58     0000                     indf0           equ	0
    59     0002                     pc              equ	2
    60     0002                     pcl             equ	2
    61     000A                     pclath          equ	10
    62     0003                     status          equ	3
    63     0000                     INDF            equ	0	;# 
    64     0001                     TMR0            equ	1	;# 
    65     0002                     PCL             equ	2	;# 
    66     0003                     STATUS          equ	3	;# 
    67     0004                     FSR             equ	4	;# 
    68     0005                     PORTA           equ	5	;# 
    69     0006                     PORTB           equ	6	;# 
    70     0007                     PORTC           equ	7	;# 
    71     0008                     PORTD           equ	8	;# 
    72     0009                     PORTE           equ	9	;# 
    73     000A                     PCLATH          equ	10	;# 
    74     000B                     INTCON          equ	11	;# 
    75     000C                     PIR1            equ	12	;# 
    76     000D                     PIR2            equ	13	;# 
    77     000E                     TMR1            equ	14	;# 
    78     000E                     TMR1L           equ	14	;# 
    79     000F                     TMR1H           equ	15	;# 
    80     0010                     T1CON           equ	16	;# 
    81     0011                     TMR2            equ	17	;# 
    82     0012                     T2CON           equ	18	;# 
    83     0013                     SSPBUF          equ	19	;# 
    84     0014                     SSPCON          equ	20	;# 
    85     0015                     CCPR1           equ	21	;# 
    86     0015                     CCPR1L          equ	21	;# 
    87     0016                     CCPR1H          equ	22	;# 
    88     0017                     CCP1CON         equ	23	;# 
    89     0018                     RCSTA           equ	24	;# 
    90     0019                     TXREG           equ	25	;# 
    91     001A                     RCREG           equ	26	;# 
    92     001B                     CCPR2           equ	27	;# 
    93     001B                     CCPR2L          equ	27	;# 
    94     001C                     CCPR2H          equ	28	;# 
    95     001D                     CCP2CON         equ	29	;# 
    96     001E                     ADRESH          equ	30	;# 
    97     001F                     ADCON0          equ	31	;# 
    98     0081                     OPTION_REG      equ	129	;# 
    99     0085                     TRISA           equ	133	;# 
   100     0086                     TRISB           equ	134	;# 
   101     0087                     TRISC           equ	135	;# 
   102     0088                     TRISD           equ	136	;# 
   103     0089                     TRISE           equ	137	;# 
   104     008C                     PIE1            equ	140	;# 
   105     008D                     PIE2            equ	141	;# 
   106     008E                     PCON            equ	142	;# 
   107     0091                     SSPCON2         equ	145	;# 
   108     0092                     PR2             equ	146	;# 
   109     0093                     SSPADD          equ	147	;# 
   110     0094                     SSPSTAT         equ	148	;# 
   111     0098                     TXSTA           equ	152	;# 
   112     0099                     SPBRG           equ	153	;# 
   113     009E                     ADRESL          equ	158	;# 
   114     009F                     ADCON1          equ	159	;# 
   115     010C                     EEDATA          equ	268	;# 
   116     010D                     EEADR           equ	269	;# 
   117     010E                     EEDATH          equ	270	;# 
   118     010F                     EEADRH          equ	271	;# 
   119     018C                     EECON1          equ	396	;# 
   120     018D                     EECON2          equ	397	;# 
   121     0000                     INDF            equ	0	;# 
   122     0001                     TMR0            equ	1	;# 
   123     0002                     PCL             equ	2	;# 
   124     0003                     STATUS          equ	3	;# 
   125     0004                     FSR             equ	4	;# 
   126     0005                     PORTA           equ	5	;# 
   127     0006                     PORTB           equ	6	;# 
   128     0007                     PORTC           equ	7	;# 
   129     0008                     PORTD           equ	8	;# 
   130     0009                     PORTE           equ	9	;# 
   131     000A                     PCLATH          equ	10	;# 
   132     000B                     INTCON          equ	11	;# 
   133     000C                     PIR1            equ	12	;# 
   134     000D                     PIR2            equ	13	;# 
   135     000E                     TMR1            equ	14	;# 
   136     000E                     TMR1L           equ	14	;# 
   137     000F                     TMR1H           equ	15	;# 
   138     0010                     T1CON           equ	16	;# 
   139     0011                     TMR2            equ	17	;# 
   140     0012                     T2CON           equ	18	;# 
   141     0013                     SSPBUF          equ	19	;# 
   142     0014                     SSPCON          equ	20	;# 
   143     0015                     CCPR1           equ	21	;# 
   144     0015                     CCPR1L          equ	21	;# 
   145     0016                     CCPR1H          equ	22	;# 
   146     0017                     CCP1CON         equ	23	;# 
   147     0018                     RCSTA           equ	24	;# 
   148     0019                     TXREG           equ	25	;# 
   149     001A                     RCREG           equ	26	;# 
   150     001B                     CCPR2           equ	27	;# 
   151     001B                     CCPR2L          equ	27	;# 
   152     001C                     CCPR2H          equ	28	;# 
   153     001D                     CCP2CON         equ	29	;# 
   154     001E                     ADRESH          equ	30	;# 
   155     001F                     ADCON0          equ	31	;# 
   156     0081                     OPTION_REG      equ	129	;# 
   157     0085                     TRISA           equ	133	;# 
   158     0086                     TRISB           equ	134	;# 
   159     0087                     TRISC           equ	135	;# 
   160     0088                     TRISD           equ	136	;# 
   161     0089                     TRISE           equ	137	;# 
   162     008C                     PIE1            equ	140	;# 
   163     008D                     PIE2            equ	141	;# 
   164     008E                     PCON            equ	142	;# 
   165     0091                     SSPCON2         equ	145	;# 
   166     0092                     PR2             equ	146	;# 
   167     0093                     SSPADD          equ	147	;# 
   168     0094                     SSPSTAT         equ	148	;# 
   169     0098                     TXSTA           equ	152	;# 
   170     0099                     SPBRG           equ	153	;# 
   171     009E                     ADRESL          equ	158	;# 
   172     009F                     ADCON1          equ	159	;# 
   173     010C                     EEDATA          equ	268	;# 
   174     010D                     EEADR           equ	269	;# 
   175     010E                     EEDATH          equ	270	;# 
   176     010F                     EEADRH          equ	271	;# 
   177     018C                     EECON1          equ	396	;# 
   178     018D                     EECON2          equ	397	;# 
   179                           
   180                           	psect	strings
   181     0003                     __pstrings:
   182     0003                     stringtab:
   183     0003                     __stringtab:
   184     0003                     stringcode:	
   185                           ;	String table - string pointers are 1 byte each
   186                           
   187     0003                     stringdir:
   188     0003  3000               	movlw	high stringdir
   189     0004  008A               	movwf	10
   190     0005  0804               	movf	4,w
   191     0006  0A84               	incf	4,f
   192     0007  0782               	addwf	2,f
   193     0008                     __stringbase:
   194     0008  3400               	retlw	0
   195     0009                     __end_of__stringtab:
   196     0009                     _keypad_map:
   197     0009  3430               	retlw	48
   198     000A  3431               	retlw	49
   199     000B  3432               	retlw	50
   200     000C  3433               	retlw	51
   201     000D  3434               	retlw	52
   202     000E  3435               	retlw	53
   203     000F  3436               	retlw	54
   204     0010  3437               	retlw	55
   205     0011  3438               	retlw	56
   206     0012  3439               	retlw	57
   207     0013  3441               	retlw	65
   208     0014  3442               	retlw	66
   209     0015  3443               	retlw	67
   210     0016  3444               	retlw	68
   211     0017  3445               	retlw	69
   212     0018  3446               	retlw	70
   213     0019                     __end_of_keypad_map:
   214     000B                     _INTCONbits     set	11
   215     0006                     _PORTBbits      set	6
   216     0007                     _PORTC          set	7
   217     0008                     _PORTD          set	8
   218     0049                     _RE1            set	73
   219     0048                     _RE0            set	72
   220     0081                     _OPTION_REGbits set	129
   221     0087                     _TRISC          set	135
   222     0447                     _TRISD7         set	1095
   223     0446                     _TRISD6         set	1094
   224     0445                     _TRISD5         set	1093
   225     0444                     _TRISD4         set	1092
   226     0449                     _TRISE1         set	1097
   227     0448                     _TRISE0         set	1096
   228     010C                     _EEDATA         set	268
   229     010D                     _EEADR          set	269
   230     018D                     _EECON2         set	397
   231     018C                     _EECON1bits     set	396
   232     0019                     STR_2:
   233     0019  3454               	retlw	84	;'T'
   234     001A  3465               	retlw	101	;'e'
   235     001B  3463               	retlw	99	;'c'
   236     001C  346C               	retlw	108	;'l'
   237     001D  3461               	retlw	97	;'a'
   238     001E  3420               	retlw	32	;' '
   239     001F  3444               	retlw	68	;'D'
   240     0020  3469               	retlw	105	;'i'
   241     0021  3467               	retlw	103	;'g'
   242     0022  342E               	retlw	46	;'.'
   243     0023  3400               	retlw	0
   244     0024                     STR_1:
   245     0024  3444               	retlw	68	;'D'
   246     0025  3469               	retlw	105	;'i'
   247     0026  3467               	retlw	103	;'g'
   248     0027  342E               	retlw	46	;'.'
   249     0028  3420               	retlw	32	;' '
   250     0029  3454               	retlw	84	;'T'
   251     002A  3465               	retlw	101	;'e'
   252     002B  3463               	retlw	99	;'c'
   253     002C  346C               	retlw	108	;'l'
   254     002D  3461               	retlw	97	;'a'
   255     002E  3400               	retlw	0
   256                           
   257                           	psect	cinit
   258     07FC                     start_initialization:	
   259                           ; #config settings
   260                           
   261     07FC                     __initialization:
   262     07FC                     end_of_initialization:	
   263                           ;End of C runtime variable initialization code
   264                           
   265     07FC                     __end_of__initialization:
   266     07FC  0183               	clrf	3
   267     07FD  120A  118A  2F6B   	ljmp	_main	;jump to C main() function
   268                           
   269                           	psect	cstackCOMMON
   270     0070                     __pcstackCOMMON:
   271     0070                     ?_LCD_Init:
   272     0070                     ?_Keypad_Init:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     0070                     ?_Keypad_GetChar:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     0070                     ?_LCD_Char:	
   279                           ; 1 bytes @ 0x0
   280                           
   281     0070                     ?_EEPROM_Write:	
   282                           ; 1 bytes @ 0x0
   283                           
   284     0070                     ?_LCD_Clear:	
   285                           ; 1 bytes @ 0x0
   286                           
   287     0070                     ?_EEPROM_Read:	
   288                           ; 1 bytes @ 0x0
   289                           
   290     0070                     ?_LCD_Cmd:	
   291                           ; 1 bytes @ 0x0
   292                           
   293     0070                     ?_main:	
   294                           ; 1 bytes @ 0x0
   295                           
   296     0070                     EEPROM_Write@data:	
   297                           ; 1 bytes @ 0x0
   298                           
   299     0070                     EEPROM_Read@address:	
   300                           ; 1 bytes @ 0x0
   301                           
   302     0070                     ??_Keypad_Init:	
   303                           ; 1 bytes @ 0x0
   304                           
   305     0070                     ??_Keypad_GetChar:	
   306                           ; 1 bytes @ 0x0
   307                           
   308     0070                     ??_LCD_Char:	
   309                           ; 1 bytes @ 0x0
   310                           
   311     0070                     ??_EEPROM_Read:	
   312                           ; 1 bytes @ 0x0
   313                           
   314     0070                     ??_LCD_Cmd:	
   315                           ; 1 bytes @ 0x0
   316                           
   317                           
   318                           ; 1 bytes @ 0x0
   319     0070                     	ds	1
   320     0071                     Keypad_GetChar@row:
   321     0071                     EEPROM_Write@address:	
   322                           ; 1 bytes @ 0x1
   323                           
   324     0071                     ??_EEPROM_Write:	
   325                           ; 1 bytes @ 0x1
   326                           
   327                           
   328                           ; 1 bytes @ 0x1
   329     0071                     	ds	1
   330     0072                     LCD_Cmd@cmd:
   331     0072                     LCD_Char@data:	
   332                           ; 1 bytes @ 0x2
   333                           
   334                           
   335                           ; 1 bytes @ 0x2
   336     0072                     	ds	1
   337     0073                     ?_LCD_SetCursor:
   338     0073                     ?_LCD_String:	
   339                           ; 1 bytes @ 0x3
   340                           
   341     0073                     LCD_String@str:	
   342                           ; 1 bytes @ 0x3
   343                           
   344     0073                     LCD_SetCursor@col:	
   345                           ; 1 bytes @ 0x3
   346                           
   347     0073                     ??_LCD_Init:	
   348                           ; 1 bytes @ 0x3
   349                           
   350     0073                     ??_LCD_Clear:	
   351                           ; 1 bytes @ 0x3
   352                           
   353                           
   354                           ; 1 bytes @ 0x3
   355     0073                     	ds	1
   356     0074                     LCD_SetCursor@row:
   357     0074                     ??_LCD_SetCursor:	
   358                           ; 1 bytes @ 0x4
   359                           
   360     0074                     ??_LCD_String:	
   361                           ; 1 bytes @ 0x4
   362                           
   363                           
   364                           ; 1 bytes @ 0x4
   365     0074                     	ds	1
   366     0075                     _LCD_SetCursor$212:
   367                           
   368                           ; 2 bytes @ 0x5
   369     0075                     	ds	2
   370     0077                     LCD_SetCursor@address:
   371                           
   372                           ; 1 bytes @ 0x7
   373     0077                     	ds	1
   374     0078                     ??_main:
   375                           
   376                           ; 1 bytes @ 0x8
   377     0078                     	ds	2
   378     007A                     main@eeprom_value:
   379                           
   380                           ; 1 bytes @ 0xA
   381     007A                     	ds	1
   382     007B                     main@previous_key:
   383                           
   384                           ; 1 bytes @ 0xB
   385     007B                     	ds	1
   386     007C                     main@key_pressed:
   387                           
   388                           ; 1 bytes @ 0xC
   389     007C                     	ds	1
   390                           
   391                           	psect	maintext
   392     076B                     __pmaintext:	
   393 ;;
   394 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   395 ;;
   396 ;; *************** function _main *****************
   397 ;; Defined at:
   398 ;;		line 80 in file "atividade10.c"
   399 ;; Parameters:    Size  Location     Type
   400 ;;		None
   401 ;; Auto vars:     Size  Location     Type
   402 ;;  key_pressed     1   12[COMMON] unsigned char 
   403 ;;  previous_key    1   11[COMMON] unsigned char 
   404 ;;  eeprom_value    1   10[COMMON] unsigned char 
   405 ;; Return value:  Size  Location     Type
   406 ;;                  1    wreg      void 
   407 ;; Registers used:
   408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   409 ;; Tracked objects:
   410 ;;		On entry : B00/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   414 ;;      Params:         0       0       0       0       0
   415 ;;      Locals:         3       0       0       0       0
   416 ;;      Temps:          2       0       0       0       0
   417 ;;      Totals:         5       0       0       0       0
   418 ;;Total ram usage:        5 bytes
   419 ;; Hardware stack levels required when called: 2
   420 ;; This function calls:
   421 ;;		_EEPROM_Read
   422 ;;		_EEPROM_Write
   423 ;;		_Keypad_GetChar
   424 ;;		_Keypad_Init
   425 ;;		_LCD_Char
   426 ;;		_LCD_Clear
   427 ;;		_LCD_Init
   428 ;;		_LCD_SetCursor
   429 ;;		_LCD_String
   430 ;; This function is called by:
   431 ;;		Startup code after reset
   432 ;; This function uses a non-reentrant model
   433 ;;
   434                           
   435     076B                     _main:	
   436                           ;psect for function _main
   437                           
   438     076B                     l992:	
   439                           ;incstack = 0
   440                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   441                           
   442                           
   443                           ;atividade10.c: 82:     char key_pressed;;atividade10.c: 83:     char previous_key = 0;
   444     076B  01FB               	clrf	main@previous_key
   445     076C                     l994:
   446                           
   447                           ;atividade10.c: 84:     char eeprom_value;;atividade10.c: 86:     LCD_Init();
   448     076C  120A  118A  2681  120A  118A  	fcall	_LCD_Init
   449     0771                     l996:
   450                           
   451                           ;atividade10.c: 87:     Keypad_Init();
   452     0771  120A  118A  25A0  120A  118A  	fcall	_Keypad_Init
   453     0776                     l998:
   454                           
   455                           ;atividade10.c: 90:     {;atividade10.c: 91:         LCD_SetCursor(1, 1);
   456     0776  01F3               	clrf	LCD_SetCursor@col
   457     0777  0AF3               	incf	LCD_SetCursor@col,f
   458     0778  3001               	movlw	1
   459     0779  120A  118A  25F7  120A  118A  	fcall	_LCD_SetCursor
   460     077E                     l1000:
   461                           
   462                           ;atividade10.c: 92:         LCD_String("Dig. Tecla");
   463     077E  301C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   464     077F  00F3               	movwf	LCD_String@str
   465     0780  120A  118A  25DB  120A  118A  	fcall	_LCD_String
   466     0785                     l1002:
   467                           
   468                           ;atividade10.c: 94:         key_pressed = Keypad_GetChar();
   469     0785  120A  118A  26E3  120A  118A  	fcall	_Keypad_GetChar
   470     078A  00FC               	movwf	main@key_pressed
   471     078B                     l1004:
   472                           
   473                           ;atividade10.c: 95:         LCD_SetCursor(2, 1);
   474     078B  01F3               	clrf	LCD_SetCursor@col
   475     078C  0AF3               	incf	LCD_SetCursor@col,f
   476     078D  3002               	movlw	2
   477     078E  120A  118A  25F7  120A  118A  	fcall	_LCD_SetCursor
   478     0793                     l1006:
   479                           
   480                           ;atividade10.c: 96:         LCD_Char(key_pressed);
   481     0793  087C               	movf	main@key_pressed,w
   482     0794  120A  118A  264B  120A  118A  	fcall	_LCD_Char
   483     0799                     l1008:
   484                           
   485                           ;atividade10.c: 98:         if (key_pressed == 'F')
   486     0799  3046               	movlw	70
   487     079A  067C               	xorwf	main@key_pressed,w
   488     079B  1D03               	btfss	3,2
   489     079C  2F9E               	goto	u401
   490     079D  2F9F               	goto	u400
   491     079E                     u401:
   492     079E  2FBB               	goto	l1018
   493     079F                     u400:
   494     079F                     l1010:
   495                           
   496                           ;atividade10.c: 99:         {;atividade10.c: 100:             if (previous_key != 0)
   497     079F  087B               	movf	main@previous_key,w
   498     07A0  1903               	btfsc	3,2
   499     07A1  2FA3               	goto	u411
   500     07A2  2FA4               	goto	u410
   501     07A3                     u411:
   502     07A3  2FB5               	goto	l1016
   503     07A4                     u410:
   504     07A4                     l1012:
   505                           
   506                           ;atividade10.c: 101:             {;atividade10.c: 102:                 EEPROM_Write(0x00
      +                          , (uint8_t)previous_key);
   507     07A4  087B               	movf	main@previous_key,w
   508     07A5  00F0               	movwf	EEPROM_Write@data
   509     07A6  3000               	movlw	0
   510     07A7  120A  118A  25C4  120A  118A  	fcall	_EEPROM_Write
   511     07AC                     l1014:
   512                           
   513                           ;atividade10.c: 103:                 _delay((unsigned long)((10)*(20000000UL/4000.0)));
   514     07AC  3041               	movlw	65
   515     07AD  00F9               	movwf	??_main+1
   516     07AE  30EE               	movlw	238
   517     07AF  00F8               	movwf	??_main
   518     07B0                     u447:
   519     07B0  0BF8               	decfsz	??_main,f
   520     07B1  2FB0               	goto	u447
   521     07B2  0BF9               	decfsz	??_main+1,f
   522     07B3  2FB0               	goto	u447
   523     07B4  0000               	nop
   524     07B5                     l1016:
   525                           
   526                           ;atividade10.c: 105:             LCD_Clear();
   527     07B5  120A  118A  25B4  120A  118A  	fcall	_LCD_Clear
   528                           
   529                           ;atividade10.c: 106:             continue;
   530     07BA  2F76               	goto	l998
   531     07BB                     l1018:
   532                           
   533                           ;atividade10.c: 109:         if (key_pressed == 'E')
   534     07BB  3045               	movlw	69
   535     07BC  067C               	xorwf	main@key_pressed,w
   536     07BD  1D03               	btfss	3,2
   537     07BE  2FC0               	goto	u421
   538     07BF  2FC1               	goto	u420
   539     07C0                     u421:
   540     07C0  2FF6               	goto	l1038
   541     07C1                     u420:
   542     07C1                     l1020:
   543                           
   544                           ;atividade10.c: 110:         {;atividade10.c: 111:             eeprom_value = EEPROM_Rea
      +                          d(0x00);
   545     07C1  3000               	movlw	0
   546     07C2  120A  118A  25A6  120A  118A  	fcall	_EEPROM_Read
   547     07C7  00FA               	movwf	main@eeprom_value
   548     07C8                     l1022:
   549                           
   550                           ;atividade10.c: 112:             LCD_Clear();
   551     07C8  120A  118A  25B4  120A  118A  	fcall	_LCD_Clear
   552     07CD                     l1024:
   553                           
   554                           ;atividade10.c: 113:             LCD_SetCursor(1, 1);
   555     07CD  01F3               	clrf	LCD_SetCursor@col
   556     07CE  0AF3               	incf	LCD_SetCursor@col,f
   557     07CF  3001               	movlw	1
   558     07D0  120A  118A  25F7  120A  118A  	fcall	_LCD_SetCursor
   559     07D5                     l1026:
   560                           
   561                           ;atividade10.c: 114:             LCD_String("Tecla Dig.");
   562     07D5  3011               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   563     07D6  00F3               	movwf	LCD_String@str
   564     07D7  120A  118A  25DB  120A  118A  	fcall	_LCD_String
   565     07DC                     l1028:
   566                           
   567                           ;atividade10.c: 115:             LCD_SetCursor(2, 1);
   568     07DC  01F3               	clrf	LCD_SetCursor@col
   569     07DD  0AF3               	incf	LCD_SetCursor@col,f
   570     07DE  3002               	movlw	2
   571     07DF  120A  118A  25F7  120A  118A  	fcall	_LCD_SetCursor
   572     07E4                     l1030:
   573                           
   574                           ;atividade10.c: 116:             LCD_Char(eeprom_value);
   575     07E4  087A               	movf	main@eeprom_value,w
   576     07E5  120A  118A  264B  120A  118A  	fcall	_LCD_Char
   577     07EA                     l1032:
   578                           
   579                           ;atividade10.c: 117:             (void)Keypad_GetChar();
   580     07EA  120A  118A  26E3  120A  118A  	fcall	_Keypad_GetChar
   581     07EF                     l1034:
   582                           
   583                           ;atividade10.c: 121:             if(key_pressed != 'E')
   584     07EF  3045               	movlw	69
   585     07F0  067C               	xorwf	main@key_pressed,w
   586     07F1  1903               	btfsc	3,2
   587     07F2  2FF4               	goto	u431
   588     07F3  2FF5               	goto	u430
   589     07F4                     u431:
   590     07F4  2FF6               	goto	l1038
   591     07F5                     u430:
   592     07F5  2FB5               	goto	l1016
   593     07F6                     l1038:
   594                           
   595                           ;atividade10.c: 129:         previous_key = key_pressed;
   596     07F6  087C               	movf	main@key_pressed,w
   597     07F7  00FB               	movwf	main@previous_key
   598     07F8  2F76               	goto	l998
   599     07F9  120A  118A  2800   	ljmp	start
   600     07FC                     __end_of_main:
   601                           
   602                           	psect	text1
   603     05DB                     __ptext1:	
   604 ;; *************** function _LCD_String *****************
   605 ;; Defined at:
   606 ;;		line 179 in file "atividade10.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;  str             1    3[COMMON] PTR const unsigned char 
   609 ;;		 -> STR_2(11), STR_1(11), 
   610 ;; Auto vars:     Size  Location     Type
   611 ;;		None
   612 ;; Return value:  Size  Location     Type
   613 ;;                  1    wreg      void 
   614 ;; Registers used:
   615 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   621 ;;      Params:         1       0       0       0       0
   622 ;;      Locals:         0       0       0       0       0
   623 ;;      Temps:          0       0       0       0       0
   624 ;;      Totals:         1       0       0       0       0
   625 ;;Total ram usage:        1 bytes
   626 ;; Hardware stack levels used: 1
   627 ;; Hardware stack levels required when called: 1
   628 ;; This function calls:
   629 ;;		_LCD_Char
   630 ;; This function is called by:
   631 ;;		_main
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635     05DB                     _LCD_String:	
   636                           ;psect for function _LCD_String
   637                           
   638     05DB                     l920:	
   639                           ;incstack = 0
   640                           ; Regs used in _LCD_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   641                           
   642                           
   643                           ;atividade10.c: 179: void LCD_String(const char *str);atividade10.c: 180: {;atividade10.
      +                          c: 181:     while(*str) LCD_Char(*str++);
   644     05DB  2DEA               	goto	l926
   645     05DC                     l922:
   646     05DC  0873               	movf	LCD_String@str,w
   647     05DD  0084               	movwf	4
   648     05DE  120A  118A  2003  120A  118A  	fcall	stringdir
   649     05E3  120A  118A  264B  120A  118A  	fcall	_LCD_Char
   650     05E8                     l924:
   651     05E8  3001               	movlw	1
   652     05E9  07F3               	addwf	LCD_String@str,f
   653     05EA                     l926:
   654     05EA  0873               	movf	LCD_String@str,w
   655     05EB  0084               	movwf	4
   656     05EC  120A  118A  2003  120A  118A  	fcall	stringdir
   657     05F1  3A00               	xorlw	0
   658     05F2  1D03               	skipz
   659     05F3  2DF5               	goto	u251
   660     05F4  2DF6               	goto	u250
   661     05F5                     u251:
   662     05F5  2DDC               	goto	l922
   663     05F6                     u250:
   664     05F6                     l87:
   665     05F6  0008               	return
   666     05F7                     __end_of_LCD_String:
   667                           
   668                           	psect	text2
   669     064B                     __ptext2:	
   670 ;; *************** function _LCD_Char *****************
   671 ;; Defined at:
   672 ;;		line 167 in file "atividade10.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;  data            1    wreg     unsigned char 
   675 ;; Auto vars:     Size  Location     Type
   676 ;;  data            1    2[COMMON] unsigned char 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, status,2, status,0
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   686 ;;      Params:         0       0       0       0       0
   687 ;;      Locals:         1       0       0       0       0
   688 ;;      Temps:          2       0       0       0       0
   689 ;;      Totals:         3       0       0       0       0
   690 ;;Total ram usage:        3 bytes
   691 ;; Hardware stack levels used: 1
   692 ;; This function calls:
   693 ;;		Nothing
   694 ;; This function is called by:
   695 ;;		_main
   696 ;;		_LCD_String
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700     064B                     _LCD_Char:	
   701                           ;psect for function _LCD_Char
   702                           
   703                           
   704                           ;incstack = 0
   705                           ; Regs used in _LCD_Char: [wreg+status,2+status,0]
   706                           ;LCD_Char@data stored from wreg
   707     064B  00F2               	movwf	LCD_Char@data
   708     064C                     l676:
   709                           
   710                           ;atividade10.c: 167: void LCD_Char(char data);atividade10.c: 168: {;atividade10.c: 169: 
      +                              RE0 = 1;
   711     064C  1283               	bcf	3,5	;RP0=0, select bank0
   712     064D  1303               	bcf	3,6	;RP1=0, select bank0
   713     064E  1409               	bsf	9,0	;volatile
   714     064F                     l678:
   715                           
   716                           ;atividade10.c: 170:     PORTD = (PORTD & 0x0F) | (data & 0xF0);
   717     064F  30F0               	movlw	240
   718     0650  0572               	andwf	LCD_Char@data,w
   719     0651  00F0               	movwf	??_LCD_Char
   720     0652  0808               	movf	8,w	;volatile
   721     0653  390F               	andlw	15
   722     0654  0470               	iorwf	??_LCD_Char,w
   723     0655  0088               	movwf	8	;volatile
   724     0656                     l680:
   725                           
   726                           ;atividade10.c: 171:     RE1 = 1; _delay((unsigned long)((10)*(20000000UL/4000000.0))); 
      +                          RE1 = 0;
   727     0656  1489               	bsf	9,1	;volatile
   728     0657                     l682:
   729     0657  3010               	movlw	16
   730     0658  00F0               	movwf	??_LCD_Char
   731     0659                     u457:
   732     0659  0BF0               	decfsz	??_LCD_Char,f
   733     065A  2E59               	goto	u457
   734     065B  0000               	nop
   735     065C                     l684:
   736     065C  1283               	bcf	3,5	;RP0=0, select bank0
   737     065D  1303               	bcf	3,6	;RP1=0, select bank0
   738     065E  1089               	bcf	9,1	;volatile
   739     065F                     l686:
   740                           
   741                           ;atividade10.c: 173:     PORTD = (PORTD & 0x0F) | ((data << 4) & 0xF0);
   742     065F  0872               	movf	LCD_Char@data,w
   743     0660  00F0               	movwf	??_LCD_Char
   744     0661  3004               	movlw	4
   745     0662                     u15:
   746     0662  1003               	clrc
   747     0663  0DF0               	rlf	??_LCD_Char,f
   748     0664  3EFF               	addlw	-1
   749     0665  1D03               	skipz
   750     0666  2E62               	goto	u15
   751     0667  30F0               	movlw	240
   752     0668  0570               	andwf	??_LCD_Char,w
   753     0669  00F1               	movwf	??_LCD_Char+1
   754     066A  0808               	movf	8,w	;volatile
   755     066B  390F               	andlw	15
   756     066C  0471               	iorwf	??_LCD_Char+1,w
   757     066D  0088               	movwf	8	;volatile
   758     066E                     l688:
   759                           
   760                           ;atividade10.c: 174:     RE1 = 1; _delay((unsigned long)((10)*(20000000UL/4000000.0))); 
      +                          RE1 = 0;
   761     066E  1489               	bsf	9,1	;volatile
   762     066F  3010               	movlw	16
   763     0670  00F0               	movwf	??_LCD_Char
   764     0671                     u467:
   765     0671  0BF0               	decfsz	??_LCD_Char,f
   766     0672  2E71               	goto	u467
   767     0673  0000               	nop
   768     0674                     l690:
   769     0674  1283               	bcf	3,5	;RP0=0, select bank0
   770     0675  1303               	bcf	3,6	;RP1=0, select bank0
   771     0676  1089               	bcf	9,1	;volatile
   772                           
   773                           ;atividade10.c: 176:     _delay((unsigned long)((2)*(20000000UL/4000.0)));
   774     0677  300D               	movlw	13
   775     0678  00F1               	movwf	??_LCD_Char+1
   776     0679  30FB               	movlw	251
   777     067A  00F0               	movwf	??_LCD_Char
   778     067B                     u477:
   779     067B  0BF0               	decfsz	??_LCD_Char,f
   780     067C  2E7B               	goto	u477
   781     067D  0BF1               	decfsz	??_LCD_Char+1,f
   782     067E  2E7B               	goto	u477
   783     067F  2E80               	nop2
   784     0680                     l81:
   785     0680  0008               	return
   786     0681                     __end_of_LCD_Char:
   787                           
   788                           	psect	text3
   789     05F7                     __ptext3:	
   790 ;; *************** function _LCD_SetCursor *****************
   791 ;; Defined at:
   792 ;;		line 190 in file "atividade10.c"
   793 ;; Parameters:    Size  Location     Type
   794 ;;  row             1    wreg     unsigned char 
   795 ;;  col             1    3[COMMON] unsigned char 
   796 ;; Auto vars:     Size  Location     Type
   797 ;;  row             1    4[COMMON] unsigned char 
   798 ;;  address         1    7[COMMON] unsigned char 
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      void 
   801 ;; Registers used:
   802 ;;		wreg, status,2, status,0, pclath, cstack
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   808 ;;      Params:         1       0       0       0       0
   809 ;;      Locals:         4       0       0       0       0
   810 ;;      Temps:          0       0       0       0       0
   811 ;;      Totals:         5       0       0       0       0
   812 ;;Total ram usage:        5 bytes
   813 ;; Hardware stack levels used: 1
   814 ;; Hardware stack levels required when called: 1
   815 ;; This function calls:
   816 ;;		_LCD_Cmd
   817 ;; This function is called by:
   818 ;;		_main
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822     05F7                     _LCD_SetCursor:	
   823                           ;psect for function _LCD_SetCursor
   824                           
   825                           
   826                           ;incstack = 0
   827                           ; Regs used in _LCD_SetCursor: [wreg+status,2+status,0+pclath+cstack]
   828                           ;LCD_SetCursor@row stored from wreg
   829     05F7  00F4               	movwf	LCD_SetCursor@row
   830     05F8                     l912:
   831                           
   832                           ;atividade10.c: 190: void LCD_SetCursor(uint8_t row, uint8_t col);atividade10.c: 191: {;
      +                          atividade10.c: 192:     uint8_t address = (row == 1) ? 0x80 + (col - 1) : 0xC0 + (col - 
      +                          1);
   833     05F8  0374               	decf	LCD_SetCursor@row,w
   834     05F9  1903               	btfsc	3,2
   835     05FA  2DFC               	goto	u241
   836     05FB  2DFD               	goto	u240
   837     05FC                     u241:
   838     05FC  2E05               	goto	l916
   839     05FD                     u240:
   840     05FD                     l914:
   841     05FD  0873               	movf	LCD_SetCursor@col,w
   842     05FE  3EBF               	addlw	191
   843     05FF  00F5               	movwf	_LCD_SetCursor$212
   844     0600  3000               	movlw	0
   845     0601  1803               	skipnc
   846     0602  3001               	movlw	1
   847     0603  00F6               	movwf	_LCD_SetCursor$212+1
   848     0604  2E0C               	goto	l96
   849     0605                     l916:
   850     0605  0873               	movf	LCD_SetCursor@col,w
   851     0606  3E7F               	addlw	127
   852     0607  00F5               	movwf	_LCD_SetCursor$212
   853     0608  3000               	movlw	0
   854     0609  1803               	skipnc
   855     060A  3001               	movlw	1
   856     060B  00F6               	movwf	_LCD_SetCursor$212+1
   857     060C                     l96:
   858     060C  0875               	movf	_LCD_SetCursor$212,w
   859     060D  00F7               	movwf	LCD_SetCursor@address
   860     060E                     l918:
   861                           
   862                           ;atividade10.c: 193:     LCD_Cmd(address);
   863     060E  0877               	movf	LCD_SetCursor@address,w
   864     060F  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
   865     0614                     l97:
   866     0614  0008               	return
   867     0615                     __end_of_LCD_SetCursor:
   868                           
   869                           	psect	text4
   870     0681                     __ptext4:	
   871 ;; *************** function _LCD_Init *****************
   872 ;; Defined at:
   873 ;;		line 134 in file "atividade10.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;		None
   876 ;; Auto vars:     Size  Location     Type
   877 ;;		None
   878 ;; Return value:  Size  Location     Type
   879 ;;                  1    wreg      void 
   880 ;; Registers used:
   881 ;;		wreg, status,2, status,0, pclath, cstack
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   887 ;;      Params:         0       0       0       0       0
   888 ;;      Locals:         0       0       0       0       0
   889 ;;      Temps:          2       0       0       0       0
   890 ;;      Totals:         2       0       0       0       0
   891 ;;Total ram usage:        2 bytes
   892 ;; Hardware stack levels used: 1
   893 ;; Hardware stack levels required when called: 1
   894 ;; This function calls:
   895 ;;		_LCD_Cmd
   896 ;; This function is called by:
   897 ;;		_main
   898 ;; This function uses a non-reentrant model
   899 ;;
   900                           
   901     0681                     _LCD_Init:	
   902                           ;psect for function _LCD_Init
   903                           
   904     0681                     l888:	
   905                           ;incstack = 0
   906                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
   907                           
   908                           
   909                           ;atividade10.c: 136:     TRISE0 = TRISE1 = TRISD4 = TRISD5 = TRISD6 = TRISD7 = 0;
   910     0681  1683               	bsf	3,5	;RP0=1, select bank1
   911     0682  1303               	bcf	3,6	;RP1=0, select bank1
   912     0683  1388               	bcf	8,7	;volatile
   913     0684  1308               	bcf	8,6	;volatile
   914     0685  1288               	bcf	8,5	;volatile
   915     0686  1208               	bcf	8,4	;volatile
   916     0687  1089               	bcf	9,1	;volatile
   917     0688  1009               	bcf	9,0	;volatile
   918     0689                     l890:
   919                           
   920                           ;atividade10.c: 138:     _delay((unsigned long)((20)*(20000000UL/4000.0)));
   921     0689  3082               	movlw	130
   922     068A  00F4               	movwf	??_LCD_Init+1
   923     068B  30DD               	movlw	221
   924     068C  00F3               	movwf	??_LCD_Init
   925     068D                     u487:
   926     068D  0BF3               	decfsz	??_LCD_Init,f
   927     068E  2E8D               	goto	u487
   928     068F  0BF4               	decfsz	??_LCD_Init+1,f
   929     0690  2E8D               	goto	u487
   930     0691  2E92               	nop2
   931     0692                     l892:
   932                           
   933                           ;atividade10.c: 140:     LCD_Cmd(0x03);
   934     0692  3003               	movlw	3
   935     0693  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
   936     0698                     l894:
   937                           
   938                           ;atividade10.c: 141:     _delay((unsigned long)((5)*(20000000UL/4000.0)));
   939     0698  3021               	movlw	33
   940     0699  00F4               	movwf	??_LCD_Init+1
   941     069A  3076               	movlw	118
   942     069B  00F3               	movwf	??_LCD_Init
   943     069C                     u497:
   944     069C  0BF3               	decfsz	??_LCD_Init,f
   945     069D  2E9C               	goto	u497
   946     069E  0BF4               	decfsz	??_LCD_Init+1,f
   947     069F  2E9C               	goto	u497
   948     06A0  0000               	nop
   949                           
   950                           ;atividade10.c: 142:     LCD_Cmd(0x03);
   951     06A1  3003               	movlw	3
   952     06A2  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
   953     06A7                     l896:
   954                           
   955                           ;atividade10.c: 143:     _delay((unsigned long)((200)*(20000000UL/4000000.0)));
   956     06A7  30C7               	movlw	199
   957     06A8  00F3               	movwf	??_LCD_Init
   958     06A9                     u507:
   959     06A9  2EAA               	nop2
   960     06AA  0BF3               	decfsz	??_LCD_Init,f
   961     06AB  2EA9               	goto	u507
   962     06AC  2EAD               	nop2
   963     06AD  2EAE               	nop2
   964     06AE                     l898:
   965                           
   966                           ;atividade10.c: 144:     LCD_Cmd(0x03);
   967     06AE  3003               	movlw	3
   968     06AF  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
   969                           
   970                           ;atividade10.c: 145:     _delay((unsigned long)((200)*(20000000UL/4000000.0)));
   971     06B4  30C7               	movlw	199
   972     06B5  00F3               	movwf	??_LCD_Init
   973     06B6                     u517:
   974     06B6  2EB7               	nop2
   975     06B7  0BF3               	decfsz	??_LCD_Init,f
   976     06B8  2EB6               	goto	u517
   977     06B9  2EBA               	nop2
   978     06BA  2EBB               	nop2
   979     06BB                     l900:
   980                           
   981                           ;atividade10.c: 147:     LCD_Cmd(0x02);
   982     06BB  3002               	movlw	2
   983     06BC  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
   984     06C1                     l902:
   985                           
   986                           ;atividade10.c: 148:     LCD_Cmd(0x28);
   987     06C1  3028               	movlw	40
   988     06C2  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
   989     06C7                     l904:
   990                           
   991                           ;atividade10.c: 149:     LCD_Cmd(0x0C);
   992     06C7  300C               	movlw	12
   993     06C8  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
   994     06CD                     l906:
   995                           
   996                           ;atividade10.c: 150:     LCD_Cmd(0x06);
   997     06CD  3006               	movlw	6
   998     06CE  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
   999     06D3                     l908:
  1000                           
  1001                           ;atividade10.c: 151:     LCD_Cmd(0x01);
  1002     06D3  3001               	movlw	1
  1003     06D4  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
  1004     06D9                     l910:
  1005                           
  1006                           ;atividade10.c: 152:     _delay((unsigned long)((2)*(20000000UL/4000.0)));
  1007     06D9  300D               	movlw	13
  1008     06DA  00F4               	movwf	??_LCD_Init+1
  1009     06DB  30FB               	movlw	251
  1010     06DC  00F3               	movwf	??_LCD_Init
  1011     06DD                     u527:
  1012     06DD  0BF3               	decfsz	??_LCD_Init,f
  1013     06DE  2EDD               	goto	u527
  1014     06DF  0BF4               	decfsz	??_LCD_Init+1,f
  1015     06E0  2EDD               	goto	u527
  1016     06E1  2EE2               	nop2
  1017     06E2                     l75:
  1018     06E2  0008               	return
  1019     06E3                     __end_of_LCD_Init:
  1020                           
  1021                           	psect	text5
  1022     05B4                     __ptext5:	
  1023 ;; *************** function _LCD_Clear *****************
  1024 ;; Defined at:
  1025 ;;		line 184 in file "atividade10.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;		None
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;		None
  1030 ;; Return value:  Size  Location     Type
  1031 ;;                  1    wreg      void 
  1032 ;; Registers used:
  1033 ;;		wreg, status,2, status,0, pclath, cstack
  1034 ;; Tracked objects:
  1035 ;;		On entry : 0/0
  1036 ;;		On exit  : 0/0
  1037 ;;		Unchanged: 0/0
  1038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1039 ;;      Params:         0       0       0       0       0
  1040 ;;      Locals:         0       0       0       0       0
  1041 ;;      Temps:          2       0       0       0       0
  1042 ;;      Totals:         2       0       0       0       0
  1043 ;;Total ram usage:        2 bytes
  1044 ;; Hardware stack levels used: 1
  1045 ;; Hardware stack levels required when called: 1
  1046 ;; This function calls:
  1047 ;;		_LCD_Cmd
  1048 ;; This function is called by:
  1049 ;;		_main
  1050 ;; This function uses a non-reentrant model
  1051 ;;
  1052                           
  1053     05B4                     _LCD_Clear:	
  1054                           ;psect for function _LCD_Clear
  1055                           
  1056     05B4                     l988:	
  1057                           ;incstack = 0
  1058                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  1059                           
  1060                           
  1061                           ;atividade10.c: 186:     LCD_Cmd(0x01);
  1062     05B4  3001               	movlw	1
  1063     05B5  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
  1064     05BA                     l990:
  1065                           
  1066                           ;atividade10.c: 187:     _delay((unsigned long)((2)*(20000000UL/4000.0)));
  1067     05BA  300D               	movlw	13
  1068     05BB  00F4               	movwf	??_LCD_Clear+1
  1069     05BC  30FB               	movlw	251
  1070     05BD  00F3               	movwf	??_LCD_Clear
  1071     05BE                     u537:
  1072     05BE  0BF3               	decfsz	??_LCD_Clear,f
  1073     05BF  2DBE               	goto	u537
  1074     05C0  0BF4               	decfsz	??_LCD_Clear+1,f
  1075     05C1  2DBE               	goto	u537
  1076     05C2  2DC3               	nop2
  1077     05C3                     l90:
  1078     05C3  0008               	return
  1079     05C4                     __end_of_LCD_Clear:
  1080                           
  1081                           	psect	text6
  1082     0615                     __ptext6:	
  1083 ;; *************** function _LCD_Cmd *****************
  1084 ;; Defined at:
  1085 ;;		line 155 in file "atividade10.c"
  1086 ;; Parameters:    Size  Location     Type
  1087 ;;  cmd             1    wreg     unsigned char 
  1088 ;; Auto vars:     Size  Location     Type
  1089 ;;  cmd             1    2[COMMON] unsigned char 
  1090 ;; Return value:  Size  Location     Type
  1091 ;;                  1    wreg      void 
  1092 ;; Registers used:
  1093 ;;		wreg, status,2, status,0
  1094 ;; Tracked objects:
  1095 ;;		On entry : 0/0
  1096 ;;		On exit  : 0/0
  1097 ;;		Unchanged: 0/0
  1098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1099 ;;      Params:         0       0       0       0       0
  1100 ;;      Locals:         1       0       0       0       0
  1101 ;;      Temps:          2       0       0       0       0
  1102 ;;      Totals:         3       0       0       0       0
  1103 ;;Total ram usage:        3 bytes
  1104 ;; Hardware stack levels used: 1
  1105 ;; This function calls:
  1106 ;;		Nothing
  1107 ;; This function is called by:
  1108 ;;		_LCD_Init
  1109 ;;		_LCD_Clear
  1110 ;;		_LCD_SetCursor
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114     0615                     _LCD_Cmd:	
  1115                           ;psect for function _LCD_Cmd
  1116                           
  1117                           
  1118                           ;incstack = 0
  1119                           ; Regs used in _LCD_Cmd: [wreg+status,2+status,0]
  1120                           ;LCD_Cmd@cmd stored from wreg
  1121     0615  00F2               	movwf	LCD_Cmd@cmd
  1122     0616                     l872:
  1123                           
  1124                           ;atividade10.c: 155: void LCD_Cmd(unsigned char cmd);atividade10.c: 156: {;atividade10.c
      +                          : 157:     RE0 = 0;
  1125     0616  1283               	bcf	3,5	;RP0=0, select bank0
  1126     0617  1303               	bcf	3,6	;RP1=0, select bank0
  1127     0618  1009               	bcf	9,0	;volatile
  1128     0619                     l874:
  1129                           
  1130                           ;atividade10.c: 158:     PORTD = (PORTD & 0x0F) | (cmd & 0xF0);
  1131     0619  30F0               	movlw	240
  1132     061A  0572               	andwf	LCD_Cmd@cmd,w
  1133     061B  00F0               	movwf	??_LCD_Cmd
  1134     061C  0808               	movf	8,w	;volatile
  1135     061D  390F               	andlw	15
  1136     061E  0470               	iorwf	??_LCD_Cmd,w
  1137     061F  0088               	movwf	8	;volatile
  1138     0620                     l876:
  1139                           
  1140                           ;atividade10.c: 159:     RE1 = 1; _delay((unsigned long)((10)*(20000000UL/4000000.0))); 
      +                          RE1 = 0;
  1141     0620  1489               	bsf	9,1	;volatile
  1142     0621                     l878:
  1143     0621  3010               	movlw	16
  1144     0622  00F0               	movwf	??_LCD_Cmd
  1145     0623                     u547:
  1146     0623  0BF0               	decfsz	??_LCD_Cmd,f
  1147     0624  2E23               	goto	u547
  1148     0625  0000               	nop
  1149     0626                     l880:
  1150     0626  1283               	bcf	3,5	;RP0=0, select bank0
  1151     0627  1303               	bcf	3,6	;RP1=0, select bank0
  1152     0628  1089               	bcf	9,1	;volatile
  1153     0629                     l882:
  1154                           
  1155                           ;atividade10.c: 161:     PORTD = (PORTD & 0x0F) | ((cmd << 4) & 0xF0);
  1156     0629  0872               	movf	LCD_Cmd@cmd,w
  1157     062A  00F0               	movwf	??_LCD_Cmd
  1158     062B  3004               	movlw	4
  1159     062C                     u235:
  1160     062C  1003               	clrc
  1161     062D  0DF0               	rlf	??_LCD_Cmd,f
  1162     062E  3EFF               	addlw	-1
  1163     062F  1D03               	skipz
  1164     0630  2E2C               	goto	u235
  1165     0631  30F0               	movlw	240
  1166     0632  0570               	andwf	??_LCD_Cmd,w
  1167     0633  00F1               	movwf	??_LCD_Cmd+1
  1168     0634  0808               	movf	8,w	;volatile
  1169     0635  390F               	andlw	15
  1170     0636  0471               	iorwf	??_LCD_Cmd+1,w
  1171     0637  0088               	movwf	8	;volatile
  1172     0638                     l884:
  1173                           
  1174                           ;atividade10.c: 162:     RE1 = 1; _delay((unsigned long)((10)*(20000000UL/4000000.0))); 
      +                          RE1 = 0;
  1175     0638  1489               	bsf	9,1	;volatile
  1176     0639  3010               	movlw	16
  1177     063A  00F0               	movwf	??_LCD_Cmd
  1178     063B                     u557:
  1179     063B  0BF0               	decfsz	??_LCD_Cmd,f
  1180     063C  2E3B               	goto	u557
  1181     063D  0000               	nop
  1182     063E                     l886:
  1183     063E  1283               	bcf	3,5	;RP0=0, select bank0
  1184     063F  1303               	bcf	3,6	;RP1=0, select bank0
  1185     0640  1089               	bcf	9,1	;volatile
  1186                           
  1187                           ;atividade10.c: 164:     _delay((unsigned long)((2)*(20000000UL/4000.0)));
  1188     0641  300D               	movlw	13
  1189     0642  00F1               	movwf	??_LCD_Cmd+1
  1190     0643  30FB               	movlw	251
  1191     0644  00F0               	movwf	??_LCD_Cmd
  1192     0645                     u567:
  1193     0645  0BF0               	decfsz	??_LCD_Cmd,f
  1194     0646  2E45               	goto	u567
  1195     0647  0BF1               	decfsz	??_LCD_Cmd+1,f
  1196     0648  2E45               	goto	u567
  1197     0649  2E4A               	nop2
  1198     064A                     l78:
  1199     064A  0008               	return
  1200     064B                     __end_of_LCD_Cmd:
  1201                           
  1202                           	psect	text7
  1203     05A0                     __ptext7:	
  1204 ;; *************** function _Keypad_Init *****************
  1205 ;; Defined at:
  1206 ;;		line 205 in file "atividade10.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;		None
  1209 ;; Auto vars:     Size  Location     Type
  1210 ;;		None
  1211 ;; Return value:  Size  Location     Type
  1212 ;;                  1    wreg      void 
  1213 ;; Registers used:
  1214 ;;		None
  1215 ;; Tracked objects:
  1216 ;;		On entry : 0/0
  1217 ;;		On exit  : 0/0
  1218 ;;		Unchanged: 0/0
  1219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1220 ;;      Params:         0       0       0       0       0
  1221 ;;      Locals:         0       0       0       0       0
  1222 ;;      Temps:          0       0       0       0       0
  1223 ;;      Totals:         0       0       0       0       0
  1224 ;;Total ram usage:        0 bytes
  1225 ;; Hardware stack levels used: 1
  1226 ;; This function calls:
  1227 ;;		Nothing
  1228 ;; This function is called by:
  1229 ;;		_main
  1230 ;; This function uses a non-reentrant model
  1231 ;;
  1232                           
  1233     05A0                     _Keypad_Init:	
  1234                           ;psect for function _Keypad_Init
  1235                           
  1236     05A0                     l732:	
  1237                           ;incstack = 0
  1238                           ; Regs used in _Keypad_Init: []
  1239                           
  1240                           
  1241                           ;atividade10.c: 207:     TRISC = 0xF0;
  1242     05A0  30F0               	movlw	240
  1243     05A1  1683               	bsf	3,5	;RP0=1, select bank1
  1244     05A2  1303               	bcf	3,6	;RP1=0, select bank1
  1245     05A3  0087               	movwf	7	;volatile
  1246                           
  1247                           ;atividade10.c: 208:     OPTION_REGbits.nRBPU = 0;
  1248     05A4  1381               	bcf	1,7	;volatile
  1249     05A5                     l102:
  1250     05A5  0008               	return
  1251     05A6                     __end_of_Keypad_Init:
  1252                           
  1253                           	psect	text8
  1254     06E3                     __ptext8:	
  1255 ;; *************** function _Keypad_GetChar *****************
  1256 ;; Defined at:
  1257 ;;		line 211 in file "atividade10.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;		None
  1260 ;; Auto vars:     Size  Location     Type
  1261 ;;  row             1    1[COMMON] unsigned char 
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  1    wreg      unsigned char 
  1264 ;; Registers used:
  1265 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1271 ;;      Params:         0       0       0       0       0
  1272 ;;      Locals:         1       0       0       0       0
  1273 ;;      Temps:          1       0       0       0       0
  1274 ;;      Totals:         2       0       0       0       0
  1275 ;;Total ram usage:        2 bytes
  1276 ;; Hardware stack levels used: 2
  1277 ;; This function calls:
  1278 ;;		Nothing
  1279 ;; This function is called by:
  1280 ;;		_main
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284     06E3                     _Keypad_GetChar:	
  1285                           ;psect for function _Keypad_GetChar
  1286                           
  1287     06E3                     l105:	
  1288                           ;incstack = 0
  1289                           ; Regs used in _Keypad_GetChar: [wreg-fsr0h+status,2+status,0+pclath]
  1290                           ;atividade10.c: 213:     while(1)
  1291                           
  1292     06E3                     l928:
  1293                           
  1294                           ;atividade10.c: 214:     {;atividade10.c: 215:         for(uint8_t row = 0; row < 4; row
      +                          ++)
  1295     06E3  01F1               	clrf	Keypad_GetChar@row
  1296     06E4                     l930:
  1297     06E4  3004               	movlw	4
  1298     06E5  0271               	subwf	Keypad_GetChar@row,w
  1299     06E6  1C03               	skipc
  1300     06E7  2EE9               	goto	u261
  1301     06E8  2EEA               	goto	u260
  1302     06E9                     u261:
  1303     06E9  2EEB               	goto	l934
  1304     06EA                     u260:
  1305     06EA  2EE3               	goto	l105
  1306     06EB                     l934:
  1307                           
  1308                           ;atividade10.c: 216:         {;atividade10.c: 217:             PORTC = ~(1 << row);
  1309     06EB  3001               	movlw	1
  1310     06EC  00F0               	movwf	??_Keypad_GetChar
  1311     06ED  0A71               	incf	Keypad_GetChar@row,w
  1312     06EE  2EF1               	goto	u274
  1313     06EF                     u275:
  1314     06EF  1003               	clrc
  1315     06F0  0DF0               	rlf	??_Keypad_GetChar,f
  1316     06F1                     u274:
  1317     06F1  3EFF               	addlw	-1
  1318     06F2  1D03               	skipz
  1319     06F3  2EEF               	goto	u275
  1320     06F4  0870               	movf	??_Keypad_GetChar,w
  1321     06F5  3AFF               	xorlw	255
  1322     06F6  1283               	bcf	3,5	;RP0=0, select bank0
  1323     06F7  1303               	bcf	3,6	;RP1=0, select bank0
  1324     06F8  0087               	movwf	7	;volatile
  1325     06F9                     l936:
  1326                           
  1327                           ;atividade10.c: 218:             _delay((unsigned long)((50)*(20000000UL/4000000.0)));
  1328     06F9  3053               	movlw	83
  1329     06FA  00F0               	movwf	??_Keypad_GetChar
  1330     06FB                     u577:
  1331     06FB  0BF0               	decfsz	??_Keypad_GetChar,f
  1332     06FC  2EFB               	goto	u577
  1333     06FD                     l938:
  1334                           
  1335                           ;atividade10.c: 220:             if(PORTBbits.RB0 == 0) { while(PORTBbits.RB0==0); retur
      +                          n keypad_map[row][0]; }
  1336     06FD  1283               	bcf	3,5	;RP0=0, select bank0
  1337     06FE  1303               	bcf	3,6	;RP1=0, select bank0
  1338     06FF  1806               	btfsc	6,0	;volatile
  1339     0700  2F02               	goto	u281
  1340     0701  2F03               	goto	u280
  1341     0702                     u281:
  1342     0702  2F19               	goto	l108
  1343     0703                     u280:
  1344     0703                     l109:
  1345     0703  1C06               	btfss	6,0	;volatile
  1346     0704  2F06               	goto	u291
  1347     0705  2F07               	goto	u290
  1348     0706                     u291:
  1349     0706  2F03               	goto	l109
  1350     0707                     u290:
  1351     0707                     l942:
  1352     0707  0871               	movf	Keypad_GetChar@row,w
  1353     0708  00F0               	movwf	??_Keypad_GetChar
  1354     0709  3001               	movlw	1
  1355     070A                     u305:
  1356     070A  1003               	clrc
  1357     070B  0DF0               	rlf	??_Keypad_GetChar,f
  1358     070C  3EFF               	addlw	-1
  1359     070D  1D03               	skipz
  1360     070E  2F0A               	goto	u305
  1361     070F  1003               	clrc
  1362     0710  0D70               	rlf	??_Keypad_GetChar,w
  1363     0711  3E01               	addlw	low ((_keypad_map-__stringbase)| (0+32768))
  1364     0712  0084               	movwf	4
  1365     0713  120A  118A  2003  120A  118A  	fcall	stringdir
  1366     0718  2F6A               	goto	l112
  1367     0719                     l108:
  1368                           
  1369                           ;atividade10.c: 221:             if(PORTBbits.RB1 == 0) { while(PORTBbits.RB1==0); retur
      +                          n keypad_map[row][1]; }
  1370     0719  1886               	btfsc	6,1	;volatile
  1371     071A  2F1C               	goto	u311
  1372     071B  2F1D               	goto	u310
  1373     071C                     u311:
  1374     071C  2F33               	goto	l113
  1375     071D                     u310:
  1376     071D                     l114:
  1377     071D  1C86               	btfss	6,1	;volatile
  1378     071E  2F20               	goto	u321
  1379     071F  2F21               	goto	u320
  1380     0720                     u321:
  1381     0720  2F1D               	goto	l114
  1382     0721                     u320:
  1383     0721                     l948:
  1384     0721  0871               	movf	Keypad_GetChar@row,w
  1385     0722  00F0               	movwf	??_Keypad_GetChar
  1386     0723  3001               	movlw	1
  1387     0724                     u335:
  1388     0724  1003               	clrc
  1389     0725  0DF0               	rlf	??_Keypad_GetChar,f
  1390     0726  3EFF               	addlw	-1
  1391     0727  1D03               	skipz
  1392     0728  2F24               	goto	u335
  1393     0729  1003               	clrc
  1394     072A  0D70               	rlf	??_Keypad_GetChar,w
  1395     072B  3E02               	addlw	low (((_keypad_map-__stringbase)| (0+32768)+1))
  1396     072C  0084               	movwf	4
  1397     072D  120A  118A  2003  120A  118A  	fcall	stringdir
  1398     0732  2F6A               	goto	l112
  1399     0733                     l113:
  1400                           
  1401                           ;atividade10.c: 222:             if(PORTBbits.RB2 == 0) { while(PORTBbits.RB2==0); retur
      +                          n keypad_map[row][2]; }
  1402     0733  1906               	btfsc	6,2	;volatile
  1403     0734  2F36               	goto	u341
  1404     0735  2F37               	goto	u340
  1405     0736                     u341:
  1406     0736  2F4D               	goto	l117
  1407     0737                     u340:
  1408     0737                     l118:
  1409     0737  1D06               	btfss	6,2	;volatile
  1410     0738  2F3A               	goto	u351
  1411     0739  2F3B               	goto	u350
  1412     073A                     u351:
  1413     073A  2F37               	goto	l118
  1414     073B                     u350:
  1415     073B                     l954:
  1416     073B  0871               	movf	Keypad_GetChar@row,w
  1417     073C  00F0               	movwf	??_Keypad_GetChar
  1418     073D  3001               	movlw	1
  1419     073E                     u365:
  1420     073E  1003               	clrc
  1421     073F  0DF0               	rlf	??_Keypad_GetChar,f
  1422     0740  3EFF               	addlw	-1
  1423     0741  1D03               	skipz
  1424     0742  2F3E               	goto	u365
  1425     0743  1003               	clrc
  1426     0744  0D70               	rlf	??_Keypad_GetChar,w
  1427     0745  3E03               	addlw	low (((_keypad_map-__stringbase)| (0+32768)+2))
  1428     0746  0084               	movwf	4
  1429     0747  120A  118A  2003  120A  118A  	fcall	stringdir
  1430     074C  2F6A               	goto	l112
  1431     074D                     l117:
  1432                           
  1433                           ;atividade10.c: 223:             if(PORTBbits.RB3 == 0) { while(PORTBbits.RB3==0); retur
      +                          n keypad_map[row][3]; }
  1434     074D  1986               	btfsc	6,3	;volatile
  1435     074E  2F50               	goto	u371
  1436     074F  2F51               	goto	u370
  1437     0750                     u371:
  1438     0750  2F67               	goto	l964
  1439     0751                     u370:
  1440     0751                     l122:
  1441     0751  1D86               	btfss	6,3	;volatile
  1442     0752  2F54               	goto	u381
  1443     0753  2F55               	goto	u380
  1444     0754                     u381:
  1445     0754  2F51               	goto	l122
  1446     0755                     u380:
  1447     0755                     l960:
  1448     0755  0871               	movf	Keypad_GetChar@row,w
  1449     0756  00F0               	movwf	??_Keypad_GetChar
  1450     0757  3001               	movlw	1
  1451     0758                     u395:
  1452     0758  1003               	clrc
  1453     0759  0DF0               	rlf	??_Keypad_GetChar,f
  1454     075A  3EFF               	addlw	-1
  1455     075B  1D03               	skipz
  1456     075C  2F58               	goto	u395
  1457     075D  1003               	clrc
  1458     075E  0D70               	rlf	??_Keypad_GetChar,w
  1459     075F  3E04               	addlw	low (((_keypad_map-__stringbase)| (0+32768)+3))
  1460     0760  0084               	movwf	4
  1461     0761  120A  118A  2003  120A  118A  	fcall	stringdir
  1462     0766  2F6A               	goto	l112
  1463     0767                     l964:
  1464                           
  1465                           ;atividade10.c: 224:         }
  1466     0767  3001               	movlw	1
  1467     0768  07F1               	addwf	Keypad_GetChar@row,f
  1468     0769  2EE4               	goto	l930
  1469     076A                     l112:
  1470     076A  0008               	return
  1471     076B                     __end_of_Keypad_GetChar:
  1472                           
  1473                           	psect	text9
  1474     05C4                     __ptext9:	
  1475 ;; *************** function _EEPROM_Write *****************
  1476 ;; Defined at:
  1477 ;;		line 229 in file "atividade10.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;  address         1    wreg     unsigned char 
  1480 ;;  data            1    0[COMMON] unsigned char 
  1481 ;; Auto vars:     Size  Location     Type
  1482 ;;  address         1    1[COMMON] unsigned char 
  1483 ;; Return value:  Size  Location     Type
  1484 ;;                  1    wreg      void 
  1485 ;; Registers used:
  1486 ;;		wreg
  1487 ;; Tracked objects:
  1488 ;;		On entry : 0/0
  1489 ;;		On exit  : 0/0
  1490 ;;		Unchanged: 0/0
  1491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1492 ;;      Params:         1       0       0       0       0
  1493 ;;      Locals:         1       0       0       0       0
  1494 ;;      Temps:          0       0       0       0       0
  1495 ;;      Totals:         2       0       0       0       0
  1496 ;;Total ram usage:        2 bytes
  1497 ;; Hardware stack levels used: 1
  1498 ;; This function calls:
  1499 ;;		Nothing
  1500 ;; This function is called by:
  1501 ;;		_main
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505     05C4                     _EEPROM_Write:	
  1506                           ;psect for function _EEPROM_Write
  1507                           
  1508                           
  1509                           ;incstack = 0
  1510                           ; Regs used in _EEPROM_Write: [wreg]
  1511                           ;EEPROM_Write@address stored from wreg
  1512     05C4  00F1               	movwf	EEPROM_Write@address
  1513     05C5                     l968:
  1514                           
  1515                           ;atividade10.c: 229: void EEPROM_Write(uint8_t address, uint8_t data);atividade10.c: 230
      +                          : {;atividade10.c: 232:     EEADR = address;
  1516     05C5  0871               	movf	EEPROM_Write@address,w
  1517     05C6  1283               	bcf	3,5	;RP0=0, select bank2
  1518     05C7  1703               	bsf	3,6	;RP1=1, select bank2
  1519     05C8  008D               	movwf	13	;volatile
  1520                           
  1521                           ;atividade10.c: 233:     EEDATA = data;
  1522     05C9  0870               	movf	EEPROM_Write@data,w
  1523     05CA  008C               	movwf	12	;volatile
  1524     05CB                     l970:
  1525                           
  1526                           ;atividade10.c: 235:     EECON1bits.EEPGD = 0;
  1527     05CB  1683               	bsf	3,5	;RP0=1, select bank3
  1528     05CC  1703               	bsf	3,6	;RP1=1, select bank3
  1529     05CD  138C               	bcf	12,7	;volsfr
  1530     05CE                     l972:
  1531                           
  1532                           ;atividade10.c: 236:     EECON1bits.WREN = 1;
  1533     05CE  150C               	bsf	12,2	;volsfr
  1534     05CF                     l974:
  1535                           
  1536                           ;atividade10.c: 238:     INTCONbits.GIE = 0;
  1537     05CF  138B               	bcf	11,7	;volatile
  1538     05D0                     l976:
  1539                           
  1540                           ;atividade10.c: 239:     EECON2 = 0x55;
  1541     05D0  3055               	movlw	85
  1542     05D1  008D               	movwf	13	;volsfr
  1543     05D2                     l978:
  1544                           
  1545                           ;atividade10.c: 240:     EECON2 = 0xAA;
  1546     05D2  30AA               	movlw	170
  1547     05D3  008D               	movwf	13	;volsfr
  1548     05D4                     l980:
  1549                           
  1550                           ;atividade10.c: 241:     EECON1bits.WR = 1;
  1551     05D4  148C               	bsf	12,1	;volsfr
  1552     05D5                     l982:
  1553                           
  1554                           ;atividade10.c: 242:     __nop();
  1555     05D5  0000               	nop
  1556     05D6                     l984:
  1557                           
  1558                           ;atividade10.c: 244:     EECON1bits.WREN = 0;
  1559     05D6  1683               	bsf	3,5	;RP0=1, select bank3
  1560     05D7  1703               	bsf	3,6	;RP1=1, select bank3
  1561     05D8  110C               	bcf	12,2	;volsfr
  1562     05D9                     l986:
  1563                           
  1564                           ;atividade10.c: 245:     INTCONbits.GIE = 1;
  1565     05D9  178B               	bsf	11,7	;volatile
  1566     05DA                     l129:
  1567     05DA  0008               	return
  1568     05DB                     __end_of_EEPROM_Write:
  1569                           
  1570                           	psect	text10
  1571     05A6                     __ptext10:	
  1572 ;; *************** function _EEPROM_Read *****************
  1573 ;; Defined at:
  1574 ;;		line 248 in file "atividade10.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;  address         1    wreg     unsigned char 
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;  address         1    0[COMMON] unsigned char 
  1579 ;; Return value:  Size  Location     Type
  1580 ;;                  1    wreg      unsigned char 
  1581 ;; Registers used:
  1582 ;;		wreg
  1583 ;; Tracked objects:
  1584 ;;		On entry : 0/0
  1585 ;;		On exit  : 0/0
  1586 ;;		Unchanged: 0/0
  1587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1588 ;;      Params:         0       0       0       0       0
  1589 ;;      Locals:         1       0       0       0       0
  1590 ;;      Temps:          0       0       0       0       0
  1591 ;;      Totals:         1       0       0       0       0
  1592 ;;Total ram usage:        1 bytes
  1593 ;; Hardware stack levels used: 1
  1594 ;; This function calls:
  1595 ;;		Nothing
  1596 ;; This function is called by:
  1597 ;;		_main
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601     05A6                     _EEPROM_Read:	
  1602                           ;psect for function _EEPROM_Read
  1603                           
  1604                           
  1605                           ;incstack = 0
  1606                           ; Regs used in _EEPROM_Read: [wreg]
  1607                           ;EEPROM_Read@address stored from wreg
  1608     05A6  00F0               	movwf	EEPROM_Read@address
  1609     05A7                     l814:
  1610                           
  1611                           ;atividade10.c: 248: uint8_t EEPROM_Read(uint8_t address);atividade10.c: 249: {;atividad
      +                          e10.c: 250:     EEADR = address;
  1612     05A7  0870               	movf	EEPROM_Read@address,w
  1613     05A8  1283               	bcf	3,5	;RP0=0, select bank2
  1614     05A9  1703               	bsf	3,6	;RP1=1, select bank2
  1615     05AA  008D               	movwf	13	;volatile
  1616     05AB                     l816:
  1617                           
  1618                           ;atividade10.c: 251:     EECON1bits.EEPGD = 0;
  1619     05AB  1683               	bsf	3,5	;RP0=1, select bank3
  1620     05AC  1703               	bsf	3,6	;RP1=1, select bank3
  1621     05AD  138C               	bcf	12,7	;volsfr
  1622     05AE                     l818:
  1623                           
  1624                           ;atividade10.c: 252:     EECON1bits.RD = 1;
  1625     05AE  140C               	bsf	12,0	;volsfr
  1626     05AF                     l820:
  1627                           
  1628                           ;atividade10.c: 253:     __nop();
  1629     05AF  0000               	nop
  1630                           
  1631                           ;atividade10.c: 254:     return EEDATA;
  1632     05B0  1283               	bcf	3,5	;RP0=0, select bank2
  1633     05B1  1703               	bsf	3,6	;RP1=1, select bank2
  1634     05B2  080C               	movf	12,w	;volatile
  1635     05B3                     l132:
  1636     05B3  0008               	return
  1637     05B4                     __end_of_EEPROM_Read:
  1638     0002                     ___latbits      equ	2
  1639     007E                     btemp           set	126	;btemp
  1640     007E                     wtemp0          set	126
  1641                           
  1642                           	psect	config
  1643                           
  1644                           ;Config register CONFIG @ 0x2007
  1645                           ;	Oscillator Selection bits
  1646                           ;	FOSC = HS, HS oscillator
  1647                           ;	Watchdog Timer Enable bit
  1648                           ;	WDTE = OFF, WDT disabled
  1649                           ;	Power-up Timer Enable bit
  1650                           ;	PWRTE = ON, PWRT enabled
  1651                           ;	FLASH Program Memory Code Protection bits
  1652                           ;	CP = OFF, Code protection off
  1653                           ;	Brown-out Reset Enable bit
  1654                           ;	BOREN = ON, BOR enabled
  1655                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  1656                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1657                           ;	Data EE Memory Code Protection
  1658                           ;	CPD = OFF, Code Protection off
  1659                           ;	FLASH Program Memory Write Enable
  1660                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  1661                           ;	In-Circuit Debugger Mode bit
  1662                           ;	DEBUG = 0x1, unprogrammed default
  1663     2007                     	org	8199
  1664     2007  3D72               	dw	15730

Data Sizes:
    Strings     22
    Constant    16
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_String@str	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), STR_2(CODE[11]), 


Critical Paths under _main in COMMON

    _main->_LCD_SetCursor
    _LCD_String->_LCD_Char
    _LCD_SetCursor->_LCD_Cmd
    _LCD_Init->_LCD_Cmd
    _LCD_Clear->_LCD_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     808
                                              8 COMMON     5     5      0
                        _EEPROM_Read
                       _EEPROM_Write
                     _Keypad_GetChar
                        _Keypad_Init
                           _LCD_Char
                          _LCD_Clear
                           _LCD_Init
                      _LCD_SetCursor
                         _LCD_String
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           1     0      1      77
                                              3 COMMON     1     0      1
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Char                                             3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_SetCursor                                        5     4      1     182
                                              3 COMMON     5     4      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0      58
                                              3 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            2     2      0      58
                                              3 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0      58
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Keypad_GetChar                                       2     2      0     156
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         2     1      1      52
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read                                          1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM_Read
   _EEPROM_Write
   _Keypad_GetChar
   _Keypad_Init
   _LCD_Char
   _LCD_Clear
     _LCD_Cmd
   _LCD_Init
     _LCD_Cmd
   _LCD_SetCursor
     _LCD_Cmd
   _LCD_String
     _LCD_Char

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     13      13     92.9%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      13      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Feb 17 15:57:37 2025

                      pc 0002                       l81 0680                       l90 05C3  
                     l75 06E2                       l78 064A                       l87 05F6  
                     l96 060C                       l97 0614                       u15 0662  
                     fsr 0004              ?_LCD_String 0073            _LCD_SetCursor 05F7  
                    l102 05A5                      l112 076A                      l113 0733  
                    l105 06E3                      l122 0751                      l114 071D  
                    l132 05B3                      l108 0719                      l117 074D  
                    l109 0703                      l118 0737                      l129 05DA  
                    l820 05AF                      l732 05A0                      l900 06BB  
                    l814 05A7                      l910 06D9                      l902 06C1  
                    l816 05AB                      l904 06C7                      l912 05F8  
                    l680 0656                      l920 05DB                      l818 05AE  
                    l930 06E4                      l906 06CD                      l914 05FD  
                    l690 0674                      l682 0657                      l922 05DC  
                    l908 06D3                      l916 0605                      l684 065C  
                    l676 064C                      l924 05E8                      l942 0707  
                    l934 06EB                      l918 060E                      l686 065F  
                    l678 064F                      l926 05EA                      l960 0755  
                    l936 06F9                      l928 06E3                      l880 0626  
                    l872 0616                      l688 066E                      l970 05CB  
                    l954 073B                      l938 06FD                      l882 0629  
                    l874 0619                      l890 0689                      l980 05D4  
                    l972 05CE                      l964 0767                      l948 0721  
                    l884 0638                      l876 0620                      l892 0692  
                    l982 05D5                      l974 05CF                      l886 063E  
                    l878 0621                      l990 05BA                      l894 0698  
                    l984 05D6                      l976 05D0                      l968 05C5  
                    l896 06A7                      l888 0681                      l992 076B  
                    l986 05D9                      l978 05D2                      l898 06AE  
                    l994 076C                      l988 05B4                      l996 0771  
                    l998 0776                      _RE0 0048                      _RE1 0049  
                    u310 071D                      u311 071C                      u320 0721  
                    u240 05FD                      u400 079F                      u321 0720  
                    u305 070A                      u241 05FC                      u401 079E  
                    u250 05F6                      u410 07A4                      u235 062C  
                    u251 05F5                      u411 07A3                      u340 0737  
                    u260 06EA                      u420 07C1                      u341 0736  
                    u261 06E9                      u421 07C0                      u350 073B  
                    u430 07F5                      u351 073A                      u335 0724  
                    u431 07F4                      u280 0703                      u281 0702  
                    u370 0751                      u290 0707                      u274 06F1  
                    u371 0750                      u291 0706                      u275 06EF  
                    u507 06A9                      u380 0755                      u381 0754  
                    u365 073E                      u517 06B6                      u527 06DD  
                    u447 07B0                      u537 05BE                      u457 0659  
                    u395 0758                      u547 0623                      u467 0671  
                    u557 063B                      u477 067B                      u567 0645  
                    u487 068D                      u577 06FB                      u497 069C  
                    fsr0 0004          __end_of_LCD_Cmd 064B                     l1000 077E  
                   l1010 079F                     l1002 0785                     l1020 07C1  
                   l1012 07A4                     l1004 078B                     l1030 07E4  
                   l1022 07C8                     l1014 07AC                     l1006 0793  
                   l1032 07EA                     l1024 07CD                     l1016 07B5  
                   l1008 0799                     l1034 07EF                     l1026 07D5  
                   l1018 07BB                     l1028 07DC                     l1038 07F6  
                   STR_1 0024                     STR_2 0019                     _main 076B  
                   btemp 007E                     start 0000     __end_of_EEPROM_Write 05DB  
       __end_of_LCD_Char 0681         __end_of_LCD_Init 06E3             LCD_Char@data 0072  
         ?_LCD_SetCursor 0073                    ?_main 0070                    _EEADR 010D  
          ??_Keypad_Init 0070                    _PORTC 0007                    _PORTD 0008  
                  _TRISC 0087                    pclath 000A                    status 0003  
                  wtemp0 007E         EEPROM_Write@data 0070          __initialization 07FC  
           __end_of_main 07FC                   ??_main 0078        __end_of_LCD_Clear 05C4  
              ??_LCD_Cmd 0070                   _EEDATA 010C                   _EECON2 018D  
    __end_of_Keypad_Init 05A6                   _TRISE0 0448                   _TRISE1 0449  
                 _TRISD4 0444                   _TRISD5 0445                   _TRISD6 0446  
                 _TRISD7 0447     LCD_SetCursor@address 0077          ??_LCD_SetCursor 0074  
              ?_LCD_Char 0070  __end_of__initialization 07FC                ?_LCD_Init 0070  
         __pcstackCOMMON 0070        _LCD_SetCursor$212 0075             ??_LCD_String 0074  
         _OPTION_REGbits 0081              _Keypad_Init 05A0             _EEPROM_Write 05C4  
       main@eeprom_value 007A               ??_LCD_Char 0070               ??_LCD_Init 0073  
     __end_of_LCD_String 05F7               __pmaintext 076B           _Keypad_GetChar 06E3  
                _LCD_Cmd 0615               __stringtab 0003            LCD_String@str 0073  
 __end_of_Keypad_GetChar 076B                  __ptext1 05DB                  __ptext2 064B  
                __ptext3 05F7                  __ptext4 0681                  __ptext5 05B4  
                __ptext6 0615                  __ptext7 05A0                  __ptext8 06E3  
                __ptext9 05C4               _keypad_map 0009                _LCD_Clear 05B4  
   end_of_initialization 07FC         LCD_SetCursor@col 0073         LCD_SetCursor@row 0074  
          ??_EEPROM_Read 0070          ?_Keypad_GetChar 0070                _PORTBbits 0006  
             ?_LCD_Clear 0070               LCD_Cmd@cmd 0072      __end_of_EEPROM_Read 05B4  
  __end_of_LCD_SetCursor 0615             ?_Keypad_Init 0070      start_initialization 07FC  
               ?_LCD_Cmd 0070                ___latbits 0002              ??_LCD_Clear 0073  
            _EEPROM_Read 05A6                __pstrings 0003                 _LCD_Char 064B  
               _LCD_Init 0681         ??_Keypad_GetChar 0070              __stringbase 0008  
        main@key_pressed 007C               _EECON1bits 018C       __end_of__stringtab 0009  
      Keypad_GetChar@row 0071         main@previous_key 007B                 __ptext10 05A6  
          ?_EEPROM_Write 0070       __end_of_keypad_map 0019               _LCD_String 05DB  
             _INTCONbits 000B           ??_EEPROM_Write 0071             ?_EEPROM_Read 0070  
              stringcode 0003       EEPROM_Read@address 0070                 stringdir 0003  
               stringtab 0003      EEPROM_Write@address 0071  
