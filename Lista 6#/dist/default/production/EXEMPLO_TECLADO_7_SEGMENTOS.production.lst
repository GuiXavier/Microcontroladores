

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Tue Nov 12 14:24:40 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,space=0,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    11                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x7E,2
    14     0000                     
    15                           ; Generated 12/10/2023 GMT
    16                           ; 
    17                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F877 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49     0004                     fsr             equ	4
    50     0004                     fsr0            equ	4
    51     0000                     indf            equ	0
    52     0000                     indf0           equ	0
    53     0002                     pc              equ	2
    54     0002                     pcl             equ	2
    55     000A                     pclath          equ	10
    56     0003                     status          equ	3
    57     0000                     INDF            equ	0	;# 
    58     0001                     TMR0            equ	1	;# 
    59     0002                     PCL             equ	2	;# 
    60     0003                     STATUS          equ	3	;# 
    61     0004                     FSR             equ	4	;# 
    62     0005                     PORTA           equ	5	;# 
    63     0006                     PORTB           equ	6	;# 
    64     0007                     PORTC           equ	7	;# 
    65     0008                     PORTD           equ	8	;# 
    66     0009                     PORTE           equ	9	;# 
    67     000A                     PCLATH          equ	10	;# 
    68     000B                     INTCON          equ	11	;# 
    69     000C                     PIR1            equ	12	;# 
    70     000D                     PIR2            equ	13	;# 
    71     000E                     TMR1            equ	14	;# 
    72     000E                     TMR1L           equ	14	;# 
    73     000F                     TMR1H           equ	15	;# 
    74     0010                     T1CON           equ	16	;# 
    75     0011                     TMR2            equ	17	;# 
    76     0012                     T2CON           equ	18	;# 
    77     0013                     SSPBUF          equ	19	;# 
    78     0014                     SSPCON          equ	20	;# 
    79     0015                     CCPR1           equ	21	;# 
    80     0015                     CCPR1L          equ	21	;# 
    81     0016                     CCPR1H          equ	22	;# 
    82     0017                     CCP1CON         equ	23	;# 
    83     0018                     RCSTA           equ	24	;# 
    84     0019                     TXREG           equ	25	;# 
    85     001A                     RCREG           equ	26	;# 
    86     001B                     CCPR2           equ	27	;# 
    87     001B                     CCPR2L          equ	27	;# 
    88     001C                     CCPR2H          equ	28	;# 
    89     001D                     CCP2CON         equ	29	;# 
    90     001E                     ADRESH          equ	30	;# 
    91     001F                     ADCON0          equ	31	;# 
    92     0081                     OPTION_REG      equ	129	;# 
    93     0085                     TRISA           equ	133	;# 
    94     0086                     TRISB           equ	134	;# 
    95     0087                     TRISC           equ	135	;# 
    96     0088                     TRISD           equ	136	;# 
    97     0089                     TRISE           equ	137	;# 
    98     008C                     PIE1            equ	140	;# 
    99     008D                     PIE2            equ	141	;# 
   100     008E                     PCON            equ	142	;# 
   101     0091                     SSPCON2         equ	145	;# 
   102     0092                     PR2             equ	146	;# 
   103     0093                     SSPADD          equ	147	;# 
   104     0094                     SSPSTAT         equ	148	;# 
   105     0098                     TXSTA           equ	152	;# 
   106     0099                     SPBRG           equ	153	;# 
   107     009E                     ADRESL          equ	158	;# 
   108     009F                     ADCON1          equ	159	;# 
   109     010C                     EEDATA          equ	268	;# 
   110     010D                     EEADR           equ	269	;# 
   111     010E                     EEDATH          equ	270	;# 
   112     010F                     EEADRH          equ	271	;# 
   113     018C                     EECON1          equ	396	;# 
   114     018D                     EECON2          equ	397	;# 
   115     0000                     INDF            equ	0	;# 
   116     0001                     TMR0            equ	1	;# 
   117     0002                     PCL             equ	2	;# 
   118     0003                     STATUS          equ	3	;# 
   119     0004                     FSR             equ	4	;# 
   120     0005                     PORTA           equ	5	;# 
   121     0006                     PORTB           equ	6	;# 
   122     0007                     PORTC           equ	7	;# 
   123     0008                     PORTD           equ	8	;# 
   124     0009                     PORTE           equ	9	;# 
   125     000A                     PCLATH          equ	10	;# 
   126     000B                     INTCON          equ	11	;# 
   127     000C                     PIR1            equ	12	;# 
   128     000D                     PIR2            equ	13	;# 
   129     000E                     TMR1            equ	14	;# 
   130     000E                     TMR1L           equ	14	;# 
   131     000F                     TMR1H           equ	15	;# 
   132     0010                     T1CON           equ	16	;# 
   133     0011                     TMR2            equ	17	;# 
   134     0012                     T2CON           equ	18	;# 
   135     0013                     SSPBUF          equ	19	;# 
   136     0014                     SSPCON          equ	20	;# 
   137     0015                     CCPR1           equ	21	;# 
   138     0015                     CCPR1L          equ	21	;# 
   139     0016                     CCPR1H          equ	22	;# 
   140     0017                     CCP1CON         equ	23	;# 
   141     0018                     RCSTA           equ	24	;# 
   142     0019                     TXREG           equ	25	;# 
   143     001A                     RCREG           equ	26	;# 
   144     001B                     CCPR2           equ	27	;# 
   145     001B                     CCPR2L          equ	27	;# 
   146     001C                     CCPR2H          equ	28	;# 
   147     001D                     CCP2CON         equ	29	;# 
   148     001E                     ADRESH          equ	30	;# 
   149     001F                     ADCON0          equ	31	;# 
   150     0081                     OPTION_REG      equ	129	;# 
   151     0085                     TRISA           equ	133	;# 
   152     0086                     TRISB           equ	134	;# 
   153     0087                     TRISC           equ	135	;# 
   154     0088                     TRISD           equ	136	;# 
   155     0089                     TRISE           equ	137	;# 
   156     008C                     PIE1            equ	140	;# 
   157     008D                     PIE2            equ	141	;# 
   158     008E                     PCON            equ	142	;# 
   159     0091                     SSPCON2         equ	145	;# 
   160     0092                     PR2             equ	146	;# 
   161     0093                     SSPADD          equ	147	;# 
   162     0094                     SSPSTAT         equ	148	;# 
   163     0098                     TXSTA           equ	152	;# 
   164     0099                     SPBRG           equ	153	;# 
   165     009E                     ADRESL          equ	158	;# 
   166     009F                     ADCON1          equ	159	;# 
   167     010C                     EEDATA          equ	268	;# 
   168     010D                     EEADR           equ	269	;# 
   169     010E                     EEDATH          equ	270	;# 
   170     010F                     EEADRH          equ	271	;# 
   171     018C                     EECON1          equ	396	;# 
   172     018D                     EECON2          equ	397	;# 
   173                           
   174                           	psect	idataBANK0
   175     0700                     __pidataBANK0:
   176                           
   177                           ;initializer for _segment
   178     0700  3403               	retlw	3
   179     0701  349F               	retlw	159
   180     0702  3425               	retlw	37
   181     0703  340D               	retlw	13
   182     0704  3499               	retlw	153
   183     0705  3449               	retlw	73
   184     0706  3441               	retlw	65
   185     0707  341F               	retlw	31
   186     0708  3401               	retlw	1
   187     0709  3419               	retlw	25
   188     070A  3411               	retlw	17
   189     070B  34C1               	retlw	193
   190     070C  3463               	retlw	99
   191     070D  3485               	retlw	133
   192     070E  3461               	retlw	97
   193     070F  3471               	retlw	113
   194     0006                     _PORTBbits      set	6
   195     0007                     _PORTCbits      set	7
   196     0008                     _PORTD          set	8
   197     0005                     _PORTAbits      set	5
   198     0086                     _TRISB          set	134
   199     0087                     _TRISC          set	135
   200     0085                     _TRISA          set	133
   201     0088                     _TRISD          set	136
   202                           
   203                           	psect	cinit
   204     07ED                     start_initialization:	
   205                           ; #config settings
   206                           
   207     07ED                     __initialization:
   208                           
   209                           ; Initialize objects allocated to BANK0
   210     07ED  1383               	bcf	3,7	;select IRP bank0
   211     07EE  3030               	movlw	low (__pdataBANK0+16)
   212     07EF  00FD               	movwf	btemp+-1
   213     07F0  3007               	movlw	high __pidataBANK0
   214     07F1  00FE               	movwf	btemp
   215     07F2  3000               	movlw	low __pidataBANK0
   216     07F3  00FF               	movwf	btemp+1
   217     07F4  3020               	movlw	low __pdataBANK0
   218     07F5  0084               	movwf	4
   219     07F6  120A  118A  2714  120A  118A  	fcall	init_ram0
   220                           
   221                           ; Clear objects allocated to COMMON
   222     07FB  01F0               	clrf	__pbssCOMMON& (0+127)
   223     07FC                     end_of_initialization:	
   224                           ;End of C runtime variable initialization code
   225                           
   226     07FC                     __end_of__initialization:
   227     07FC  0183               	clrf	3
   228     07FD  120A  118A  2F23   	ljmp	_main	;jump to C main() function
   229                           
   230                           	psect	bssCOMMON
   231     0070                     __pbssCOMMON:
   232     0070                     _i:
   233     0070                     	ds	1
   234                           
   235                           	psect	dataBANK0
   236     0020                     __pdataBANK0:
   237     0020                     _segment:
   238     0020                     	ds	16
   239                           
   240                           	psect	inittext
   241     0710                     init_fetch0:	
   242                           ;	Called with low address in FSR and high address in W
   243                           
   244     0710  087E               	movf	btemp,w
   245     0711  008A               	movwf	10
   246     0712  087F               	movf	btemp+1,w
   247     0713  0082               	movwf	2
   248     0714                     init_ram0:	
   249                           ;Called with:
   250                           ;	high address of idata address in btemp 
   251                           ;	low address of idata address in btemp+1 
   252                           ;	low address of data in FSR
   253                           ;	high address + 1 of data in btemp-1
   254                           
   255     0714  120A  118A  2710  120A  118A  	fcall	init_fetch0
   256     0719  0080               	movwf	0
   257     071A  0A84               	incf	4,f
   258     071B  0804               	movf	4,w
   259     071C  067D               	xorwf	btemp+-1,w
   260     071D  1903               	btfsc	3,2
   261     071E  3400               	retlw	0
   262     071F  0AFF               	incf	btemp+1,f
   263     0720  1903               	btfsc	3,2
   264     0721  0AFE               	incf	btemp,f
   265     0722  2F14               	goto	init_ram0
   266                           
   267                           	psect	cstackCOMMON
   268     0000                     __pcstackCOMMON:
   269     0000                     ?_teclado:
   270     0000                     ?_main:	
   271                           ; 1 bytes @ 0x0
   272                           
   273     0000                     ??_teclado:	
   274                           ; 1 bytes @ 0x0
   275                           
   276     0000                     ??_main:	
   277                           ; 1 bytes @ 0x0
   278                           
   279                           
   280                           	psect	maintext
   281     0723                     __pmaintext:	
   282                           ; 1 bytes @ 0x0
   283 ;;
   284 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   285 ;;
   286 ;; *************** function _main *****************
   287 ;; Defined at:
   288 ;;		line 25 in file "codigo.c"
   289 ;; Parameters:    Size  Location     Type
   290 ;;		None
   291 ;; Auto vars:     Size  Location     Type
   292 ;;		None
   293 ;; Return value:  Size  Location     Type
   294 ;;                  1    wreg      void 
   295 ;; Registers used:
   296 ;;		wreg, status,2, status,0, pclath, cstack
   297 ;; Tracked objects:
   298 ;;		On entry : B00/0
   299 ;;		On exit  : 0/0
   300 ;;		Unchanged: 0/0
   301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   302 ;;      Params:         0       0       0       0       0
   303 ;;      Locals:         0       0       0       0       0
   304 ;;      Temps:          0       0       0       0       0
   305 ;;      Totals:         0       0       0       0       0
   306 ;;Total ram usage:        0 bytes
   307 ;; Hardware stack levels required when called: 1
   308 ;; This function calls:
   309 ;;		_teclado
   310 ;; This function is called by:
   311 ;;		Startup code after reset
   312 ;; This function uses a non-reentrant model
   313 ;;
   314                           
   315     0723                     _main:	
   316                           ;psect for function _main
   317                           
   318     0723                     l675:	
   319                           ;incstack = 0
   320                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   321                           
   322                           
   323                           ;codigo.c: 27:     TRISD = 0x00;
   324     0723  1683               	bsf	3,5	;RP0=1, select bank1
   325     0724  1303               	bcf	3,6	;RP1=0, select bank1
   326     0725  0188               	clrf	8	;volatile
   327                           
   328                           ;codigo.c: 28:     TRISA = 0x00;
   329     0726  0185               	clrf	5	;volatile
   330                           
   331                           ;codigo.c: 29:     TRISC = 0x00;
   332     0727  0187               	clrf	7	;volatile
   333     0728                     l677:
   334                           
   335                           ;codigo.c: 30:     TRISB = 0xff;
   336     0728  30FF               	movlw	255
   337     0729  0086               	movwf	6	;volatile
   338     072A                     l679:
   339                           
   340                           ;codigo.c: 31:     PORTAbits.RA5 = 0;
   341     072A  1283               	bcf	3,5	;RP0=0, select bank0
   342     072B  1303               	bcf	3,6	;RP1=0, select bank0
   343     072C  1285               	bcf	5,5	;volatile
   344     072D                     l681:
   345                           
   346                           ;codigo.c: 34:     {;codigo.c: 35:     teclado();
   347     072D  120A  118A  273A  120A  118A  	fcall	_teclado
   348     0732                     l683:
   349                           
   350                           ;codigo.c: 36:     PORTD = 0xff;
   351     0732  30FF               	movlw	255
   352     0733  1283               	bcf	3,5	;RP0=0, select bank0
   353     0734  1303               	bcf	3,6	;RP1=0, select bank0
   354     0735  0088               	movwf	8	;volatile
   355     0736  2F2D               	goto	l681
   356     0737  120A  118A  2800   	ljmp	start
   357     073A                     __end_of_main:
   358                           
   359                           	psect	text1
   360     073A                     __ptext1:	
   361 ;; *************** function _teclado *****************
   362 ;; Defined at:
   363 ;;		line 40 in file "codigo.c"
   364 ;; Parameters:    Size  Location     Type
   365 ;;		None
   366 ;; Auto vars:     Size  Location     Type
   367 ;;		None
   368 ;; Return value:  Size  Location     Type
   369 ;;                  1    wreg      void 
   370 ;; Registers used:
   371 ;;		wreg
   372 ;; Tracked objects:
   373 ;;		On entry : 0/0
   374 ;;		On exit  : 0/0
   375 ;;		Unchanged: 0/0
   376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   377 ;;      Params:         0       0       0       0       0
   378 ;;      Locals:         0       0       0       0       0
   379 ;;      Temps:          0       0       0       0       0
   380 ;;      Totals:         0       0       0       0       0
   381 ;;Total ram usage:        0 bytes
   382 ;; Hardware stack levels used: 1
   383 ;; This function calls:
   384 ;;		Nothing
   385 ;; This function is called by:
   386 ;;		_main
   387 ;; This function uses a non-reentrant model
   388 ;;
   389                           
   390     073A                     _teclado:	
   391                           ;psect for function _teclado
   392                           
   393     073A                     l641:	
   394                           ;incstack = 0
   395                           ; Regs used in _teclado: [wreg]
   396                           
   397                           
   398                           ;codigo.c: 42:     PORTCbits.RC0=0;PORTCbits.RC1=1;PORTCbits.RC2=1;PORTCbits.RC3=1;
   399     073A  1283               	bcf	3,5	;RP0=0, select bank0
   400     073B  1303               	bcf	3,6	;RP1=0, select bank0
   401     073C  1007               	bcf	7,0	;volatile
   402     073D  1487               	bsf	7,1	;volatile
   403     073E  1507               	bsf	7,2	;volatile
   404     073F  1587               	bsf	7,3	;volatile
   405                           
   406                           ;codigo.c: 43:     if(PORTBbits.RB0==0)
   407     0740  1806               	btfsc	6,0	;volatile
   408     0741  2F43               	goto	u11
   409     0742  2F44               	goto	u10
   410     0743                     u11:
   411     0743  2F4A               	goto	l33
   412     0744                     u10:
   413     0744                     l643:
   414                           
   415                           ;codigo.c: 44:     {;codigo.c: 45:         PORTD = segment[0];
   416     0744  0820               	movf	_segment,w
   417     0745  0088               	movwf	8	;volatile
   418     0746                     l34:	
   419                           ;codigo.c: 46:         while(PORTBbits.RB0==0);
   420                           
   421     0746  1C06               	btfss	6,0	;volatile
   422     0747  2F49               	goto	u21
   423     0748  2F4A               	goto	u20
   424     0749                     u21:
   425     0749  2F46               	goto	l34
   426     074A                     u20:
   427     074A                     l33:	
   428                           ;codigo.c: 47:     }
   429                           
   430                           
   431                           ;codigo.c: 48:     if(PORTBbits.RB1==0)
   432     074A  1886               	btfsc	6,1	;volatile
   433     074B  2F4D               	goto	u31
   434     074C  2F4E               	goto	u30
   435     074D                     u31:
   436     074D  2F54               	goto	l37
   437     074E                     u30:
   438     074E                     l645:
   439                           
   440                           ;codigo.c: 49:     {;codigo.c: 50:         PORTD = segment[1];
   441     074E  0821               	movf	_segment+1,w
   442     074F  0088               	movwf	8	;volatile
   443     0750                     l38:	
   444                           ;codigo.c: 51:         while(PORTBbits.RB1==0);
   445                           
   446     0750  1C86               	btfss	6,1	;volatile
   447     0751  2F53               	goto	u41
   448     0752  2F54               	goto	u40
   449     0753                     u41:
   450     0753  2F50               	goto	l38
   451     0754                     u40:
   452     0754                     l37:	
   453                           ;codigo.c: 52:     }
   454                           
   455                           
   456                           ;codigo.c: 53:     if(PORTBbits.RB2==0)
   457     0754  1906               	btfsc	6,2	;volatile
   458     0755  2F57               	goto	u51
   459     0756  2F58               	goto	u50
   460     0757                     u51:
   461     0757  2F5E               	goto	l41
   462     0758                     u50:
   463     0758                     l647:
   464                           
   465                           ;codigo.c: 54:     {;codigo.c: 55:         PORTD = segment[2];
   466     0758  0822               	movf	_segment+2,w
   467     0759  0088               	movwf	8	;volatile
   468     075A                     l42:	
   469                           ;codigo.c: 56:         while(PORTBbits.RB2==0);
   470                           
   471     075A  1D06               	btfss	6,2	;volatile
   472     075B  2F5D               	goto	u61
   473     075C  2F5E               	goto	u60
   474     075D                     u61:
   475     075D  2F5A               	goto	l42
   476     075E                     u60:
   477     075E                     l41:	
   478                           ;codigo.c: 57:     }
   479                           
   480                           
   481                           ;codigo.c: 58:     if(PORTBbits.RB3==0)
   482     075E  1986               	btfsc	6,3	;volatile
   483     075F  2F61               	goto	u71
   484     0760  2F62               	goto	u70
   485     0761                     u71:
   486     0761  2F68               	goto	l45
   487     0762                     u70:
   488     0762                     l649:
   489                           
   490                           ;codigo.c: 59:     {;codigo.c: 60:         PORTD = segment[3];
   491     0762  0823               	movf	_segment+3,w
   492     0763  0088               	movwf	8	;volatile
   493     0764                     l46:	
   494                           ;codigo.c: 61:         while(PORTBbits.RB3==0);
   495                           
   496     0764  1D86               	btfss	6,3	;volatile
   497     0765  2F67               	goto	u81
   498     0766  2F68               	goto	u80
   499     0767                     u81:
   500     0767  2F64               	goto	l46
   501     0768                     u80:
   502     0768                     l45:	
   503                           ;codigo.c: 62:     }
   504                           
   505                           
   506                           ;codigo.c: 63:     PORTCbits.RC0=1;PORTCbits.RC1=0;PORTCbits.RC2=1;PORTCbits.RC3=1;
   507     0768  1407               	bsf	7,0	;volatile
   508     0769  1087               	bcf	7,1	;volatile
   509     076A  1507               	bsf	7,2	;volatile
   510     076B  1587               	bsf	7,3	;volatile
   511                           
   512                           ;codigo.c: 64:     if(PORTBbits.RB0==0)
   513     076C  1806               	btfsc	6,0	;volatile
   514     076D  2F6F               	goto	u91
   515     076E  2F70               	goto	u90
   516     076F                     u91:
   517     076F  2F76               	goto	l49
   518     0770                     u90:
   519     0770                     l651:
   520                           
   521                           ;codigo.c: 65:     {;codigo.c: 66:         PORTD = segment[4];
   522     0770  0824               	movf	_segment+4,w
   523     0771  0088               	movwf	8	;volatile
   524     0772                     l50:	
   525                           ;codigo.c: 67:         while(PORTBbits.RB0==0);
   526                           
   527     0772  1C06               	btfss	6,0	;volatile
   528     0773  2F75               	goto	u101
   529     0774  2F76               	goto	u100
   530     0775                     u101:
   531     0775  2F72               	goto	l50
   532     0776                     u100:
   533     0776                     l49:	
   534                           ;codigo.c: 68:     }
   535                           
   536                           
   537                           ;codigo.c: 69:     if(PORTBbits.RB1==0)
   538     0776  1886               	btfsc	6,1	;volatile
   539     0777  2F79               	goto	u111
   540     0778  2F7A               	goto	u110
   541     0779                     u111:
   542     0779  2F80               	goto	l53
   543     077A                     u110:
   544     077A                     l653:
   545                           
   546                           ;codigo.c: 70:     {;codigo.c: 71:         PORTD = segment[5];
   547     077A  0825               	movf	_segment+5,w
   548     077B  0088               	movwf	8	;volatile
   549     077C                     l54:	
   550                           ;codigo.c: 72:         while(PORTBbits.RB1==0);
   551                           
   552     077C  1C86               	btfss	6,1	;volatile
   553     077D  2F7F               	goto	u121
   554     077E  2F80               	goto	u120
   555     077F                     u121:
   556     077F  2F7C               	goto	l54
   557     0780                     u120:
   558     0780                     l53:	
   559                           ;codigo.c: 73:     }
   560                           
   561                           
   562                           ;codigo.c: 74:     if(PORTBbits.RB2==0)
   563     0780  1906               	btfsc	6,2	;volatile
   564     0781  2F83               	goto	u131
   565     0782  2F84               	goto	u130
   566     0783                     u131:
   567     0783  2F8A               	goto	l57
   568     0784                     u130:
   569     0784                     l655:
   570                           
   571                           ;codigo.c: 75:     {;codigo.c: 76:         PORTD = segment[6];
   572     0784  0826               	movf	_segment+6,w
   573     0785  0088               	movwf	8	;volatile
   574     0786                     l58:	
   575                           ;codigo.c: 77:         while(PORTBbits.RB2==0);
   576                           
   577     0786  1D06               	btfss	6,2	;volatile
   578     0787  2F89               	goto	u141
   579     0788  2F8A               	goto	u140
   580     0789                     u141:
   581     0789  2F86               	goto	l58
   582     078A                     u140:
   583     078A                     l57:	
   584                           ;codigo.c: 78:     }
   585                           
   586                           
   587                           ;codigo.c: 79:     if(PORTBbits.RB3==0)
   588     078A  1986               	btfsc	6,3	;volatile
   589     078B  2F8D               	goto	u151
   590     078C  2F8E               	goto	u150
   591     078D                     u151:
   592     078D  2F94               	goto	l61
   593     078E                     u150:
   594     078E                     l657:
   595                           
   596                           ;codigo.c: 80:     {;codigo.c: 81:         PORTD = segment[7];
   597     078E  0827               	movf	_segment+7,w
   598     078F  0088               	movwf	8	;volatile
   599     0790                     l62:	
   600                           ;codigo.c: 82:         while(PORTBbits.RB3==0);
   601                           
   602     0790  1D86               	btfss	6,3	;volatile
   603     0791  2F93               	goto	u161
   604     0792  2F94               	goto	u160
   605     0793                     u161:
   606     0793  2F90               	goto	l62
   607     0794                     u160:
   608     0794                     l61:	
   609                           ;codigo.c: 83:     }
   610                           
   611                           
   612                           ;codigo.c: 84:     PORTCbits.RC0=1;PORTCbits.RC1=1;PORTCbits.RC2=0;PORTCbits.RC3=1;
   613     0794  1407               	bsf	7,0	;volatile
   614     0795  1487               	bsf	7,1	;volatile
   615     0796  1107               	bcf	7,2	;volatile
   616     0797  1587               	bsf	7,3	;volatile
   617                           
   618                           ;codigo.c: 85:     if(PORTBbits.RB0==0)
   619     0798  1806               	btfsc	6,0	;volatile
   620     0799  2F9B               	goto	u171
   621     079A  2F9C               	goto	u170
   622     079B                     u171:
   623     079B  2FA2               	goto	l65
   624     079C                     u170:
   625     079C                     l659:
   626                           
   627                           ;codigo.c: 86:     {;codigo.c: 87:         PORTD = segment[8];
   628     079C  0828               	movf	_segment+8,w
   629     079D  0088               	movwf	8	;volatile
   630     079E                     l66:	
   631                           ;codigo.c: 88:         while(PORTBbits.RB0==0);
   632                           
   633     079E  1C06               	btfss	6,0	;volatile
   634     079F  2FA1               	goto	u181
   635     07A0  2FA2               	goto	u180
   636     07A1                     u181:
   637     07A1  2F9E               	goto	l66
   638     07A2                     u180:
   639     07A2                     l65:	
   640                           ;codigo.c: 89:     }
   641                           
   642                           
   643                           ;codigo.c: 90:     if(PORTBbits.RB1==0)
   644     07A2  1886               	btfsc	6,1	;volatile
   645     07A3  2FA5               	goto	u191
   646     07A4  2FA6               	goto	u190
   647     07A5                     u191:
   648     07A5  2FAC               	goto	l69
   649     07A6                     u190:
   650     07A6                     l661:
   651                           
   652                           ;codigo.c: 91:     {;codigo.c: 92:         PORTD = segment[9];
   653     07A6  0829               	movf	_segment+9,w
   654     07A7  0088               	movwf	8	;volatile
   655     07A8                     l70:	
   656                           ;codigo.c: 93:         while(PORTBbits.RB1==0);
   657                           
   658     07A8  1C86               	btfss	6,1	;volatile
   659     07A9  2FAB               	goto	u201
   660     07AA  2FAC               	goto	u200
   661     07AB                     u201:
   662     07AB  2FA8               	goto	l70
   663     07AC                     u200:
   664     07AC                     l69:	
   665                           ;codigo.c: 94:     }
   666                           
   667                           
   668                           ;codigo.c: 95:     if(PORTBbits.RB2==0)
   669     07AC  1906               	btfsc	6,2	;volatile
   670     07AD  2FAF               	goto	u211
   671     07AE  2FB0               	goto	u210
   672     07AF                     u211:
   673     07AF  2FB6               	goto	l73
   674     07B0                     u210:
   675     07B0                     l663:
   676                           
   677                           ;codigo.c: 96:     {;codigo.c: 97:         PORTD = segment[10];
   678     07B0  082A               	movf	_segment+10,w
   679     07B1  0088               	movwf	8	;volatile
   680     07B2                     l74:	
   681                           ;codigo.c: 98:         while(PORTBbits.RB2==0);
   682                           
   683     07B2  1D06               	btfss	6,2	;volatile
   684     07B3  2FB5               	goto	u221
   685     07B4  2FB6               	goto	u220
   686     07B5                     u221:
   687     07B5  2FB2               	goto	l74
   688     07B6                     u220:
   689     07B6                     l73:	
   690                           ;codigo.c: 99:     }
   691                           
   692                           
   693                           ;codigo.c: 100:     if(PORTBbits.RB3==0)
   694     07B6  1986               	btfsc	6,3	;volatile
   695     07B7  2FB9               	goto	u231
   696     07B8  2FBA               	goto	u230
   697     07B9                     u231:
   698     07B9  2FC0               	goto	l77
   699     07BA                     u230:
   700     07BA                     l665:
   701                           
   702                           ;codigo.c: 101:     {;codigo.c: 102:         PORTD = segment[11];
   703     07BA  082B               	movf	_segment+11,w
   704     07BB  0088               	movwf	8	;volatile
   705     07BC                     l78:	
   706                           ;codigo.c: 103:         while(PORTBbits.RB3==0);
   707                           
   708     07BC  1D86               	btfss	6,3	;volatile
   709     07BD  2FBF               	goto	u241
   710     07BE  2FC0               	goto	u240
   711     07BF                     u241:
   712     07BF  2FBC               	goto	l78
   713     07C0                     u240:
   714     07C0                     l77:	
   715                           ;codigo.c: 104:     }
   716                           
   717                           
   718                           ;codigo.c: 105:      PORTCbits.RC0=1;PORTCbits.RC1=1;PORTCbits.RC2=1;PORTCbits.RC3=0;
   719     07C0  1407               	bsf	7,0	;volatile
   720     07C1  1487               	bsf	7,1	;volatile
   721     07C2  1507               	bsf	7,2	;volatile
   722     07C3  1187               	bcf	7,3	;volatile
   723                           
   724                           ;codigo.c: 106:     if(PORTBbits.RB0==0)
   725     07C4  1806               	btfsc	6,0	;volatile
   726     07C5  2FC7               	goto	u251
   727     07C6  2FC8               	goto	u250
   728     07C7                     u251:
   729     07C7  2FCE               	goto	l81
   730     07C8                     u250:
   731     07C8                     l667:
   732                           
   733                           ;codigo.c: 107:     {;codigo.c: 108:         PORTD = segment[12];
   734     07C8  082C               	movf	_segment+12,w
   735     07C9  0088               	movwf	8	;volatile
   736     07CA                     l82:	
   737                           ;codigo.c: 109:         while(PORTBbits.RB0==0);
   738                           
   739     07CA  1C06               	btfss	6,0	;volatile
   740     07CB  2FCD               	goto	u261
   741     07CC  2FCE               	goto	u260
   742     07CD                     u261:
   743     07CD  2FCA               	goto	l82
   744     07CE                     u260:
   745     07CE                     l81:	
   746                           ;codigo.c: 110:     }
   747                           
   748                           
   749                           ;codigo.c: 111:     if(PORTBbits.RB1==0)
   750     07CE  1886               	btfsc	6,1	;volatile
   751     07CF  2FD1               	goto	u271
   752     07D0  2FD2               	goto	u270
   753     07D1                     u271:
   754     07D1  2FD8               	goto	l85
   755     07D2                     u270:
   756     07D2                     l669:
   757                           
   758                           ;codigo.c: 112:     {;codigo.c: 113:         PORTD = segment[13];
   759     07D2  082D               	movf	_segment+13,w
   760     07D3  0088               	movwf	8	;volatile
   761     07D4                     l86:	
   762                           ;codigo.c: 114:         while(PORTBbits.RB1==0);
   763                           
   764     07D4  1C86               	btfss	6,1	;volatile
   765     07D5  2FD7               	goto	u281
   766     07D6  2FD8               	goto	u280
   767     07D7                     u281:
   768     07D7  2FD4               	goto	l86
   769     07D8                     u280:
   770     07D8                     l85:	
   771                           ;codigo.c: 115:     }
   772                           
   773                           
   774                           ;codigo.c: 116:     if(PORTBbits.RB2==0)
   775     07D8  1906               	btfsc	6,2	;volatile
   776     07D9  2FDB               	goto	u291
   777     07DA  2FDC               	goto	u290
   778     07DB                     u291:
   779     07DB  2FE2               	goto	l89
   780     07DC                     u290:
   781     07DC                     l671:
   782                           
   783                           ;codigo.c: 117:     {;codigo.c: 118:         PORTD = segment[14];
   784     07DC  082E               	movf	_segment+14,w
   785     07DD  0088               	movwf	8	;volatile
   786     07DE                     l90:	
   787                           ;codigo.c: 119:         while(PORTBbits.RB2==0);
   788                           
   789     07DE  1D06               	btfss	6,2	;volatile
   790     07DF  2FE1               	goto	u301
   791     07E0  2FE2               	goto	u300
   792     07E1                     u301:
   793     07E1  2FDE               	goto	l90
   794     07E2                     u300:
   795     07E2                     l89:	
   796                           ;codigo.c: 120:     }
   797                           
   798                           
   799                           ;codigo.c: 121:     if(PORTBbits.RB3==0)
   800     07E2  1986               	btfsc	6,3	;volatile
   801     07E3  2FE5               	goto	u311
   802     07E4  2FE6               	goto	u310
   803     07E5                     u311:
   804     07E5  2FEC               	goto	l97
   805     07E6                     u310:
   806     07E6                     l673:
   807                           
   808                           ;codigo.c: 122:     {;codigo.c: 123:         PORTD = segment[15];
   809     07E6  082F               	movf	_segment+15,w
   810     07E7  0088               	movwf	8	;volatile
   811     07E8                     l94:	
   812                           ;codigo.c: 124:         while(PORTBbits.RB3==0);
   813                           
   814     07E8  1D86               	btfss	6,3	;volatile
   815     07E9  2FEB               	goto	u321
   816     07EA  2FEC               	goto	u320
   817     07EB                     u321:
   818     07EB  2FE8               	goto	l94
   819     07EC                     u320:
   820     07EC                     l97:
   821     07EC  0008               	return
   822     07ED                     __end_of_teclado:
   823     0002                     ___latbits      equ	2
   824     007E                     btemp           set	126	;btemp
   825     007E                     wtemp0          set	126
   826                           
   827                           	psect	config
   828                           
   829                           ;Config register CONFIG @ 0x2007
   830                           ;	Oscillator Selection bits
   831                           ;	FOSC = HS, HS oscillator
   832                           ;	Watchdog Timer Enable bit
   833                           ;	WDTE = OFF, WDT disabled
   834                           ;	Power-up Timer Enable bit
   835                           ;	PWRTE = OFF, PWRT disabled
   836                           ;	FLASH Program Memory Code Protection bits
   837                           ;	CP = OFF, Code protection off
   838                           ;	Brown-out Reset Enable bit
   839                           ;	BOREN = OFF, BOR disabled
   840                           ;	Low Voltage In-Circuit Serial Programming Enable bit
   841                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   842                           ;	Data EE Memory Code Protection
   843                           ;	CPD = OFF, Code Protection off
   844                           ;	FLASH Program Memory Write Enable
   845                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
   846                           ;	In-Circuit Debugger Mode bit
   847                           ;	DEBUG = 0x1, unprogrammed default
   848     2007                     	org	8199
   849     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      0       1
    BANK0            80      0      16
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                            _teclado
 ---------------------------------------------------------------------------------
 (1) _teclado                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _teclado

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80      0      16     20.0%
BITBANK0            80      0       0      0.0%
COMMON              14      0       1      7.1%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      17      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Tue Nov 12 14:24:40 2024

                      _i 0070                        pc 0002                       l41 075E  
                     l33 074A                       l50 0772                       l42 075A  
                     l34 0746                       l61 0794                       l53 0780  
                     l45 0768                       l37 0754                       l70 07A8  
                     l62 0790                       l54 077C                       l46 0764  
                     l38 0750                       l81 07CE                       l73 07B6  
                     l65 07A2                       l57 078A                       l49 0776  
                     l90 07DE                       l82 07CA                       l74 07B2  
                     l66 079E                       l58 0786                       l85 07D8  
                     l77 07C0                       l69 07AC                       l94 07E8  
                     l86 07D4                       l78 07BC                       l97 07EC  
                     l89 07E2                       u10 0744                       u11 0743  
                     u20 074A                       u21 0749                       u30 074E  
                     u31 074D                       u40 0754                       u41 0753  
                     u50 0758                       u51 0757                       u60 075E  
                     u61 075D                       u70 0762                       u71 0761  
                     u80 0768                       u81 0767                       u90 0770  
                     u91 076F                       fsr 0004                      l641 073A  
                    l651 0770                      l643 0744                      l661 07A6  
                    l653 077A                      l645 074E                      l671 07DC  
                    l663 07B0                      l655 0784                      l647 0758  
                    l673 07E6                      l665 07BA                      l657 078E  
                    l649 0762                      l681 072D                      l667 07C8  
                    l659 079C                      l683 0732                      l675 0723  
                    l669 07D2                      l677 0728                      l679 072A  
                    u100 0776                      u101 0775                      u110 077A  
                    u111 0779                      u200 07AC                      u120 0780  
                    u201 07AB                      u121 077F                      u210 07B0  
                    u130 0784                      u211 07AF                      u131 0783  
                    u300 07E2                      u220 07B6                      u140 078A  
                    u301 07E1                      u221 07B5                      u141 0789  
                    u310 07E6                      u230 07BA                      u150 078E  
                    u311 07E5                      u231 07B9                      u151 078D  
                    u320 07EC                      u240 07C0                      u160 0794  
                    u321 07EB                      u241 07BF                      u161 0793  
                    u250 07C8                      u170 079C                      u251 07C7  
                    u171 079B                      u260 07CE                      u180 07A2  
                    u261 07CD                      u181 07A1                      u270 07D2  
                    u190 07A6                      u271 07D1                      u191 07A5  
                    u280 07D8                      u281 07D7                      u290 07DC  
                    u291 07DB                      indf 0000                     _main 0723  
                   btemp 007E                     start 0000                    ?_main 0000  
                  _PORTD 0008                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088          __end_of_teclado 07ED  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07ED             __end_of_main 073A                   ??_main 0000  
              ??_teclado 0000  __end_of__initialization 07FC           __pcstackCOMMON 0000  
           __pidataBANK0 0700               __pmaintext 0723                  __ptext1 073A  
                _teclado 073A                  _segment 0020     end_of_initialization 07FC  
              _PORTAbits 0005                _PORTBbits 0006                _PORTCbits 0007  
    start_initialization 07ED               init_fetch0 0710              __pdataBANK0 0020  
            __pbssCOMMON 0070                ___latbits 0002                 ?_teclado 0000  
               init_ram0 0714  
