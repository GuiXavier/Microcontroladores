

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Dec 02 14:40:50 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=1
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 12/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0004                     fsr             equ	4
    52     0004                     fsr0            equ	4
    53     0000                     indf            equ	0
    54     0000                     indf0           equ	0
    55     0002                     pc              equ	2
    56     0002                     pcl             equ	2
    57     000A                     pclath          equ	10
    58     0003                     status          equ	3
    59     0000                     INDF            equ	0	;# 
    60     0001                     TMR0            equ	1	;# 
    61     0002                     PCL             equ	2	;# 
    62     0003                     STATUS          equ	3	;# 
    63     0004                     FSR             equ	4	;# 
    64     0005                     PORTA           equ	5	;# 
    65     0006                     PORTB           equ	6	;# 
    66     0007                     PORTC           equ	7	;# 
    67     0008                     PORTD           equ	8	;# 
    68     0009                     PORTE           equ	9	;# 
    69     000A                     PCLATH          equ	10	;# 
    70     000B                     INTCON          equ	11	;# 
    71     000C                     PIR1            equ	12	;# 
    72     000D                     PIR2            equ	13	;# 
    73     000E                     TMR1            equ	14	;# 
    74     000E                     TMR1L           equ	14	;# 
    75     000F                     TMR1H           equ	15	;# 
    76     0010                     T1CON           equ	16	;# 
    77     0011                     TMR2            equ	17	;# 
    78     0012                     T2CON           equ	18	;# 
    79     0013                     SSPBUF          equ	19	;# 
    80     0014                     SSPCON          equ	20	;# 
    81     0015                     CCPR1           equ	21	;# 
    82     0015                     CCPR1L          equ	21	;# 
    83     0016                     CCPR1H          equ	22	;# 
    84     0017                     CCP1CON         equ	23	;# 
    85     0018                     RCSTA           equ	24	;# 
    86     0019                     TXREG           equ	25	;# 
    87     001A                     RCREG           equ	26	;# 
    88     001B                     CCPR2           equ	27	;# 
    89     001B                     CCPR2L          equ	27	;# 
    90     001C                     CCPR2H          equ	28	;# 
    91     001D                     CCP2CON         equ	29	;# 
    92     001E                     ADRESH          equ	30	;# 
    93     001F                     ADCON0          equ	31	;# 
    94     0081                     OPTION_REG      equ	129	;# 
    95     0085                     TRISA           equ	133	;# 
    96     0086                     TRISB           equ	134	;# 
    97     0087                     TRISC           equ	135	;# 
    98     0088                     TRISD           equ	136	;# 
    99     0089                     TRISE           equ	137	;# 
   100     008C                     PIE1            equ	140	;# 
   101     008D                     PIE2            equ	141	;# 
   102     008E                     PCON            equ	142	;# 
   103     0091                     SSPCON2         equ	145	;# 
   104     0092                     PR2             equ	146	;# 
   105     0093                     SSPADD          equ	147	;# 
   106     0094                     SSPSTAT         equ	148	;# 
   107     0098                     TXSTA           equ	152	;# 
   108     0099                     SPBRG           equ	153	;# 
   109     009E                     ADRESL          equ	158	;# 
   110     009F                     ADCON1          equ	159	;# 
   111     010C                     EEDATA          equ	268	;# 
   112     010D                     EEADR           equ	269	;# 
   113     010E                     EEDATH          equ	270	;# 
   114     010F                     EEADRH          equ	271	;# 
   115     018C                     EECON1          equ	396	;# 
   116     018D                     EECON2          equ	397	;# 
   117     0000                     INDF            equ	0	;# 
   118     0001                     TMR0            equ	1	;# 
   119     0002                     PCL             equ	2	;# 
   120     0003                     STATUS          equ	3	;# 
   121     0004                     FSR             equ	4	;# 
   122     0005                     PORTA           equ	5	;# 
   123     0006                     PORTB           equ	6	;# 
   124     0007                     PORTC           equ	7	;# 
   125     0008                     PORTD           equ	8	;# 
   126     0009                     PORTE           equ	9	;# 
   127     000A                     PCLATH          equ	10	;# 
   128     000B                     INTCON          equ	11	;# 
   129     000C                     PIR1            equ	12	;# 
   130     000D                     PIR2            equ	13	;# 
   131     000E                     TMR1            equ	14	;# 
   132     000E                     TMR1L           equ	14	;# 
   133     000F                     TMR1H           equ	15	;# 
   134     0010                     T1CON           equ	16	;# 
   135     0011                     TMR2            equ	17	;# 
   136     0012                     T2CON           equ	18	;# 
   137     0013                     SSPBUF          equ	19	;# 
   138     0014                     SSPCON          equ	20	;# 
   139     0015                     CCPR1           equ	21	;# 
   140     0015                     CCPR1L          equ	21	;# 
   141     0016                     CCPR1H          equ	22	;# 
   142     0017                     CCP1CON         equ	23	;# 
   143     0018                     RCSTA           equ	24	;# 
   144     0019                     TXREG           equ	25	;# 
   145     001A                     RCREG           equ	26	;# 
   146     001B                     CCPR2           equ	27	;# 
   147     001B                     CCPR2L          equ	27	;# 
   148     001C                     CCPR2H          equ	28	;# 
   149     001D                     CCP2CON         equ	29	;# 
   150     001E                     ADRESH          equ	30	;# 
   151     001F                     ADCON0          equ	31	;# 
   152     0081                     OPTION_REG      equ	129	;# 
   153     0085                     TRISA           equ	133	;# 
   154     0086                     TRISB           equ	134	;# 
   155     0087                     TRISC           equ	135	;# 
   156     0088                     TRISD           equ	136	;# 
   157     0089                     TRISE           equ	137	;# 
   158     008C                     PIE1            equ	140	;# 
   159     008D                     PIE2            equ	141	;# 
   160     008E                     PCON            equ	142	;# 
   161     0091                     SSPCON2         equ	145	;# 
   162     0092                     PR2             equ	146	;# 
   163     0093                     SSPADD          equ	147	;# 
   164     0094                     SSPSTAT         equ	148	;# 
   165     0098                     TXSTA           equ	152	;# 
   166     0099                     SPBRG           equ	153	;# 
   167     009E                     ADRESL          equ	158	;# 
   168     009F                     ADCON1          equ	159	;# 
   169     010C                     EEDATA          equ	268	;# 
   170     010D                     EEADR           equ	269	;# 
   171     010E                     EEDATH          equ	270	;# 
   172     010F                     EEADRH          equ	271	;# 
   173     018C                     EECON1          equ	396	;# 
   174     018D                     EECON2          equ	397	;# 
   175     0006                     _PORTBbits      set	6
   176     0009                     _PORTEbits      set	9
   177     0008                     _PORTD          set	8
   178     0086                     _TRISB          set	134
   179     0088                     _TRISD          set	136
   180     0089                     _TRISE          set	137
   181                           
   182                           	psect	strings
   183     0003                     __pstrings:
   184     0003                     stringtab:
   185     0003                     __stringtab:
   186     0003                     stringcode:	
   187                           ;	String table - string pointers are 1 byte each
   188                           
   189     0003                     stringdir:
   190     0003  3000               	movlw	high stringdir
   191     0004  008A               	movwf	10
   192     0005  0804               	movf	4,w
   193     0006  0A84               	incf	4,f
   194     0007  0782               	addwf	2,f
   195     0008                     __stringbase:
   196     0008  3400               	retlw	0
   197     0009                     __end_of__stringtab:
   198     0009                     STR_2:
   199     0009  3461               	retlw	97	;'a'
   200     000A  3432               	retlw	50	;'2'
   201     000B  3432               	retlw	50	;'2'
   202     000C  3436               	retlw	54	;'6'
   203     000D  3433               	retlw	51	;'3'
   204     000E  3439               	retlw	57	;'9'
   205     000F  3433               	retlw	51	;'3'
   206     0010  3439               	retlw	57	;'9'
   207     0011  3400               	retlw	0
   208     0012                     STR_1:
   209     0012  3459               	retlw	89	;'Y'
   210     0013  3461               	retlw	97	;'a'
   211     0014  346E               	retlw	110	;'n'
   212     0015  3400               	retlw	0
   213                           
   214                           	psect	cinit
   215     07FC                     start_initialization:	
   216                           ; #config settings
   217                           
   218     07FC                     __initialization:
   219     07FC                     end_of_initialization:	
   220                           ;End of C runtime variable initialization code
   221                           
   222     07FC                     __end_of__initialization:
   223     07FC  0183               	clrf	3
   224     07FD  120A  118A  2F8E   	ljmp	_main	;jump to C main() function
   225                           
   226                           	psect	cstackCOMMON
   227     0070                     __pcstackCOMMON:
   228     0070                     ?_lcd_data:
   229     0070                     ?_lcd_command:	
   230                           ; 1 bytes @ 0x0
   231                           
   232     0070                     ?_lcd_initialise:	
   233                           ; 1 bytes @ 0x0
   234                           
   235     0070                     ?_debounce:	
   236                           ; 1 bytes @ 0x0
   237                           
   238     0070                     ?_main:	
   239                           ; 1 bytes @ 0x0
   240                           
   241     0070                     ?___awmod:	
   242                           ; 1 bytes @ 0x0
   243                           
   244     0070                     ___awmod@divisor:	
   245                           ; 2 bytes @ 0x0
   246                           
   247     0070                     ??_lcd_data:	
   248                           ; 2 bytes @ 0x0
   249                           
   250     0070                     ??_lcd_command:	
   251                           ; 1 bytes @ 0x0
   252                           
   253     0070                     ??_debounce:	
   254                           ; 1 bytes @ 0x0
   255                           
   256                           
   257                           ; 1 bytes @ 0x0
   258     0070                     	ds	2
   259     0072                     lcd_data@data:
   260     0072                     lcd_command@cmd:	
   261                           ; 1 bytes @ 0x2
   262                           
   263     0072                     ___awmod@dividend:	
   264                           ; 1 bytes @ 0x2
   265                           
   266                           
   267                           ; 2 bytes @ 0x2
   268     0072                     	ds	1
   269     0073                     ?_lcd_string:
   270     0073                     lcd_string@str:	
   271                           ; 1 bytes @ 0x3
   272                           
   273     0073                     ??_lcd_initialise:	
   274                           ; 1 bytes @ 0x3
   275                           
   276                           
   277                           ; 1 bytes @ 0x3
   278     0073                     	ds	1
   279     0074                     ___awmod@counter:
   280     0074                     ??_lcd_string:	
   281                           ; 1 bytes @ 0x4
   282                           
   283     0074                     ??___awmod:	
   284                           ; 1 bytes @ 0x4
   285                           
   286                           
   287                           ; 1 bytes @ 0x4
   288     0074                     	ds	1
   289     0075                     ___awmod@sign:
   290                           
   291                           ; 1 bytes @ 0x5
   292     0075                     	ds	1
   293     0076                     main@estado:
   294     0076                     ??_main:	
   295                           ; 1 bytes @ 0x6
   296                           
   297                           
   298                           ; 1 bytes @ 0x6
   299     0076                     	ds	1
   300                           
   301                           	psect	maintext
   302     078E                     __pmaintext:	
   303 ;;
   304 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   305 ;;
   306 ;; *************** function _main *****************
   307 ;; Defined at:
   308 ;;		line 51 in file "codigo.c"
   309 ;; Parameters:    Size  Location     Type
   310 ;;		None
   311 ;; Auto vars:     Size  Location     Type
   312 ;;  estado          1    6[COMMON] unsigned char 
   313 ;; Return value:  Size  Location     Type
   314 ;;                  1    wreg      void 
   315 ;; Registers used:
   316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   317 ;; Tracked objects:
   318 ;;		On entry : B00/0
   319 ;;		On exit  : 0/0
   320 ;;		Unchanged: 0/0
   321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   322 ;;      Params:         0       0       0       0       0
   323 ;;      Locals:         1       0       0       0       0
   324 ;;      Temps:          0       0       0       0       0
   325 ;;      Totals:         1       0       0       0       0
   326 ;;Total ram usage:        1 bytes
   327 ;; Hardware stack levels required when called: 2
   328 ;; This function calls:
   329 ;;		___awmod
   330 ;;		_debounce
   331 ;;		_lcd_command
   332 ;;		_lcd_initialise
   333 ;;		_lcd_string
   334 ;; This function is called by:
   335 ;;		Startup code after reset
   336 ;; This function uses a non-reentrant model
   337 ;;
   338                           
   339     078E                     _main:	
   340                           ;psect for function _main
   341                           
   342     078E                     l736:	
   343                           ;incstack = 0
   344                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   345                           
   346                           
   347                           ;codigo.c: 52:                 lcd_command(0x01);
   348     078E  1683               	bsf	3,5	;RP0=1, select bank1
   349     078F  1303               	bcf	3,6	;RP1=0, select bank1
   350     0790  0189               	clrf	9	;volatile
   351                           
   352                           ;codigo.c: 53: 
   353     0791  0188               	clrf	8	;volatile
   354     0792                     l738:
   355                           
   356                           ;codigo.c: 54:                 switch (estado) {
   357     0792  3001               	movlw	1
   358     0793  0086               	movwf	6	;volatile
   359     0794                     l740:
   360                           
   361                           ;codigo.c: 56:                         lcd_command(0x80);
   362     0794  120A  118A  2702  120A  118A  	fcall	_lcd_initialise
   363     0799                     l742:
   364                           
   365                           ;codigo.c: 58:                         break;
   366     0799  01F6               	clrf	main@estado
   367     079A                     l744:
   368                           
   369                           ;codigo.c: 61:                         lcd_string((const unsigned char *)"a2263939");
   370     079A  1283               	bcf	3,5	;RP0=0, select bank0
   371     079B  1303               	bcf	3,6	;RP1=0, select bank0
   372     079C  1C06               	btfss	6,0	;volatile
   373     079D  2F9F               	goto	u241
   374     079E  2FA0               	goto	u240
   375     079F                     u241:
   376     079F  2F9A               	goto	l744
   377     07A0                     u240:
   378     07A0                     l746:
   379                           
   380                           ;codigo.c: 62:                         break;
   381     07A0  120A  118A  26D1  120A  118A  	fcall	_debounce
   382     07A5                     l748:
   383                           
   384                           ;codigo.c: 64:                         lcd_command(0x01);
   385     07A5  1283               	bcf	3,5	;RP0=0, select bank0
   386     07A6  1303               	bcf	3,6	;RP1=0, select bank0
   387     07A7  1C06               	btfss	6,0	;volatile
   388     07A8  2FAA               	goto	u251
   389     07A9  2FAB               	goto	u250
   390     07AA                     u251:
   391     07AA  2F9A               	goto	l744
   392     07AB                     u250:
   393     07AB                     l750:
   394                           
   395                           ;codigo.c: 65:                         break;
   396     07AB  3003               	movlw	3
   397     07AC  00F0               	movwf	___awmod@divisor
   398     07AD  3000               	movlw	0
   399     07AE  00F1               	movwf	___awmod@divisor+1
   400     07AF  0876               	movf	main@estado,w
   401     07B0  3E01               	addlw	1
   402     07B1  00F2               	movwf	___awmod@dividend
   403     07B2  3000               	movlw	0
   404     07B3  1803               	skipnc
   405     07B4  3001               	movlw	1
   406     07B5  00F3               	movwf	___awmod@dividend+1
   407     07B6  120A  118A  2737  120A  118A  	fcall	___awmod
   408     07BB  0870               	movf	?___awmod,w
   409     07BC  00F6               	movwf	main@estado
   410                           
   411                           ;codigo.c: 66:                 }
   412     07BD  3001               	movlw	1
   413     07BE  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   414                           
   415                           ;codigo.c: 68:                 while (PORTBbits.RB0 == 1) {
   416     07C3  2FE7               	goto	l764
   417     07C4                     l752:
   418                           
   419                           ;codigo.c: 70:                 }
   420     07C4  3080               	movlw	128
   421     07C5  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   422     07CA                     l754:
   423                           
   424                           ;codigo.c: 71:             }
   425     07CA  300A               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   426     07CB  00F3               	movwf	lcd_string@str
   427     07CC  120A  118A  271B  120A  118A  	fcall	_lcd_string
   428                           
   429                           ;codigo.c: 72:         }
   430     07D1  2FF2               	goto	l45
   431     07D2                     l756:
   432                           
   433                           ;codigo.c: 74: }
   434     07D2  30C0               	movlw	192
   435     07D3  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   436     07D8                     l758:
   437     07D8  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   438     07D9  00F3               	movwf	lcd_string@str
   439     07DA  120A  118A  271B  120A  118A  	fcall	_lcd_string
   440     07DF  2FF2               	goto	l45
   441     07E0                     l760:
   442     07E0  3001               	movlw	1
   443     07E1  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   444     07E6  2FF2               	goto	l45
   445     07E7                     l764:
   446     07E7  0876               	movf	main@estado,w
   447                           
   448                           ; Switch size 1, requested type "simple"
   449                           ; Number of cases is 3, Range of values is 1 to 3
   450                           ; switch strategies available:
   451                           ; Name         Instructions Cycles
   452                           ; simple_byte           10     6 (average)
   453                           ; direct_byte           20    11 (fixed)
   454                           ; jumptable            263     9 (fixed)
   455                           ;	Chosen strategy is simple_byte
   456     07E8  3A01               	xorlw	1	; case 1
   457     07E9  1903               	skipnz
   458     07EA  2FC4               	goto	l752
   459     07EB  3A03               	xorlw	3	; case 2
   460     07EC  1903               	skipnz
   461     07ED  2FD2               	goto	l756
   462     07EE  3A01               	xorlw	1	; case 3
   463     07EF  1903               	skipnz
   464     07F0  2FE0               	goto	l760
   465     07F1  2FF2               	goto	l45
   466     07F2                     l45:
   467     07F2  1283               	bcf	3,5	;RP0=0, select bank0
   468     07F3  1303               	bcf	3,6	;RP1=0, select bank0
   469     07F4  1806               	btfsc	6,0	;volatile
   470     07F5  2FF7               	goto	u261
   471     07F6  2FF8               	goto	u260
   472     07F7                     u261:
   473     07F7  2FF2               	goto	l45
   474     07F8                     u260:
   475     07F8  2F9A               	goto	l744
   476     07F9  120A  118A  2800   	ljmp	start
   477     07FC                     __end_of_main:
   478                           
   479                           	psect	text1
   480     071B                     __ptext1:	
   481 ;; *************** function _lcd_string *****************
   482 ;; Defined at:
   483 ;;		line 34 in file "codigo.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;  str             1    3[COMMON] PTR const unsigned char 
   486 ;;		 -> STR_2(9), STR_1(4), 
   487 ;; Auto vars:     Size  Location     Type
   488 ;;		None
   489 ;; Return value:  Size  Location     Type
   490 ;;                  1    wreg      void 
   491 ;; Registers used:
   492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   493 ;; Tracked objects:
   494 ;;		On entry : 0/0
   495 ;;		On exit  : 0/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   498 ;;      Params:         1       0       0       0       0
   499 ;;      Locals:         0       0       0       0       0
   500 ;;      Temps:          0       0       0       0       0
   501 ;;      Totals:         1       0       0       0       0
   502 ;;Total ram usage:        1 bytes
   503 ;; Hardware stack levels used: 1
   504 ;; Hardware stack levels required when called: 1
   505 ;; This function calls:
   506 ;;		_lcd_data
   507 ;; This function is called by:
   508 ;;		_main
   509 ;; This function uses a non-reentrant model
   510 ;;
   511                           
   512     071B                     _lcd_string:	
   513                           ;psect for function _lcd_string
   514                           
   515     071B                     l690:	
   516                           ;incstack = 0
   517                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   518                           
   519                           
   520                           ;codigo.c: 35: }
   521     071B  2F2A               	goto	l696
   522     071C                     l692:
   523                           
   524                           ;codigo.c: 36: 
   525     071C  0873               	movf	lcd_string@str,w
   526     071D  0084               	movwf	4
   527     071E  120A  118A  2003  120A  118A  	fcall	stringdir
   528     0723  120A  118A  26EE  120A  118A  	fcall	_lcd_data
   529     0728                     l694:
   530     0728  3001               	movlw	1
   531     0729  07F3               	addwf	lcd_string@str,f
   532     072A                     l696:
   533                           
   534                           ;codigo.c: 35: }
   535     072A  0873               	movf	lcd_string@str,w
   536     072B  0084               	movwf	4
   537     072C  120A  118A  2003  120A  118A  	fcall	stringdir
   538     0731  3A00               	xorlw	0
   539     0732  1D03               	skipz
   540     0733  2F35               	goto	u141
   541     0734  2F36               	goto	u140
   542     0735                     u141:
   543     0735  2F1C               	goto	l692
   544     0736                     u140:
   545     0736                     l26:
   546     0736  0008               	return
   547     0737                     __end_of_lcd_string:
   548                           
   549                           	psect	text2
   550     06EE                     __ptext2:	
   551 ;; *************** function _lcd_data *****************
   552 ;; Defined at:
   553 ;;		line 18 in file "codigo.c"
   554 ;; Parameters:    Size  Location     Type
   555 ;;  data            1    wreg     unsigned char 
   556 ;; Auto vars:     Size  Location     Type
   557 ;;  data            1    2[COMMON] unsigned char 
   558 ;; Return value:  Size  Location     Type
   559 ;;                  1    wreg      void 
   560 ;; Registers used:
   561 ;;		wreg
   562 ;; Tracked objects:
   563 ;;		On entry : 0/0
   564 ;;		On exit  : 0/0
   565 ;;		Unchanged: 0/0
   566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   567 ;;      Params:         0       0       0       0       0
   568 ;;      Locals:         1       0       0       0       0
   569 ;;      Temps:          2       0       0       0       0
   570 ;;      Totals:         3       0       0       0       0
   571 ;;Total ram usage:        3 bytes
   572 ;; Hardware stack levels used: 1
   573 ;; This function calls:
   574 ;;		Nothing
   575 ;; This function is called by:
   576 ;;		_lcd_string
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580     06EE                     _lcd_data:	
   581                           ;psect for function _lcd_data
   582                           
   583                           
   584                           ;incstack = 0
   585                           ; Regs used in _lcd_data: [wreg]
   586                           ;lcd_data@data stored from wreg
   587     06EE  00F2               	movwf	lcd_data@data
   588     06EF                     l594:
   589                           
   590                           ;codigo.c: 19: 
   591     06EF  0872               	movf	lcd_data@data,w
   592     06F0  1283               	bcf	3,5	;RP0=0, select bank0
   593     06F1  1303               	bcf	3,6	;RP1=0, select bank0
   594     06F2  0088               	movwf	8	;volatile
   595     06F3                     l596:
   596                           
   597                           ;codigo.c: 20: void lcd_string(const unsigned char *str) {
   598     06F3  1409               	bsf	9,0	;volatile
   599     06F4                     l598:
   600                           
   601                           ;codigo.c: 21:     while (*str) {
   602     06F4  1489               	bsf	9,1	;volatile
   603                           
   604                           ;codigo.c: 22:         lcd_data(*str++);
   605     06F5  3021               	movlw	33
   606     06F6  00F1               	movwf	??_lcd_data+1
   607     06F7  3076               	movlw	118
   608     06F8  00F0               	movwf	??_lcd_data
   609     06F9                     u277:
   610     06F9  0BF0               	decfsz	??_lcd_data,f
   611     06FA  2EF9               	goto	u277
   612     06FB  0BF1               	decfsz	??_lcd_data+1,f
   613     06FC  2EF9               	goto	u277
   614     06FD  0000               	nop
   615     06FE                     l600:
   616                           
   617                           ;codigo.c: 23:     }
   618     06FE  1283               	bcf	3,5	;RP0=0, select bank0
   619     06FF  1303               	bcf	3,6	;RP1=0, select bank0
   620     0700  1089               	bcf	9,1	;volatile
   621     0701                     l17:
   622     0701  0008               	return
   623     0702                     __end_of_lcd_data:
   624                           
   625                           	psect	text3
   626     0702                     __ptext3:	
   627 ;; *************** function _lcd_initialise *****************
   628 ;; Defined at:
   629 ;;		line 40 in file "codigo.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;		None
   632 ;; Auto vars:     Size  Location     Type
   633 ;;		None
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      void 
   636 ;; Registers used:
   637 ;;		wreg, status,2, status,0, pclath, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   643 ;;      Params:         0       0       0       0       0
   644 ;;      Locals:         0       0       0       0       0
   645 ;;      Temps:          0       0       0       0       0
   646 ;;      Totals:         0       0       0       0       0
   647 ;;Total ram usage:        0 bytes
   648 ;; Hardware stack levels used: 1
   649 ;; Hardware stack levels required when called: 1
   650 ;; This function calls:
   651 ;;		_lcd_command
   652 ;; This function is called by:
   653 ;;		_main
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657     0702                     _lcd_initialise:	
   658                           ;psect for function _lcd_initialise
   659                           
   660     0702                     l618:	
   661                           ;incstack = 0
   662                           ; Regs used in _lcd_initialise: [wreg+status,2+status,0+pclath+cstack]
   663                           
   664                           
   665                           ;codigo.c: 41: 
   666     0702  3038               	movlw	56
   667     0703  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   668                           
   669                           ;codigo.c: 42:     lcd_initialise();
   670     0708  3006               	movlw	6
   671     0709  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   672                           
   673                           ;codigo.c: 43: 
   674     070E  300C               	movlw	12
   675     070F  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   676                           
   677                           ;codigo.c: 44:     unsigned char estado = 0;
   678     0714  3001               	movlw	1
   679     0715  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   680     071A                     l29:
   681     071A  0008               	return
   682     071B                     __end_of_lcd_initialise:
   683                           
   684                           	psect	text4
   685     06DA                     __ptext4:	
   686 ;; *************** function _lcd_command *****************
   687 ;; Defined at:
   688 ;;		line 26 in file "codigo.c"
   689 ;; Parameters:    Size  Location     Type
   690 ;;  cmd             1    wreg     unsigned char 
   691 ;; Auto vars:     Size  Location     Type
   692 ;;  cmd             1    2[COMMON] unsigned char 
   693 ;; Return value:  Size  Location     Type
   694 ;;                  1    wreg      void 
   695 ;; Registers used:
   696 ;;		wreg
   697 ;; Tracked objects:
   698 ;;		On entry : 0/0
   699 ;;		On exit  : 0/0
   700 ;;		Unchanged: 0/0
   701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   702 ;;      Params:         0       0       0       0       0
   703 ;;      Locals:         1       0       0       0       0
   704 ;;      Temps:          2       0       0       0       0
   705 ;;      Totals:         3       0       0       0       0
   706 ;;Total ram usage:        3 bytes
   707 ;; Hardware stack levels used: 1
   708 ;; This function calls:
   709 ;;		Nothing
   710 ;; This function is called by:
   711 ;;		_lcd_initialise
   712 ;;		_main
   713 ;; This function uses a non-reentrant model
   714 ;;
   715                           
   716     06DA                     _lcd_command:	
   717                           ;psect for function _lcd_command
   718                           
   719                           
   720                           ;incstack = 0
   721                           ; Regs used in _lcd_command: [wreg]
   722                           ;lcd_command@cmd stored from wreg
   723     06DA  00F2               	movwf	lcd_command@cmd
   724     06DB                     l602:
   725                           
   726                           ;codigo.c: 27:     lcd_command(0x38);
   727     06DB  0872               	movf	lcd_command@cmd,w
   728     06DC  1283               	bcf	3,5	;RP0=0, select bank0
   729     06DD  1303               	bcf	3,6	;RP1=0, select bank0
   730     06DE  0088               	movwf	8	;volatile
   731     06DF                     l604:
   732                           
   733                           ;codigo.c: 28:     lcd_command(0x06);
   734     06DF  1009               	bcf	9,0	;volatile
   735     06E0                     l606:
   736                           
   737                           ;codigo.c: 29:     lcd_command(0x0C);
   738     06E0  1489               	bsf	9,1	;volatile
   739                           
   740                           ;codigo.c: 30:     lcd_command(0x01);
   741     06E1  3021               	movlw	33
   742     06E2  00F1               	movwf	??_lcd_command+1
   743     06E3  3076               	movlw	118
   744     06E4  00F0               	movwf	??_lcd_command
   745     06E5                     u287:
   746     06E5  0BF0               	decfsz	??_lcd_command,f
   747     06E6  2EE5               	goto	u287
   748     06E7  0BF1               	decfsz	??_lcd_command+1,f
   749     06E8  2EE5               	goto	u287
   750     06E9  0000               	nop
   751     06EA                     l608:
   752                           
   753                           ;codigo.c: 31: }
   754     06EA  1283               	bcf	3,5	;RP0=0, select bank0
   755     06EB  1303               	bcf	3,6	;RP1=0, select bank0
   756     06EC  1089               	bcf	9,1	;volatile
   757     06ED                     l20:
   758     06ED  0008               	return
   759     06EE                     __end_of_lcd_command:
   760                           
   761                           	psect	text5
   762     06D1                     __ptext5:	
   763 ;; *************** function _debounce *****************
   764 ;; Defined at:
   765 ;;		line 47 in file "codigo.c"
   766 ;; Parameters:    Size  Location     Type
   767 ;;		None
   768 ;; Auto vars:     Size  Location     Type
   769 ;;		None
   770 ;; Return value:  Size  Location     Type
   771 ;;                  1    wreg      void 
   772 ;; Registers used:
   773 ;;		wreg
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   779 ;;      Params:         0       0       0       0       0
   780 ;;      Locals:         0       0       0       0       0
   781 ;;      Temps:          2       0       0       0       0
   782 ;;      Totals:         2       0       0       0       0
   783 ;;Total ram usage:        2 bytes
   784 ;; Hardware stack levels used: 1
   785 ;; This function calls:
   786 ;;		Nothing
   787 ;; This function is called by:
   788 ;;		_main
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792     06D1                     _debounce:	
   793                           ;psect for function _debounce
   794                           
   795     06D1                     l620:	
   796                           ;incstack = 0
   797                           ; Regs used in _debounce: [wreg]
   798                           
   799                           
   800                           ;codigo.c: 48:             debounce();
   801     06D1  30A3               	movlw	163
   802     06D2  00F1               	movwf	??_debounce+1
   803     06D3  3055               	movlw	85
   804     06D4  00F0               	movwf	??_debounce
   805     06D5                     u297:
   806     06D5  0BF0               	decfsz	??_debounce,f
   807     06D6  2ED5               	goto	u297
   808     06D7  0BF1               	decfsz	??_debounce+1,f
   809     06D8  2ED5               	goto	u297
   810     06D9                     l32:
   811     06D9  0008               	return
   812     06DA                     __end_of_debounce:
   813                           
   814                           	psect	text6
   815     0737                     __ptext6:	
   816 ;; *************** function ___awmod *****************
   817 ;; Defined at:
   818 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
   819 ;; Parameters:    Size  Location     Type
   820 ;;  divisor         2    0[COMMON] int 
   821 ;;  dividend        2    2[COMMON] int 
   822 ;; Auto vars:     Size  Location     Type
   823 ;;  sign            1    5[COMMON] unsigned char 
   824 ;;  counter         1    4[COMMON] unsigned char 
   825 ;; Return value:  Size  Location     Type
   826 ;;                  2    0[COMMON] int 
   827 ;; Registers used:
   828 ;;		wreg, status,2, status,0
   829 ;; Tracked objects:
   830 ;;		On entry : 0/0
   831 ;;		On exit  : 0/0
   832 ;;		Unchanged: 0/0
   833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   834 ;;      Params:         4       0       0       0       0
   835 ;;      Locals:         2       0       0       0       0
   836 ;;      Temps:          0       0       0       0       0
   837 ;;      Totals:         6       0       0       0       0
   838 ;;Total ram usage:        6 bytes
   839 ;; Hardware stack levels used: 1
   840 ;; This function calls:
   841 ;;		Nothing
   842 ;; This function is called by:
   843 ;;		_main
   844 ;; This function uses a non-reentrant model
   845 ;;
   846                           
   847     0737                     ___awmod:	
   848                           ;psect for function ___awmod
   849                           
   850     0737                     l698:	
   851                           ;incstack = 0
   852                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   853                           
   854     0737  01F5               	clrf	___awmod@sign
   855     0738                     l700:
   856     0738  1FF3               	btfss	___awmod@dividend+1,7
   857     0739  2F3B               	goto	u151
   858     073A  2F3C               	goto	u150
   859     073B                     u151:
   860     073B  2F43               	goto	l706
   861     073C                     u150:
   862     073C                     l702:
   863     073C  09F2               	comf	___awmod@dividend,f
   864     073D  09F3               	comf	___awmod@dividend+1,f
   865     073E  0AF2               	incf	___awmod@dividend,f
   866     073F  1903               	skipnz
   867     0740  0AF3               	incf	___awmod@dividend+1,f
   868     0741                     l704:
   869     0741  3001               	movlw	1
   870     0742  00F5               	movwf	___awmod@sign
   871     0743                     l706:
   872     0743  1FF1               	btfss	___awmod@divisor+1,7
   873     0744  2F46               	goto	u161
   874     0745  2F47               	goto	u160
   875     0746                     u161:
   876     0746  2F4C               	goto	l710
   877     0747                     u160:
   878     0747                     l708:
   879     0747  09F0               	comf	___awmod@divisor,f
   880     0748  09F1               	comf	___awmod@divisor+1,f
   881     0749  0AF0               	incf	___awmod@divisor,f
   882     074A  1903               	skipnz
   883     074B  0AF1               	incf	___awmod@divisor+1,f
   884     074C                     l710:
   885     074C  0870               	movf	___awmod@divisor,w
   886     074D  0471               	iorwf	___awmod@divisor+1,w
   887     074E  1903               	btfsc	3,2
   888     074F  2F51               	goto	u171
   889     0750  2F52               	goto	u170
   890     0751                     u171:
   891     0751  2F7F               	goto	l728
   892     0752                     u170:
   893     0752                     l712:
   894     0752  3001               	movlw	1
   895     0753  00F4               	movwf	___awmod@counter
   896     0754  2F5E               	goto	l718
   897     0755                     l714:
   898     0755  3001               	movlw	1
   899     0756                     u185:
   900     0756  1003               	clrc
   901     0757  0DF0               	rlf	___awmod@divisor,f
   902     0758  0DF1               	rlf	___awmod@divisor+1,f
   903     0759  3EFF               	addlw	-1
   904     075A  1D03               	skipz
   905     075B  2F56               	goto	u185
   906     075C                     l716:
   907     075C  3001               	movlw	1
   908     075D  07F4               	addwf	___awmod@counter,f
   909     075E                     l718:
   910     075E  1FF1               	btfss	___awmod@divisor+1,7
   911     075F  2F61               	goto	u191
   912     0760  2F62               	goto	u190
   913     0761                     u191:
   914     0761  2F55               	goto	l714
   915     0762                     u190:
   916     0762                     l720:
   917     0762  0871               	movf	___awmod@divisor+1,w
   918     0763  0273               	subwf	___awmod@dividend+1,w
   919     0764  1D03               	skipz
   920     0765  2F68               	goto	u205
   921     0766  0870               	movf	___awmod@divisor,w
   922     0767  0272               	subwf	___awmod@dividend,w
   923     0768                     u205:
   924     0768  1C03               	skipc
   925     0769  2F6B               	goto	u201
   926     076A  2F6C               	goto	u200
   927     076B                     u201:
   928     076B  2F72               	goto	l724
   929     076C                     u200:
   930     076C                     l722:
   931     076C  0870               	movf	___awmod@divisor,w
   932     076D  02F2               	subwf	___awmod@dividend,f
   933     076E  0871               	movf	___awmod@divisor+1,w
   934     076F  1C03               	skipc
   935     0770  03F3               	decf	___awmod@dividend+1,f
   936     0771  02F3               	subwf	___awmod@dividend+1,f
   937     0772                     l724:
   938     0772  3001               	movlw	1
   939     0773                     u215:
   940     0773  1003               	clrc
   941     0774  0CF1               	rrf	___awmod@divisor+1,f
   942     0775  0CF0               	rrf	___awmod@divisor,f
   943     0776  3EFF               	addlw	-1
   944     0777  1D03               	skipz
   945     0778  2F73               	goto	u215
   946     0779                     l726:
   947     0779  3001               	movlw	1
   948     077A  02F4               	subwf	___awmod@counter,f
   949     077B  1D03               	btfss	3,2
   950     077C  2F7E               	goto	u221
   951     077D  2F7F               	goto	u220
   952     077E                     u221:
   953     077E  2F62               	goto	l720
   954     077F                     u220:
   955     077F                     l728:
   956     077F  0875               	movf	___awmod@sign,w
   957     0780  1903               	btfsc	3,2
   958     0781  2F83               	goto	u231
   959     0782  2F84               	goto	u230
   960     0783                     u231:
   961     0783  2F89               	goto	l732
   962     0784                     u230:
   963     0784                     l730:
   964     0784  09F2               	comf	___awmod@dividend,f
   965     0785  09F3               	comf	___awmod@dividend+1,f
   966     0786  0AF2               	incf	___awmod@dividend,f
   967     0787  1903               	skipnz
   968     0788  0AF3               	incf	___awmod@dividend+1,f
   969     0789                     l732:
   970     0789  0873               	movf	___awmod@dividend+1,w
   971     078A  00F1               	movwf	?___awmod+1
   972     078B  0872               	movf	___awmod@dividend,w
   973     078C  00F0               	movwf	?___awmod
   974     078D                     l302:
   975     078D  0008               	return
   976     078E                     __end_of___awmod:
   977     0002                     ___latbits      equ	2
   978     007E                     btemp           set	126	;btemp
   979     007E                     wtemp0          set	126
   980                           
   981                           	psect	config
   982                           
   983                           ;Config register CONFIG @ 0x2007
   984                           ;	Oscillator Selection bits
   985                           ;	FOSC = HS, HS oscillator
   986                           ;	Watchdog Timer Enable bit
   987                           ;	WDTE = OFF, WDT disabled
   988                           ;	Power-up Timer Enable bit
   989                           ;	PWRTE = OFF, PWRT disabled
   990                           ;	FLASH Program Memory Code Protection bits
   991                           ;	CP = OFF, Code protection off
   992                           ;	Brown-out Reset Enable bit
   993                           ;	BOREN = OFF, BOR disabled
   994                           ;	Low Voltage In-Circuit Serial Programming Enable bit
   995                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
   996                           ;	Data EE Memory Code Protection
   997                           ;	CPD = OFF, Code Protection off
   998                           ;	FLASH Program Memory Write Enable
   999                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  1000                           ;	In-Circuit Debugger Mode bit
  1001                           ;	DEBUG = 0x1, unprogrammed default
  1002     2007                     	org	8199
  1003     2007  3DBA               	dw	15802

Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_string@str	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_1(CODE[4]), STR_2(CODE[9]), 


Critical Paths under _main in COMMON

    _main->___awmod
    _lcd_string->_lcd_data
    _lcd_initialise->_lcd_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     436
                                              6 COMMON     1     1      0
                            ___awmod
                           _debounce
                        _lcd_command
                     _lcd_initialise
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           1     0      1      62
                                              3 COMMON     1     0      1
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_initialise                                       0     0      0      15
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _debounce                                             2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     298
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   _debounce
   _lcd_command
   _lcd_initialise
     _lcd_command
   _lcd_string
     _lcd_data

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14      7       7     50.0%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       7      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Dec 02 14:40:50 2024

                      pc 0002             lcd_data@data 0072                       l20 06ED  
                     l32 06D9                       l17 0701                       l26 0736  
                     l29 071A                       l45 07F2                       fsr 0004  
                    l302 078D                      l600 06FE                      l602 06DB  
                    l700 0738                      l620 06D1                      l604 06DF  
                    l710 074C                      l702 073C                      l606 06E0  
                    l720 0762                      l712 0752                      l704 0741  
                    l608 06EA                      l730 0784                      l722 076C  
                    l714 0755                      l706 0743                      l618 0702  
                    l732 0789                      l724 0772                      l716 075C  
                    l708 0747                      l740 0794                      l726 0779  
                    l718 075E                      l750 07AB                      l742 0799  
                    l728 077F                      l760 07E0                      l752 07C4  
                    l744 079A                      l736 078E                      l594 06EF  
                    l690 071B                      l754 07CA                      l746 07A0  
                    l738 0792                      l596 06F3                      l692 071C  
                    l756 07D2                      l764 07E7                      l748 07A5  
                    l598 06F4                      l694 0728                      l758 07D8  
                    l696 072A                      l698 0737                      u200 076C  
                    u201 076B                      u220 077F                      u140 0736  
                    u221 077E                      u205 0768                      u141 0735  
                    u230 0784                      u150 073C                      u231 0783  
                    u215 0773                      u151 073B                      u160 0747  
                    u240 07A0                      u161 0746                      u241 079F  
                    u170 0752                      u250 07AB                      u171 0751  
                    u251 07AA                      u260 07F8                      u261 07F7  
                    u190 0762                      u191 0761                      u185 0756  
                    u277 06F9                      u287 06E5                      u297 06D5  
                    fsr0 0004             ___awmod@sign 0075                     STR_1 0012  
                   STR_2 0009                     _main 078E                     btemp 007E  
                   start 0000                    ?_main 0070          __end_of___awmod 078E  
                  _PORTD 0008                    _TRISB 0086                    _TRISD 0088  
                  _TRISE 0089                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 07FC  
                 ??_main 0076           lcd_command@cmd 0072         __end_of_debounce 06DA  
       __end_of_lcd_data 0702                ??___awmod 0074          ___awmod@divisor 0070  
        ___awmod@counter 0074         ??_lcd_initialise 0073            lcd_string@str 0073  
__end_of__initialization 07FC           __pcstackCOMMON 0070               __pmaintext 078E  
              ?_debounce 0070                ?_lcd_data 0070               _lcd_string 071B  
             __stringtab 0003                  ___awmod 0737                  __ptext1 071B  
                __ptext2 06EE                  __ptext3 0702                  __ptext4 06DA  
                __ptext5 06D1                  __ptext6 0737         ___awmod@dividend 0072  
             ??_debounce 0070               ??_lcd_data 0070     end_of_initialization 07FC  
              _PORTBbits 0006                _PORTEbits 0009              ?_lcd_string 0073  
             main@estado 0076            ??_lcd_command 0070      start_initialization 07FC  
    __end_of_lcd_command 06EE                ___latbits 0002                 ?___awmod 0070  
              __pstrings 0003              _lcd_command 06DA              __stringbase 0008  
           ??_lcd_string 0074       __end_of_lcd_string 0737       __end_of__stringtab 0009  
               _debounce 06D1                 _lcd_data 06EE           _lcd_initialise 0702  
 __end_of_lcd_initialise 071B                stringcode 0003                 stringdir 0003  
               stringtab 0003          ?_lcd_initialise 0070             ?_lcd_command 0070  
