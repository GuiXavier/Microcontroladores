

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Tue Nov 26 14:52:18 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=1
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 12/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0004                     fsr             equ	4
    52     0004                     fsr0            equ	4
    53     0000                     indf            equ	0
    54     0000                     indf0           equ	0
    55     0002                     pc              equ	2
    56     0002                     pcl             equ	2
    57     000A                     pclath          equ	10
    58     0003                     status          equ	3
    59     0000                     INDF            equ	0	;# 
    60     0001                     TMR0            equ	1	;# 
    61     0002                     PCL             equ	2	;# 
    62     0003                     STATUS          equ	3	;# 
    63     0004                     FSR             equ	4	;# 
    64     0005                     PORTA           equ	5	;# 
    65     0006                     PORTB           equ	6	;# 
    66     0007                     PORTC           equ	7	;# 
    67     0008                     PORTD           equ	8	;# 
    68     0009                     PORTE           equ	9	;# 
    69     000A                     PCLATH          equ	10	;# 
    70     000B                     INTCON          equ	11	;# 
    71     000C                     PIR1            equ	12	;# 
    72     000D                     PIR2            equ	13	;# 
    73     000E                     TMR1            equ	14	;# 
    74     000E                     TMR1L           equ	14	;# 
    75     000F                     TMR1H           equ	15	;# 
    76     0010                     T1CON           equ	16	;# 
    77     0011                     TMR2            equ	17	;# 
    78     0012                     T2CON           equ	18	;# 
    79     0013                     SSPBUF          equ	19	;# 
    80     0014                     SSPCON          equ	20	;# 
    81     0015                     CCPR1           equ	21	;# 
    82     0015                     CCPR1L          equ	21	;# 
    83     0016                     CCPR1H          equ	22	;# 
    84     0017                     CCP1CON         equ	23	;# 
    85     0018                     RCSTA           equ	24	;# 
    86     0019                     TXREG           equ	25	;# 
    87     001A                     RCREG           equ	26	;# 
    88     001B                     CCPR2           equ	27	;# 
    89     001B                     CCPR2L          equ	27	;# 
    90     001C                     CCPR2H          equ	28	;# 
    91     001D                     CCP2CON         equ	29	;# 
    92     001E                     ADRESH          equ	30	;# 
    93     001F                     ADCON0          equ	31	;# 
    94     0081                     OPTION_REG      equ	129	;# 
    95     0085                     TRISA           equ	133	;# 
    96     0086                     TRISB           equ	134	;# 
    97     0087                     TRISC           equ	135	;# 
    98     0088                     TRISD           equ	136	;# 
    99     0089                     TRISE           equ	137	;# 
   100     008C                     PIE1            equ	140	;# 
   101     008D                     PIE2            equ	141	;# 
   102     008E                     PCON            equ	142	;# 
   103     0091                     SSPCON2         equ	145	;# 
   104     0092                     PR2             equ	146	;# 
   105     0093                     SSPADD          equ	147	;# 
   106     0094                     SSPSTAT         equ	148	;# 
   107     0098                     TXSTA           equ	152	;# 
   108     0099                     SPBRG           equ	153	;# 
   109     009E                     ADRESL          equ	158	;# 
   110     009F                     ADCON1          equ	159	;# 
   111     010C                     EEDATA          equ	268	;# 
   112     010D                     EEADR           equ	269	;# 
   113     010E                     EEDATH          equ	270	;# 
   114     010F                     EEADRH          equ	271	;# 
   115     018C                     EECON1          equ	396	;# 
   116     018D                     EECON2          equ	397	;# 
   117     0000                     INDF            equ	0	;# 
   118     0001                     TMR0            equ	1	;# 
   119     0002                     PCL             equ	2	;# 
   120     0003                     STATUS          equ	3	;# 
   121     0004                     FSR             equ	4	;# 
   122     0005                     PORTA           equ	5	;# 
   123     0006                     PORTB           equ	6	;# 
   124     0007                     PORTC           equ	7	;# 
   125     0008                     PORTD           equ	8	;# 
   126     0009                     PORTE           equ	9	;# 
   127     000A                     PCLATH          equ	10	;# 
   128     000B                     INTCON          equ	11	;# 
   129     000C                     PIR1            equ	12	;# 
   130     000D                     PIR2            equ	13	;# 
   131     000E                     TMR1            equ	14	;# 
   132     000E                     TMR1L           equ	14	;# 
   133     000F                     TMR1H           equ	15	;# 
   134     0010                     T1CON           equ	16	;# 
   135     0011                     TMR2            equ	17	;# 
   136     0012                     T2CON           equ	18	;# 
   137     0013                     SSPBUF          equ	19	;# 
   138     0014                     SSPCON          equ	20	;# 
   139     0015                     CCPR1           equ	21	;# 
   140     0015                     CCPR1L          equ	21	;# 
   141     0016                     CCPR1H          equ	22	;# 
   142     0017                     CCP1CON         equ	23	;# 
   143     0018                     RCSTA           equ	24	;# 
   144     0019                     TXREG           equ	25	;# 
   145     001A                     RCREG           equ	26	;# 
   146     001B                     CCPR2           equ	27	;# 
   147     001B                     CCPR2L          equ	27	;# 
   148     001C                     CCPR2H          equ	28	;# 
   149     001D                     CCP2CON         equ	29	;# 
   150     001E                     ADRESH          equ	30	;# 
   151     001F                     ADCON0          equ	31	;# 
   152     0081                     OPTION_REG      equ	129	;# 
   153     0085                     TRISA           equ	133	;# 
   154     0086                     TRISB           equ	134	;# 
   155     0087                     TRISC           equ	135	;# 
   156     0088                     TRISD           equ	136	;# 
   157     0089                     TRISE           equ	137	;# 
   158     008C                     PIE1            equ	140	;# 
   159     008D                     PIE2            equ	141	;# 
   160     008E                     PCON            equ	142	;# 
   161     0091                     SSPCON2         equ	145	;# 
   162     0092                     PR2             equ	146	;# 
   163     0093                     SSPADD          equ	147	;# 
   164     0094                     SSPSTAT         equ	148	;# 
   165     0098                     TXSTA           equ	152	;# 
   166     0099                     SPBRG           equ	153	;# 
   167     009E                     ADRESL          equ	158	;# 
   168     009F                     ADCON1          equ	159	;# 
   169     010C                     EEDATA          equ	268	;# 
   170     010D                     EEADR           equ	269	;# 
   171     010E                     EEDATH          equ	270	;# 
   172     010F                     EEADRH          equ	271	;# 
   173     018C                     EECON1          equ	396	;# 
   174     018D                     EECON2          equ	397	;# 
   175     0006                     _PORTBbits      set	6
   176     0009                     _PORTEbits      set	9
   177     0008                     _PORTD          set	8
   178     0086                     _TRISB          set	134
   179     0088                     _TRISD          set	136
   180     0089                     _TRISE          set	137
   181                           
   182                           	psect	strings
   183     0003                     __pstrings:
   184     0003                     stringtab:
   185     0003                     __stringtab:
   186     0003                     stringcode:	
   187                           ;	String table - string pointers are 1 byte each
   188                           
   189     0003                     stringdir:
   190     0003  3000               	movlw	high stringdir
   191     0004  008A               	movwf	10
   192     0005  0804               	movf	4,w
   193     0006  0A84               	incf	4,f
   194     0007  0782               	addwf	2,f
   195     0008                     __stringbase:
   196     0008  3400               	retlw	0
   197     0009                     __end_of__stringtab:
   198     0009                     STR_2:
   199     0009  3461               	retlw	97	;'a'
   200     000A  3432               	retlw	50	;'2'
   201     000B  3430               	retlw	48	;'0'
   202     000C  3439               	retlw	57	;'9'
   203     000D  3435               	retlw	53	;'5'
   204     000E  3439               	retlw	57	;'9'
   205     000F  3432               	retlw	50	;'2'
   206     0010  3430               	retlw	48	;'0'
   207     0011  3400               	retlw	0
   208     0012                     STR_1:
   209     0012  3450               	retlw	80	;'P'
   210     0013  3461               	retlw	97	;'a'
   211     0014  3475               	retlw	117	;'u'
   212     0015  346C               	retlw	108	;'l'
   213     0016  346F               	retlw	111	;'o'
   214     0017  3400               	retlw	0
   215                           
   216                           	psect	cinit
   217     07FC                     start_initialization:	
   218                           ; #config settings
   219                           
   220     07FC                     __initialization:
   221     07FC                     end_of_initialization:	
   222                           ;End of C runtime variable initialization code
   223                           
   224     07FC                     __end_of__initialization:
   225     07FC  0183               	clrf	3
   226     07FD  120A  118A  2F8E   	ljmp	_main	;jump to C main() function
   227                           
   228                           	psect	cstackCOMMON
   229     0070                     __pcstackCOMMON:
   230     0070                     ?_lcd_data:
   231     0070                     ?_lcd_command:	
   232                           ; 1 bytes @ 0x0
   233                           
   234     0070                     ?_lcd_initialise:	
   235                           ; 1 bytes @ 0x0
   236                           
   237     0070                     ?_debounce:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0070                     ?_main:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0070                     ?___awmod:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0070                     ___awmod@divisor:	
   247                           ; 2 bytes @ 0x0
   248                           
   249     0070                     ??_lcd_data:	
   250                           ; 2 bytes @ 0x0
   251                           
   252     0070                     ??_lcd_command:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0070                     ??_debounce:	
   256                           ; 1 bytes @ 0x0
   257                           
   258                           
   259                           ; 1 bytes @ 0x0
   260     0070                     	ds	2
   261     0072                     lcd_data@data:
   262     0072                     lcd_command@cmd:	
   263                           ; 1 bytes @ 0x2
   264                           
   265     0072                     ___awmod@dividend:	
   266                           ; 1 bytes @ 0x2
   267                           
   268                           
   269                           ; 2 bytes @ 0x2
   270     0072                     	ds	1
   271     0073                     ?_lcd_string:
   272     0073                     lcd_string@str:	
   273                           ; 1 bytes @ 0x3
   274                           
   275     0073                     ??_lcd_initialise:	
   276                           ; 1 bytes @ 0x3
   277                           
   278                           
   279                           ; 1 bytes @ 0x3
   280     0073                     	ds	1
   281     0074                     ___awmod@counter:
   282     0074                     ??_lcd_string:	
   283                           ; 1 bytes @ 0x4
   284                           
   285     0074                     ??___awmod:	
   286                           ; 1 bytes @ 0x4
   287                           
   288                           
   289                           ; 1 bytes @ 0x4
   290     0074                     	ds	1
   291     0075                     ___awmod@sign:
   292                           
   293                           ; 1 bytes @ 0x5
   294     0075                     	ds	1
   295     0076                     main@estado:
   296     0076                     ??_main:	
   297                           ; 1 bytes @ 0x6
   298                           
   299                           
   300                           ; 1 bytes @ 0x6
   301     0076                     	ds	1
   302                           
   303                           	psect	maintext
   304     078E                     __pmaintext:	
   305 ;;
   306 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   307 ;;
   308 ;; *************** function _main *****************
   309 ;; Defined at:
   310 ;;		line 51 in file "codigo.c"
   311 ;; Parameters:    Size  Location     Type
   312 ;;		None
   313 ;; Auto vars:     Size  Location     Type
   314 ;;  estado          1    6[COMMON] unsigned char 
   315 ;; Return value:  Size  Location     Type
   316 ;;                  1    wreg      void 
   317 ;; Registers used:
   318 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   319 ;; Tracked objects:
   320 ;;		On entry : B00/0
   321 ;;		On exit  : 0/0
   322 ;;		Unchanged: 0/0
   323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   324 ;;      Params:         0       0       0       0       0
   325 ;;      Locals:         1       0       0       0       0
   326 ;;      Temps:          0       0       0       0       0
   327 ;;      Totals:         1       0       0       0       0
   328 ;;Total ram usage:        1 bytes
   329 ;; Hardware stack levels required when called: 2
   330 ;; This function calls:
   331 ;;		___awmod
   332 ;;		_debounce
   333 ;;		_lcd_command
   334 ;;		_lcd_initialise
   335 ;;		_lcd_string
   336 ;; This function is called by:
   337 ;;		Startup code after reset
   338 ;; This function uses a non-reentrant model
   339 ;;
   340                           
   341     078E                     _main:	
   342                           ;psect for function _main
   343                           
   344     078E                     l736:	
   345                           ;incstack = 0
   346                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   347                           
   348                           
   349                           ;codigo.c: 52:                 lcd_command(0x01);
   350     078E  1683               	bsf	3,5	;RP0=1, select bank1
   351     078F  1303               	bcf	3,6	;RP1=0, select bank1
   352     0790  0189               	clrf	9	;volatile
   353                           
   354                           ;codigo.c: 53: 
   355     0791  0188               	clrf	8	;volatile
   356     0792                     l738:
   357                           
   358                           ;codigo.c: 54:                 switch (estado) {
   359     0792  3001               	movlw	1
   360     0793  0086               	movwf	6	;volatile
   361     0794                     l740:
   362                           
   363                           ;codigo.c: 56:                         lcd_command(0x80);
   364     0794  120A  118A  2702  120A  118A  	fcall	_lcd_initialise
   365     0799                     l742:
   366                           
   367                           ;codigo.c: 58:                         break;
   368     0799  01F6               	clrf	main@estado
   369     079A                     l744:
   370                           
   371                           ;codigo.c: 61:                         lcd_string((const unsigned char *)"a2095920");
   372     079A  1283               	bcf	3,5	;RP0=0, select bank0
   373     079B  1303               	bcf	3,6	;RP1=0, select bank0
   374     079C  1C06               	btfss	6,0	;volatile
   375     079D  2F9F               	goto	u241
   376     079E  2FA0               	goto	u240
   377     079F                     u241:
   378     079F  2F9A               	goto	l744
   379     07A0                     u240:
   380     07A0                     l746:
   381                           
   382                           ;codigo.c: 62:                         break;
   383     07A0  120A  118A  26CC  120A  118A  	fcall	_debounce
   384     07A5                     l748:
   385                           
   386                           ;codigo.c: 64:                         lcd_command(0x01);
   387     07A5  1283               	bcf	3,5	;RP0=0, select bank0
   388     07A6  1303               	bcf	3,6	;RP1=0, select bank0
   389     07A7  1C06               	btfss	6,0	;volatile
   390     07A8  2FAA               	goto	u251
   391     07A9  2FAB               	goto	u250
   392     07AA                     u251:
   393     07AA  2F9A               	goto	l744
   394     07AB                     u250:
   395     07AB                     l750:
   396                           
   397                           ;codigo.c: 65:                         break;
   398     07AB  3003               	movlw	3
   399     07AC  00F0               	movwf	___awmod@divisor
   400     07AD  3000               	movlw	0
   401     07AE  00F1               	movwf	___awmod@divisor+1
   402     07AF  0876               	movf	main@estado,w
   403     07B0  3E01               	addlw	1
   404     07B1  00F2               	movwf	___awmod@dividend
   405     07B2  3000               	movlw	0
   406     07B3  1803               	skipnc
   407     07B4  3001               	movlw	1
   408     07B5  00F3               	movwf	___awmod@dividend+1
   409     07B6  120A  118A  2737  120A  118A  	fcall	___awmod
   410     07BB  0870               	movf	?___awmod,w
   411     07BC  00F6               	movwf	main@estado
   412                           
   413                           ;codigo.c: 66:                 }
   414     07BD  3001               	movlw	1
   415     07BE  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   416                           
   417                           ;codigo.c: 68:                 while (PORTBbits.RB0 == 1) {
   418     07C3  2FE7               	goto	l764
   419     07C4                     l752:
   420                           
   421                           ;codigo.c: 70:                 }
   422     07C4  3080               	movlw	128
   423     07C5  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   424     07CA                     l754:
   425                           
   426                           ;codigo.c: 71:             }
   427     07CA  300A               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   428     07CB  00F3               	movwf	lcd_string@str
   429     07CC  120A  118A  271B  120A  118A  	fcall	_lcd_string
   430                           
   431                           ;codigo.c: 72:         }
   432     07D1  2FF2               	goto	l45
   433     07D2                     l756:
   434                           
   435                           ;codigo.c: 74: }
   436     07D2  30C0               	movlw	192
   437     07D3  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   438     07D8                     l758:
   439     07D8  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   440     07D9  00F3               	movwf	lcd_string@str
   441     07DA  120A  118A  271B  120A  118A  	fcall	_lcd_string
   442     07DF  2FF2               	goto	l45
   443     07E0                     l760:
   444     07E0  3001               	movlw	1
   445     07E1  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   446     07E6  2FF2               	goto	l45
   447     07E7                     l764:
   448     07E7  0876               	movf	main@estado,w
   449                           
   450                           ; Switch size 1, requested type "simple"
   451                           ; Number of cases is 3, Range of values is 1 to 3
   452                           ; switch strategies available:
   453                           ; Name         Instructions Cycles
   454                           ; simple_byte           10     6 (average)
   455                           ; direct_byte           20    11 (fixed)
   456                           ; jumptable            263     9 (fixed)
   457                           ;	Chosen strategy is simple_byte
   458     07E8  3A01               	xorlw	1	; case 1
   459     07E9  1903               	skipnz
   460     07EA  2FC4               	goto	l752
   461     07EB  3A03               	xorlw	3	; case 2
   462     07EC  1903               	skipnz
   463     07ED  2FD2               	goto	l756
   464     07EE  3A01               	xorlw	1	; case 3
   465     07EF  1903               	skipnz
   466     07F0  2FE0               	goto	l760
   467     07F1  2FF2               	goto	l45
   468     07F2                     l45:
   469     07F2  1283               	bcf	3,5	;RP0=0, select bank0
   470     07F3  1303               	bcf	3,6	;RP1=0, select bank0
   471     07F4  1806               	btfsc	6,0	;volatile
   472     07F5  2FF7               	goto	u261
   473     07F6  2FF8               	goto	u260
   474     07F7                     u261:
   475     07F7  2FF2               	goto	l45
   476     07F8                     u260:
   477     07F8  2F9A               	goto	l744
   478     07F9  120A  118A  2800   	ljmp	start
   479     07FC                     __end_of_main:
   480                           
   481                           	psect	text1
   482     071B                     __ptext1:	
   483 ;; *************** function _lcd_string *****************
   484 ;; Defined at:
   485 ;;		line 34 in file "codigo.c"
   486 ;; Parameters:    Size  Location     Type
   487 ;;  str             1    3[COMMON] PTR const unsigned char 
   488 ;;		 -> STR_2(9), STR_1(6), 
   489 ;; Auto vars:     Size  Location     Type
   490 ;;		None
   491 ;; Return value:  Size  Location     Type
   492 ;;                  1    wreg      void 
   493 ;; Registers used:
   494 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   495 ;; Tracked objects:
   496 ;;		On entry : 0/0
   497 ;;		On exit  : 0/0
   498 ;;		Unchanged: 0/0
   499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   500 ;;      Params:         1       0       0       0       0
   501 ;;      Locals:         0       0       0       0       0
   502 ;;      Temps:          0       0       0       0       0
   503 ;;      Totals:         1       0       0       0       0
   504 ;;Total ram usage:        1 bytes
   505 ;; Hardware stack levels used: 1
   506 ;; Hardware stack levels required when called: 1
   507 ;; This function calls:
   508 ;;		_lcd_data
   509 ;; This function is called by:
   510 ;;		_main
   511 ;; This function uses a non-reentrant model
   512 ;;
   513                           
   514     071B                     _lcd_string:	
   515                           ;psect for function _lcd_string
   516                           
   517     071B                     l690:	
   518                           ;incstack = 0
   519                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   520                           
   521                           
   522                           ;codigo.c: 35: }
   523     071B  2F2A               	goto	l696
   524     071C                     l692:
   525                           
   526                           ;codigo.c: 36: 
   527     071C  0873               	movf	lcd_string@str,w
   528     071D  0084               	movwf	4
   529     071E  120A  118A  2003  120A  118A  	fcall	stringdir
   530     0723  120A  118A  26EE  120A  118A  	fcall	_lcd_data
   531     0728                     l694:
   532     0728  3001               	movlw	1
   533     0729  07F3               	addwf	lcd_string@str,f
   534     072A                     l696:
   535                           
   536                           ;codigo.c: 35: }
   537     072A  0873               	movf	lcd_string@str,w
   538     072B  0084               	movwf	4
   539     072C  120A  118A  2003  120A  118A  	fcall	stringdir
   540     0731  3A00               	xorlw	0
   541     0732  1D03               	skipz
   542     0733  2F35               	goto	u141
   543     0734  2F36               	goto	u140
   544     0735                     u141:
   545     0735  2F1C               	goto	l692
   546     0736                     u140:
   547     0736                     l26:
   548     0736  0008               	return
   549     0737                     __end_of_lcd_string:
   550                           
   551                           	psect	text2
   552     06EE                     __ptext2:	
   553 ;; *************** function _lcd_data *****************
   554 ;; Defined at:
   555 ;;		line 18 in file "codigo.c"
   556 ;; Parameters:    Size  Location     Type
   557 ;;  data            1    wreg     unsigned char 
   558 ;; Auto vars:     Size  Location     Type
   559 ;;  data            1    2[COMMON] unsigned char 
   560 ;; Return value:  Size  Location     Type
   561 ;;                  1    wreg      void 
   562 ;; Registers used:
   563 ;;		wreg
   564 ;; Tracked objects:
   565 ;;		On entry : 0/0
   566 ;;		On exit  : 0/0
   567 ;;		Unchanged: 0/0
   568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   569 ;;      Params:         0       0       0       0       0
   570 ;;      Locals:         1       0       0       0       0
   571 ;;      Temps:          2       0       0       0       0
   572 ;;      Totals:         3       0       0       0       0
   573 ;;Total ram usage:        3 bytes
   574 ;; Hardware stack levels used: 1
   575 ;; This function calls:
   576 ;;		Nothing
   577 ;; This function is called by:
   578 ;;		_lcd_string
   579 ;; This function uses a non-reentrant model
   580 ;;
   581                           
   582     06EE                     _lcd_data:	
   583                           ;psect for function _lcd_data
   584                           
   585                           
   586                           ;incstack = 0
   587                           ; Regs used in _lcd_data: [wreg]
   588                           ;lcd_data@data stored from wreg
   589     06EE  00F2               	movwf	lcd_data@data
   590     06EF                     l594:
   591                           
   592                           ;codigo.c: 19: 
   593     06EF  0872               	movf	lcd_data@data,w
   594     06F0  1283               	bcf	3,5	;RP0=0, select bank0
   595     06F1  1303               	bcf	3,6	;RP1=0, select bank0
   596     06F2  0088               	movwf	8	;volatile
   597     06F3                     l596:
   598                           
   599                           ;codigo.c: 20: void lcd_string(const unsigned char *str) {
   600     06F3  1409               	bsf	9,0	;volatile
   601     06F4                     l598:
   602                           
   603                           ;codigo.c: 21:     while (*str) {
   604     06F4  1489               	bsf	9,1	;volatile
   605                           
   606                           ;codigo.c: 22:         lcd_data(*str++);
   607     06F5  3021               	movlw	33
   608     06F6  00F1               	movwf	??_lcd_data+1
   609     06F7  3076               	movlw	118
   610     06F8  00F0               	movwf	??_lcd_data
   611     06F9                     u277:
   612     06F9  0BF0               	decfsz	??_lcd_data,f
   613     06FA  2EF9               	goto	u277
   614     06FB  0BF1               	decfsz	??_lcd_data+1,f
   615     06FC  2EF9               	goto	u277
   616     06FD  0000               	nop
   617     06FE                     l600:
   618                           
   619                           ;codigo.c: 23:     }
   620     06FE  1283               	bcf	3,5	;RP0=0, select bank0
   621     06FF  1303               	bcf	3,6	;RP1=0, select bank0
   622     0700  1089               	bcf	9,1	;volatile
   623     0701                     l17:
   624     0701  0008               	return
   625     0702                     __end_of_lcd_data:
   626                           
   627                           	psect	text3
   628     0702                     __ptext3:	
   629 ;; *************** function _lcd_initialise *****************
   630 ;; Defined at:
   631 ;;		line 40 in file "codigo.c"
   632 ;; Parameters:    Size  Location     Type
   633 ;;		None
   634 ;; Auto vars:     Size  Location     Type
   635 ;;		None
   636 ;; Return value:  Size  Location     Type
   637 ;;                  1    wreg      void 
   638 ;; Registers used:
   639 ;;		wreg, status,2, status,0, pclath, cstack
   640 ;; Tracked objects:
   641 ;;		On entry : 0/0
   642 ;;		On exit  : 0/0
   643 ;;		Unchanged: 0/0
   644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   645 ;;      Params:         0       0       0       0       0
   646 ;;      Locals:         0       0       0       0       0
   647 ;;      Temps:          0       0       0       0       0
   648 ;;      Totals:         0       0       0       0       0
   649 ;;Total ram usage:        0 bytes
   650 ;; Hardware stack levels used: 1
   651 ;; Hardware stack levels required when called: 1
   652 ;; This function calls:
   653 ;;		_lcd_command
   654 ;; This function is called by:
   655 ;;		_main
   656 ;; This function uses a non-reentrant model
   657 ;;
   658                           
   659     0702                     _lcd_initialise:	
   660                           ;psect for function _lcd_initialise
   661                           
   662     0702                     l618:	
   663                           ;incstack = 0
   664                           ; Regs used in _lcd_initialise: [wreg+status,2+status,0+pclath+cstack]
   665                           
   666                           
   667                           ;codigo.c: 41: 
   668     0702  3038               	movlw	56
   669     0703  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   670                           
   671                           ;codigo.c: 42:     lcd_initialise();
   672     0708  3006               	movlw	6
   673     0709  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   674                           
   675                           ;codigo.c: 43: 
   676     070E  300C               	movlw	12
   677     070F  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   678                           
   679                           ;codigo.c: 44:     unsigned char estado = 0;
   680     0714  3001               	movlw	1
   681     0715  120A  118A  26DA  120A  118A  	fcall	_lcd_command
   682     071A                     l29:
   683     071A  0008               	return
   684     071B                     __end_of_lcd_initialise:
   685                           
   686                           	psect	text4
   687     06DA                     __ptext4:	
   688 ;; *************** function _lcd_command *****************
   689 ;; Defined at:
   690 ;;		line 26 in file "codigo.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;  cmd             1    wreg     unsigned char 
   693 ;; Auto vars:     Size  Location     Type
   694 ;;  cmd             1    2[COMMON] unsigned char 
   695 ;; Return value:  Size  Location     Type
   696 ;;                  1    wreg      void 
   697 ;; Registers used:
   698 ;;		wreg
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   704 ;;      Params:         0       0       0       0       0
   705 ;;      Locals:         1       0       0       0       0
   706 ;;      Temps:          2       0       0       0       0
   707 ;;      Totals:         3       0       0       0       0
   708 ;;Total ram usage:        3 bytes
   709 ;; Hardware stack levels used: 1
   710 ;; This function calls:
   711 ;;		Nothing
   712 ;; This function is called by:
   713 ;;		_lcd_initialise
   714 ;;		_main
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718     06DA                     _lcd_command:	
   719                           ;psect for function _lcd_command
   720                           
   721                           
   722                           ;incstack = 0
   723                           ; Regs used in _lcd_command: [wreg]
   724                           ;lcd_command@cmd stored from wreg
   725     06DA  00F2               	movwf	lcd_command@cmd
   726     06DB                     l602:
   727                           
   728                           ;codigo.c: 27:     lcd_command(0x38);
   729     06DB  0872               	movf	lcd_command@cmd,w
   730     06DC  1283               	bcf	3,5	;RP0=0, select bank0
   731     06DD  1303               	bcf	3,6	;RP1=0, select bank0
   732     06DE  0088               	movwf	8	;volatile
   733     06DF                     l604:
   734                           
   735                           ;codigo.c: 28:     lcd_command(0x06);
   736     06DF  1009               	bcf	9,0	;volatile
   737     06E0                     l606:
   738                           
   739                           ;codigo.c: 29:     lcd_command(0x0C);
   740     06E0  1489               	bsf	9,1	;volatile
   741                           
   742                           ;codigo.c: 30:     lcd_command(0x01);
   743     06E1  3021               	movlw	33
   744     06E2  00F1               	movwf	??_lcd_command+1
   745     06E3  3076               	movlw	118
   746     06E4  00F0               	movwf	??_lcd_command
   747     06E5                     u287:
   748     06E5  0BF0               	decfsz	??_lcd_command,f
   749     06E6  2EE5               	goto	u287
   750     06E7  0BF1               	decfsz	??_lcd_command+1,f
   751     06E8  2EE5               	goto	u287
   752     06E9  0000               	nop
   753     06EA                     l608:
   754                           
   755                           ;codigo.c: 31: }
   756     06EA  1283               	bcf	3,5	;RP0=0, select bank0
   757     06EB  1303               	bcf	3,6	;RP1=0, select bank0
   758     06EC  1089               	bcf	9,1	;volatile
   759     06ED                     l20:
   760     06ED  0008               	return
   761     06EE                     __end_of_lcd_command:
   762                           
   763                           	psect	text5
   764     06CC                     __ptext5:	
   765 ;; *************** function _debounce *****************
   766 ;; Defined at:
   767 ;;		line 47 in file "codigo.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;		None
   770 ;; Auto vars:     Size  Location     Type
   771 ;;		None
   772 ;; Return value:  Size  Location     Type
   773 ;;                  1    wreg      void 
   774 ;; Registers used:
   775 ;;		wreg
   776 ;; Tracked objects:
   777 ;;		On entry : 0/0
   778 ;;		On exit  : 0/0
   779 ;;		Unchanged: 0/0
   780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   781 ;;      Params:         0       0       0       0       0
   782 ;;      Locals:         0       0       0       0       0
   783 ;;      Temps:          3       0       0       0       0
   784 ;;      Totals:         3       0       0       0       0
   785 ;;Total ram usage:        3 bytes
   786 ;; Hardware stack levels used: 1
   787 ;; This function calls:
   788 ;;		Nothing
   789 ;; This function is called by:
   790 ;;		_main
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794     06CC                     _debounce:	
   795                           ;psect for function _debounce
   796                           
   797     06CC                     l620:	
   798                           ;incstack = 0
   799                           ; Regs used in _debounce: [wreg]
   800                           
   801                           
   802                           ;codigo.c: 48:             debounce();
   803     06CC  3002               	movlw	2
   804     06CD  00F2               	movwf	??_debounce+2
   805     06CE  3045               	movlw	69
   806     06CF  00F1               	movwf	??_debounce+1
   807     06D0  30A9               	movlw	169
   808     06D1  00F0               	movwf	??_debounce
   809     06D2                     u297:
   810     06D2  0BF0               	decfsz	??_debounce,f
   811     06D3  2ED2               	goto	u297
   812     06D4  0BF1               	decfsz	??_debounce+1,f
   813     06D5  2ED2               	goto	u297
   814     06D6  0BF2               	decfsz	??_debounce+2,f
   815     06D7  2ED2               	goto	u297
   816     06D8  2ED9               	nop2
   817     06D9                     l32:
   818     06D9  0008               	return
   819     06DA                     __end_of_debounce:
   820                           
   821                           	psect	text6
   822     0737                     __ptext6:	
   823 ;; *************** function ___awmod *****************
   824 ;; Defined at:
   825 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
   826 ;; Parameters:    Size  Location     Type
   827 ;;  divisor         2    0[COMMON] int 
   828 ;;  dividend        2    2[COMMON] int 
   829 ;; Auto vars:     Size  Location     Type
   830 ;;  sign            1    5[COMMON] unsigned char 
   831 ;;  counter         1    4[COMMON] unsigned char 
   832 ;; Return value:  Size  Location     Type
   833 ;;                  2    0[COMMON] int 
   834 ;; Registers used:
   835 ;;		wreg, status,2, status,0
   836 ;; Tracked objects:
   837 ;;		On entry : 0/0
   838 ;;		On exit  : 0/0
   839 ;;		Unchanged: 0/0
   840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   841 ;;      Params:         4       0       0       0       0
   842 ;;      Locals:         2       0       0       0       0
   843 ;;      Temps:          0       0       0       0       0
   844 ;;      Totals:         6       0       0       0       0
   845 ;;Total ram usage:        6 bytes
   846 ;; Hardware stack levels used: 1
   847 ;; This function calls:
   848 ;;		Nothing
   849 ;; This function is called by:
   850 ;;		_main
   851 ;; This function uses a non-reentrant model
   852 ;;
   853                           
   854     0737                     ___awmod:	
   855                           ;psect for function ___awmod
   856                           
   857     0737                     l698:	
   858                           ;incstack = 0
   859                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   860                           
   861     0737  01F5               	clrf	___awmod@sign
   862     0738                     l700:
   863     0738  1FF3               	btfss	___awmod@dividend+1,7
   864     0739  2F3B               	goto	u151
   865     073A  2F3C               	goto	u150
   866     073B                     u151:
   867     073B  2F43               	goto	l706
   868     073C                     u150:
   869     073C                     l702:
   870     073C  09F2               	comf	___awmod@dividend,f
   871     073D  09F3               	comf	___awmod@dividend+1,f
   872     073E  0AF2               	incf	___awmod@dividend,f
   873     073F  1903               	skipnz
   874     0740  0AF3               	incf	___awmod@dividend+1,f
   875     0741                     l704:
   876     0741  3001               	movlw	1
   877     0742  00F5               	movwf	___awmod@sign
   878     0743                     l706:
   879     0743  1FF1               	btfss	___awmod@divisor+1,7
   880     0744  2F46               	goto	u161
   881     0745  2F47               	goto	u160
   882     0746                     u161:
   883     0746  2F4C               	goto	l710
   884     0747                     u160:
   885     0747                     l708:
   886     0747  09F0               	comf	___awmod@divisor,f
   887     0748  09F1               	comf	___awmod@divisor+1,f
   888     0749  0AF0               	incf	___awmod@divisor,f
   889     074A  1903               	skipnz
   890     074B  0AF1               	incf	___awmod@divisor+1,f
   891     074C                     l710:
   892     074C  0870               	movf	___awmod@divisor,w
   893     074D  0471               	iorwf	___awmod@divisor+1,w
   894     074E  1903               	btfsc	3,2
   895     074F  2F51               	goto	u171
   896     0750  2F52               	goto	u170
   897     0751                     u171:
   898     0751  2F7F               	goto	l728
   899     0752                     u170:
   900     0752                     l712:
   901     0752  3001               	movlw	1
   902     0753  00F4               	movwf	___awmod@counter
   903     0754  2F5E               	goto	l718
   904     0755                     l714:
   905     0755  3001               	movlw	1
   906     0756                     u185:
   907     0756  1003               	clrc
   908     0757  0DF0               	rlf	___awmod@divisor,f
   909     0758  0DF1               	rlf	___awmod@divisor+1,f
   910     0759  3EFF               	addlw	-1
   911     075A  1D03               	skipz
   912     075B  2F56               	goto	u185
   913     075C                     l716:
   914     075C  3001               	movlw	1
   915     075D  07F4               	addwf	___awmod@counter,f
   916     075E                     l718:
   917     075E  1FF1               	btfss	___awmod@divisor+1,7
   918     075F  2F61               	goto	u191
   919     0760  2F62               	goto	u190
   920     0761                     u191:
   921     0761  2F55               	goto	l714
   922     0762                     u190:
   923     0762                     l720:
   924     0762  0871               	movf	___awmod@divisor+1,w
   925     0763  0273               	subwf	___awmod@dividend+1,w
   926     0764  1D03               	skipz
   927     0765  2F68               	goto	u205
   928     0766  0870               	movf	___awmod@divisor,w
   929     0767  0272               	subwf	___awmod@dividend,w
   930     0768                     u205:
   931     0768  1C03               	skipc
   932     0769  2F6B               	goto	u201
   933     076A  2F6C               	goto	u200
   934     076B                     u201:
   935     076B  2F72               	goto	l724
   936     076C                     u200:
   937     076C                     l722:
   938     076C  0870               	movf	___awmod@divisor,w
   939     076D  02F2               	subwf	___awmod@dividend,f
   940     076E  0871               	movf	___awmod@divisor+1,w
   941     076F  1C03               	skipc
   942     0770  03F3               	decf	___awmod@dividend+1,f
   943     0771  02F3               	subwf	___awmod@dividend+1,f
   944     0772                     l724:
   945     0772  3001               	movlw	1
   946     0773                     u215:
   947     0773  1003               	clrc
   948     0774  0CF1               	rrf	___awmod@divisor+1,f
   949     0775  0CF0               	rrf	___awmod@divisor,f
   950     0776  3EFF               	addlw	-1
   951     0777  1D03               	skipz
   952     0778  2F73               	goto	u215
   953     0779                     l726:
   954     0779  3001               	movlw	1
   955     077A  02F4               	subwf	___awmod@counter,f
   956     077B  1D03               	btfss	3,2
   957     077C  2F7E               	goto	u221
   958     077D  2F7F               	goto	u220
   959     077E                     u221:
   960     077E  2F62               	goto	l720
   961     077F                     u220:
   962     077F                     l728:
   963     077F  0875               	movf	___awmod@sign,w
   964     0780  1903               	btfsc	3,2
   965     0781  2F83               	goto	u231
   966     0782  2F84               	goto	u230
   967     0783                     u231:
   968     0783  2F89               	goto	l732
   969     0784                     u230:
   970     0784                     l730:
   971     0784  09F2               	comf	___awmod@dividend,f
   972     0785  09F3               	comf	___awmod@dividend+1,f
   973     0786  0AF2               	incf	___awmod@dividend,f
   974     0787  1903               	skipnz
   975     0788  0AF3               	incf	___awmod@dividend+1,f
   976     0789                     l732:
   977     0789  0873               	movf	___awmod@dividend+1,w
   978     078A  00F1               	movwf	?___awmod+1
   979     078B  0872               	movf	___awmod@dividend,w
   980     078C  00F0               	movwf	?___awmod
   981     078D                     l302:
   982     078D  0008               	return
   983     078E                     __end_of___awmod:
   984     0002                     ___latbits      equ	2
   985     007E                     btemp           set	126	;btemp
   986     007E                     wtemp0          set	126
   987                           
   988                           	psect	config
   989                           
   990                           ;Config register CONFIG @ 0x2007
   991                           ;	Oscillator Selection bits
   992                           ;	FOSC = HS, HS oscillator
   993                           ;	Watchdog Timer Enable bit
   994                           ;	WDTE = OFF, WDT disabled
   995                           ;	Power-up Timer Enable bit
   996                           ;	PWRTE = OFF, PWRT disabled
   997                           ;	FLASH Program Memory Code Protection bits
   998                           ;	CP = OFF, Code protection off
   999                           ;	Brown-out Reset Enable bit
  1000                           ;	BOREN = OFF, BOR disabled
  1001                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  1002                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  1003                           ;	Data EE Memory Code Protection
  1004                           ;	CPD = OFF, Code Protection off
  1005                           ;	FLASH Program Memory Write Enable
  1006                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  1007                           ;	In-Circuit Debugger Mode bit
  1008                           ;	DEBUG = 0x1, unprogrammed default
  1009     2007                     	org	8199
  1010     2007  3DBA               	dw	15802

Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_string@str	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_1(CODE[6]), STR_2(CODE[9]), 


Critical Paths under _main in COMMON

    _main->___awmod
    _lcd_string->_lcd_data
    _lcd_initialise->_lcd_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     436
                                              6 COMMON     1     1      0
                            ___awmod
                           _debounce
                        _lcd_command
                     _lcd_initialise
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           1     0      1      62
                                              3 COMMON     1     0      1
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_initialise                                       0     0      0      15
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _debounce                                             3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     298
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   _debounce
   _lcd_command
   _lcd_initialise
     _lcd_command
   _lcd_string
     _lcd_data

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14      7       7     50.0%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       7      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Tue Nov 26 14:52:18 2024

                      pc 0002             lcd_data@data 0072                       l20 06ED  
                     l32 06D9                       l17 0701                       l26 0736  
                     l29 071A                       l45 07F2                       fsr 0004  
                    l302 078D                      l600 06FE                      l602 06DB  
                    l700 0738                      l620 06CC                      l604 06DF  
                    l710 074C                      l702 073C                      l606 06E0  
                    l720 0762                      l712 0752                      l704 0741  
                    l608 06EA                      l730 0784                      l722 076C  
                    l714 0755                      l706 0743                      l618 0702  
                    l732 0789                      l724 0772                      l716 075C  
                    l708 0747                      l740 0794                      l726 0779  
                    l718 075E                      l750 07AB                      l742 0799  
                    l728 077F                      l760 07E0                      l752 07C4  
                    l744 079A                      l736 078E                      l594 06EF  
                    l690 071B                      l754 07CA                      l746 07A0  
                    l738 0792                      l596 06F3                      l692 071C  
                    l756 07D2                      l764 07E7                      l748 07A5  
                    l598 06F4                      l694 0728                      l758 07D8  
                    l696 072A                      l698 0737                      u200 076C  
                    u201 076B                      u220 077F                      u140 0736  
                    u221 077E                      u205 0768                      u141 0735  
                    u230 0784                      u150 073C                      u231 0783  
                    u215 0773                      u151 073B                      u160 0747  
                    u240 07A0                      u161 0746                      u241 079F  
                    u170 0752                      u250 07AB                      u171 0751  
                    u251 07AA                      u260 07F8                      u261 07F7  
                    u190 0762                      u191 0761                      u185 0756  
                    u277 06F9                      u287 06E5                      u297 06D2  
                    fsr0 0004             ___awmod@sign 0075                     STR_1 0012  
                   STR_2 0009                     _main 078E                     btemp 007E  
                   start 0000                    ?_main 0070          __end_of___awmod 078E  
                  _PORTD 0008                    _TRISB 0086                    _TRISD 0088  
                  _TRISE 0089                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 07FC  
                 ??_main 0076           lcd_command@cmd 0072         __end_of_debounce 06DA  
       __end_of_lcd_data 0702                ??___awmod 0074          ___awmod@divisor 0070  
        ___awmod@counter 0074         ??_lcd_initialise 0073            lcd_string@str 0073  
__end_of__initialization 07FC           __pcstackCOMMON 0070               __pmaintext 078E  
              ?_debounce 0070                ?_lcd_data 0070               _lcd_string 071B  
             __stringtab 0003                  ___awmod 0737                  __ptext1 071B  
                __ptext2 06EE                  __ptext3 0702                  __ptext4 06DA  
                __ptext5 06CC                  __ptext6 0737         ___awmod@dividend 0072  
             ??_debounce 0070               ??_lcd_data 0070     end_of_initialization 07FC  
              _PORTBbits 0006                _PORTEbits 0009              ?_lcd_string 0073  
             main@estado 0076            ??_lcd_command 0070      start_initialization 07FC  
    __end_of_lcd_command 06EE                ___latbits 0002                 ?___awmod 0070  
              __pstrings 0003              _lcd_command 06DA              __stringbase 0008  
           ??_lcd_string 0074       __end_of_lcd_string 0737       __end_of__stringtab 0009  
               _debounce 06CC                 _lcd_data 06EE           _lcd_initialise 0702  
 __end_of_lcd_initialise 071B                stringcode 0003                 stringdir 0003  
               stringtab 0003          ?_lcd_initialise 0070             ?_lcd_command 0070  
