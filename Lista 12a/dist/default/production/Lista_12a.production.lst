

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Feb 17 16:39:26 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20     0000                     
    21                           ; Generated 12/10/2023 GMT
    22                           ; 
    23                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F877 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55     0004                     fsr             equ	4
    56     0004                     fsr0            equ	4
    57     0000                     indf            equ	0
    58     0000                     indf0           equ	0
    59     0002                     pc              equ	2
    60     0002                     pcl             equ	2
    61     000A                     pclath          equ	10
    62     0003                     status          equ	3
    63     0000                     INDF            equ	0	;# 
    64     0001                     TMR0            equ	1	;# 
    65     0002                     PCL             equ	2	;# 
    66     0003                     STATUS          equ	3	;# 
    67     0004                     FSR             equ	4	;# 
    68     0005                     PORTA           equ	5	;# 
    69     0006                     PORTB           equ	6	;# 
    70     0007                     PORTC           equ	7	;# 
    71     0008                     PORTD           equ	8	;# 
    72     0009                     PORTE           equ	9	;# 
    73     000A                     PCLATH          equ	10	;# 
    74     000B                     INTCON          equ	11	;# 
    75     000C                     PIR1            equ	12	;# 
    76     000D                     PIR2            equ	13	;# 
    77     000E                     TMR1            equ	14	;# 
    78     000E                     TMR1L           equ	14	;# 
    79     000F                     TMR1H           equ	15	;# 
    80     0010                     T1CON           equ	16	;# 
    81     0011                     TMR2            equ	17	;# 
    82     0012                     T2CON           equ	18	;# 
    83     0013                     SSPBUF          equ	19	;# 
    84     0014                     SSPCON          equ	20	;# 
    85     0015                     CCPR1           equ	21	;# 
    86     0015                     CCPR1L          equ	21	;# 
    87     0016                     CCPR1H          equ	22	;# 
    88     0017                     CCP1CON         equ	23	;# 
    89     0018                     RCSTA           equ	24	;# 
    90     0019                     TXREG           equ	25	;# 
    91     001A                     RCREG           equ	26	;# 
    92     001B                     CCPR2           equ	27	;# 
    93     001B                     CCPR2L          equ	27	;# 
    94     001C                     CCPR2H          equ	28	;# 
    95     001D                     CCP2CON         equ	29	;# 
    96     001E                     ADRESH          equ	30	;# 
    97     001F                     ADCON0          equ	31	;# 
    98     0081                     OPTION_REG      equ	129	;# 
    99     0085                     TRISA           equ	133	;# 
   100     0086                     TRISB           equ	134	;# 
   101     0087                     TRISC           equ	135	;# 
   102     0088                     TRISD           equ	136	;# 
   103     0089                     TRISE           equ	137	;# 
   104     008C                     PIE1            equ	140	;# 
   105     008D                     PIE2            equ	141	;# 
   106     008E                     PCON            equ	142	;# 
   107     0091                     SSPCON2         equ	145	;# 
   108     0092                     PR2             equ	146	;# 
   109     0093                     SSPADD          equ	147	;# 
   110     0094                     SSPSTAT         equ	148	;# 
   111     0098                     TXSTA           equ	152	;# 
   112     0099                     SPBRG           equ	153	;# 
   113     009E                     ADRESL          equ	158	;# 
   114     009F                     ADCON1          equ	159	;# 
   115     010C                     EEDATA          equ	268	;# 
   116     010D                     EEADR           equ	269	;# 
   117     010E                     EEDATH          equ	270	;# 
   118     010F                     EEADRH          equ	271	;# 
   119     018C                     EECON1          equ	396	;# 
   120     018D                     EECON2          equ	397	;# 
   121     0000                     INDF            equ	0	;# 
   122     0001                     TMR0            equ	1	;# 
   123     0002                     PCL             equ	2	;# 
   124     0003                     STATUS          equ	3	;# 
   125     0004                     FSR             equ	4	;# 
   126     0005                     PORTA           equ	5	;# 
   127     0006                     PORTB           equ	6	;# 
   128     0007                     PORTC           equ	7	;# 
   129     0008                     PORTD           equ	8	;# 
   130     0009                     PORTE           equ	9	;# 
   131     000A                     PCLATH          equ	10	;# 
   132     000B                     INTCON          equ	11	;# 
   133     000C                     PIR1            equ	12	;# 
   134     000D                     PIR2            equ	13	;# 
   135     000E                     TMR1            equ	14	;# 
   136     000E                     TMR1L           equ	14	;# 
   137     000F                     TMR1H           equ	15	;# 
   138     0010                     T1CON           equ	16	;# 
   139     0011                     TMR2            equ	17	;# 
   140     0012                     T2CON           equ	18	;# 
   141     0013                     SSPBUF          equ	19	;# 
   142     0014                     SSPCON          equ	20	;# 
   143     0015                     CCPR1           equ	21	;# 
   144     0015                     CCPR1L          equ	21	;# 
   145     0016                     CCPR1H          equ	22	;# 
   146     0017                     CCP1CON         equ	23	;# 
   147     0018                     RCSTA           equ	24	;# 
   148     0019                     TXREG           equ	25	;# 
   149     001A                     RCREG           equ	26	;# 
   150     001B                     CCPR2           equ	27	;# 
   151     001B                     CCPR2L          equ	27	;# 
   152     001C                     CCPR2H          equ	28	;# 
   153     001D                     CCP2CON         equ	29	;# 
   154     001E                     ADRESH          equ	30	;# 
   155     001F                     ADCON0          equ	31	;# 
   156     0081                     OPTION_REG      equ	129	;# 
   157     0085                     TRISA           equ	133	;# 
   158     0086                     TRISB           equ	134	;# 
   159     0087                     TRISC           equ	135	;# 
   160     0088                     TRISD           equ	136	;# 
   161     0089                     TRISE           equ	137	;# 
   162     008C                     PIE1            equ	140	;# 
   163     008D                     PIE2            equ	141	;# 
   164     008E                     PCON            equ	142	;# 
   165     0091                     SSPCON2         equ	145	;# 
   166     0092                     PR2             equ	146	;# 
   167     0093                     SSPADD          equ	147	;# 
   168     0094                     SSPSTAT         equ	148	;# 
   169     0098                     TXSTA           equ	152	;# 
   170     0099                     SPBRG           equ	153	;# 
   171     009E                     ADRESL          equ	158	;# 
   172     009F                     ADCON1          equ	159	;# 
   173     010C                     EEDATA          equ	268	;# 
   174     010D                     EEADR           equ	269	;# 
   175     010E                     EEDATH          equ	270	;# 
   176     010F                     EEADRH          equ	271	;# 
   177     018C                     EECON1          equ	396	;# 
   178     018D                     EECON2          equ	397	;# 
   179                           
   180                           	psect	strings
   181     0003                     __pstrings:
   182     0003                     stringtab:
   183     0003                     __stringtab:
   184     0003                     stringcode:	
   185                           ;	String table - string pointers are 1 byte each
   186                           
   187     0003                     stringdir:
   188     0003  3000               	movlw	high stringdir
   189     0004  008A               	movwf	10
   190     0005  0804               	movf	4,w
   191     0006  0A84               	incf	4,f
   192     0007  0782               	addwf	2,f
   193     0008                     __stringbase:
   194     0008  3400               	retlw	0
   195     0009                     __end_of__stringtab:
   196     0009                     _keypad_map:
   197     0009  3430               	retlw	48
   198     000A  3431               	retlw	49
   199     000B  3432               	retlw	50
   200     000C  3433               	retlw	51
   201     000D  3434               	retlw	52
   202     000E  3435               	retlw	53
   203     000F  3436               	retlw	54
   204     0010  3437               	retlw	55
   205     0011  3438               	retlw	56
   206     0012  3439               	retlw	57
   207     0013  3441               	retlw	65
   208     0014  3442               	retlw	66
   209     0015  3443               	retlw	67
   210     0016  3444               	retlw	68
   211     0017  3445               	retlw	69
   212     0018  3446               	retlw	70
   213     0019                     __end_of_keypad_map:
   214     0019                     _TXREG          set	25
   215     0018                     _RCSTA          set	24
   216     000B                     _INTCONbits     set	11
   217     0006                     _PORTBbits      set	6
   218     0007                     _PORTC          set	7
   219     0008                     _PORTD          set	8
   220     0064                     _TXIF           set	100
   221     0049                     _RE1            set	73
   222     0048                     _RE0            set	72
   223     0099                     _SPBRG          set	153
   224     0098                     _TXSTA          set	152
   225     0081                     _OPTION_REGbits set	129
   226     0087                     _TRISC          set	135
   227     0447                     _TRISD7         set	1095
   228     0446                     _TRISD6         set	1094
   229     0445                     _TRISD5         set	1093
   230     0444                     _TRISD4         set	1092
   231     0449                     _TRISE1         set	1097
   232     0448                     _TRISE0         set	1096
   233     010C                     _EEDATA         set	268
   234     010D                     _EEADR          set	269
   235     018D                     _EECON2         set	397
   236     018C                     _EECON1bits     set	396
   237     0019                     STR_2:
   238     0019  3454               	retlw	84	;'T'
   239     001A  3465               	retlw	101	;'e'
   240     001B  3463               	retlw	99	;'c'
   241     001C  346C               	retlw	108	;'l'
   242     001D  3461               	retlw	97	;'a'
   243     001E  3420               	retlw	32	;' '
   244     001F  3444               	retlw	68	;'D'
   245     0020  3469               	retlw	105	;'i'
   246     0021  3467               	retlw	103	;'g'
   247     0022  342E               	retlw	46	;'.'
   248     0023  3400               	retlw	0
   249     0024                     STR_1:
   250     0024  3444               	retlw	68	;'D'
   251     0025  3469               	retlw	105	;'i'
   252     0026  3467               	retlw	103	;'g'
   253     0027  342E               	retlw	46	;'.'
   254     0028  3420               	retlw	32	;' '
   255     0029  3454               	retlw	84	;'T'
   256     002A  3465               	retlw	101	;'e'
   257     002B  3463               	retlw	99	;'c'
   258     002C  346C               	retlw	108	;'l'
   259     002D  3461               	retlw	97	;'a'
   260     002E  3400               	retlw	0
   261     002F                     STR_3:
   262     002F  3425               	retlw	37	;'%'
   263     0030  3475               	retlw	117	;'u'
   264     0031  3420               	retlw	32	;' '
   265     0032  3400               	retlw	0
   266                           
   267                           	psect	cinit
   268     07FC                     start_initialization:	
   269                           ; #config settings
   270                           
   271     07FC                     __initialization:
   272     07FC                     end_of_initialization:	
   273                           ;End of C runtime variable initialization code
   274                           
   275     07FC                     __end_of__initialization:
   276     07FC  0183               	clrf	3
   277     07FD  120A  118A  2F6B   	ljmp	_main	;jump to C main() function
   278                           
   279                           	psect	cstackCOMMON
   280     0070                     __pcstackCOMMON:
   281     0070                     ?_LCD_Init:
   282     0070                     ?_Keypad_Init:	
   283                           ; 1 bytes @ 0x0
   284                           
   285     0070                     ?_Keypad_GetChar:	
   286                           ; 1 bytes @ 0x0
   287                           
   288     0070                     ?_LCD_Char:	
   289                           ; 1 bytes @ 0x0
   290                           
   291     0070                     ?_EEPROM_Write:	
   292                           ; 1 bytes @ 0x0
   293                           
   294     0070                     ?_LCD_Clear:	
   295                           ; 1 bytes @ 0x0
   296                           
   297     0070                     ?_EEPROM_Read:	
   298                           ; 1 bytes @ 0x0
   299                           
   300     0070                     ?_LCD_Cmd:	
   301                           ; 1 bytes @ 0x0
   302                           
   303     0070                     ?_main:	
   304                           ; 1 bytes @ 0x0
   305                           
   306     0070                     EEPROM_Write@data:	
   307                           ; 1 bytes @ 0x0
   308                           
   309     0070                     EEPROM_Read@address:	
   310                           ; 1 bytes @ 0x0
   311                           
   312     0070                     ??_Keypad_Init:	
   313                           ; 1 bytes @ 0x0
   314                           
   315     0070                     ??_Keypad_GetChar:	
   316                           ; 1 bytes @ 0x0
   317                           
   318     0070                     ??_LCD_Char:	
   319                           ; 1 bytes @ 0x0
   320                           
   321     0070                     ??_EEPROM_Read:	
   322                           ; 1 bytes @ 0x0
   323                           
   324     0070                     ??_LCD_Cmd:	
   325                           ; 1 bytes @ 0x0
   326                           
   327                           
   328                           ; 1 bytes @ 0x0
   329     0070                     	ds	1
   330     0071                     Keypad_GetChar@row:
   331     0071                     EEPROM_Write@address:	
   332                           ; 1 bytes @ 0x1
   333                           
   334     0071                     ??_EEPROM_Write:	
   335                           ; 1 bytes @ 0x1
   336                           
   337                           
   338                           ; 1 bytes @ 0x1
   339     0071                     	ds	1
   340     0072                     LCD_Cmd@cmd:
   341     0072                     LCD_Char@data:	
   342                           ; 1 bytes @ 0x2
   343                           
   344                           
   345                           ; 1 bytes @ 0x2
   346     0072                     	ds	1
   347     0073                     ?_LCD_SetCursor:
   348     0073                     ?_LCD_String:	
   349                           ; 1 bytes @ 0x3
   350                           
   351     0073                     LCD_String@str:	
   352                           ; 1 bytes @ 0x3
   353                           
   354     0073                     LCD_SetCursor@col:	
   355                           ; 1 bytes @ 0x3
   356                           
   357     0073                     ??_LCD_Init:	
   358                           ; 1 bytes @ 0x3
   359                           
   360     0073                     ??_LCD_Clear:	
   361                           ; 1 bytes @ 0x3
   362                           
   363                           
   364                           ; 1 bytes @ 0x3
   365     0073                     	ds	1
   366     0074                     LCD_SetCursor@row:
   367     0074                     ??_LCD_SetCursor:	
   368                           ; 1 bytes @ 0x4
   369                           
   370     0074                     ??_LCD_String:	
   371                           ; 1 bytes @ 0x4
   372                           
   373                           
   374                           ; 1 bytes @ 0x4
   375     0074                     	ds	1
   376     0075                     _LCD_SetCursor$221:
   377                           
   378                           ; 2 bytes @ 0x5
   379     0075                     	ds	2
   380     0077                     LCD_SetCursor@address:
   381                           
   382                           ; 1 bytes @ 0x7
   383     0077                     	ds	1
   384     0078                     ??_main:
   385                           
   386                           ; 1 bytes @ 0x8
   387     0078                     	ds	2
   388     007A                     main@eeprom_value:
   389                           
   390                           ; 1 bytes @ 0xA
   391     007A                     	ds	1
   392     007B                     main@previous_key:
   393                           
   394                           ; 1 bytes @ 0xB
   395     007B                     	ds	1
   396     007C                     main@key_pressed:
   397                           
   398                           ; 1 bytes @ 0xC
   399     007C                     	ds	1
   400                           
   401                           	psect	maintext
   402     076B                     __pmaintext:	
   403 ;;
   404 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   405 ;;
   406 ;; *************** function _main *****************
   407 ;; Defined at:
   408 ;;		line 87 in file "atividade10.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;		None
   411 ;; Auto vars:     Size  Location     Type
   412 ;;  key_pressed     1   12[COMMON] unsigned char 
   413 ;;  previous_key    1   11[COMMON] unsigned char 
   414 ;;  eeprom_value    1   10[COMMON] unsigned char 
   415 ;; Return value:  Size  Location     Type
   416 ;;                  1    wreg      void 
   417 ;; Registers used:
   418 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   419 ;; Tracked objects:
   420 ;;		On entry : B00/0
   421 ;;		On exit  : 0/0
   422 ;;		Unchanged: 0/0
   423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   424 ;;      Params:         0       0       0       0       0
   425 ;;      Locals:         3       0       0       0       0
   426 ;;      Temps:          2       0       0       0       0
   427 ;;      Totals:         5       0       0       0       0
   428 ;;Total ram usage:        5 bytes
   429 ;; Hardware stack levels required when called: 2
   430 ;; This function calls:
   431 ;;		_EEPROM_Read
   432 ;;		_EEPROM_Write
   433 ;;		_Keypad_GetChar
   434 ;;		_Keypad_Init
   435 ;;		_LCD_Char
   436 ;;		_LCD_Clear
   437 ;;		_LCD_Init
   438 ;;		_LCD_SetCursor
   439 ;;		_LCD_String
   440 ;; This function is called by:
   441 ;;		Startup code after reset
   442 ;; This function uses a non-reentrant model
   443 ;;
   444                           
   445     076B                     _main:	
   446                           ;psect for function _main
   447                           
   448     076B                     l1047:	
   449                           ;incstack = 0
   450                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   451                           
   452                           
   453                           ;atividade10.c: 89:     char key_pressed;;atividade10.c: 90:     char previous_key = 0;
   454     076B  01FB               	clrf	main@previous_key
   455     076C                     l1049:
   456                           
   457                           ;atividade10.c: 91:     char eeprom_value;;atividade10.c: 93:     LCD_Init();
   458     076C  120A  118A  2681  120A  118A  	fcall	_LCD_Init
   459     0771                     l1051:
   460                           
   461                           ;atividade10.c: 94:     Keypad_Init();
   462     0771  120A  118A  25A0  120A  118A  	fcall	_Keypad_Init
   463     0776                     l1053:
   464                           
   465                           ;atividade10.c: 97:     {;atividade10.c: 98:         LCD_SetCursor(1, 1);
   466     0776  01F3               	clrf	LCD_SetCursor@col
   467     0777  0AF3               	incf	LCD_SetCursor@col,f
   468     0778  3001               	movlw	1
   469     0779  120A  118A  25F7  120A  118A  	fcall	_LCD_SetCursor
   470     077E                     l1055:
   471                           
   472                           ;atividade10.c: 99:         LCD_String("Dig. Tecla");
   473     077E  301C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   474     077F  00F3               	movwf	LCD_String@str
   475     0780  120A  118A  25DB  120A  118A  	fcall	_LCD_String
   476     0785                     l1057:
   477                           
   478                           ;atividade10.c: 101:         key_pressed = Keypad_GetChar();
   479     0785  120A  118A  26E3  120A  118A  	fcall	_Keypad_GetChar
   480     078A  00FC               	movwf	main@key_pressed
   481     078B                     l1059:
   482                           
   483                           ;atividade10.c: 102:         LCD_SetCursor(2, 1);
   484     078B  01F3               	clrf	LCD_SetCursor@col
   485     078C  0AF3               	incf	LCD_SetCursor@col,f
   486     078D  3002               	movlw	2
   487     078E  120A  118A  25F7  120A  118A  	fcall	_LCD_SetCursor
   488     0793                     l1061:
   489                           
   490                           ;atividade10.c: 103:         LCD_Char(key_pressed);
   491     0793  087C               	movf	main@key_pressed,w
   492     0794  120A  118A  264B  120A  118A  	fcall	_LCD_Char
   493     0799                     l1063:
   494                           
   495                           ;atividade10.c: 105:         if (key_pressed == 'F')
   496     0799  3046               	movlw	70
   497     079A  067C               	xorwf	main@key_pressed,w
   498     079B  1D03               	btfss	3,2
   499     079C  2F9E               	goto	u421
   500     079D  2F9F               	goto	u420
   501     079E                     u421:
   502     079E  2FBB               	goto	l1073
   503     079F                     u420:
   504     079F                     l1065:
   505                           
   506                           ;atividade10.c: 106:         {;atividade10.c: 107:             if (previous_key != 0)
   507     079F  087B               	movf	main@previous_key,w
   508     07A0  1903               	btfsc	3,2
   509     07A1  2FA3               	goto	u431
   510     07A2  2FA4               	goto	u430
   511     07A3                     u431:
   512     07A3  2FB5               	goto	l1071
   513     07A4                     u430:
   514     07A4                     l1067:
   515                           
   516                           ;atividade10.c: 108:             {;atividade10.c: 109:                 EEPROM_Write(0x00
      +                          , (uint8_t)previous_key);
   517     07A4  087B               	movf	main@previous_key,w
   518     07A5  00F0               	movwf	EEPROM_Write@data
   519     07A6  3000               	movlw	0
   520     07A7  120A  118A  25C4  120A  118A  	fcall	_EEPROM_Write
   521     07AC                     l1069:
   522                           
   523                           ;atividade10.c: 110:                 _delay((unsigned long)((10)*(20000000UL/4000.0)));
   524     07AC  3041               	movlw	65
   525     07AD  00F9               	movwf	??_main+1
   526     07AE  30EE               	movlw	238
   527     07AF  00F8               	movwf	??_main
   528     07B0                     u467:
   529     07B0  0BF8               	decfsz	??_main,f
   530     07B1  2FB0               	goto	u467
   531     07B2  0BF9               	decfsz	??_main+1,f
   532     07B3  2FB0               	goto	u467
   533     07B4  0000               	nop
   534     07B5                     l1071:
   535                           
   536                           ;atividade10.c: 112:             LCD_Clear();
   537     07B5  120A  118A  25B4  120A  118A  	fcall	_LCD_Clear
   538                           
   539                           ;atividade10.c: 113:             continue;
   540     07BA  2F76               	goto	l1053
   541     07BB                     l1073:
   542                           
   543                           ;atividade10.c: 116:         if (key_pressed == 'E')
   544     07BB  3045               	movlw	69
   545     07BC  067C               	xorwf	main@key_pressed,w
   546     07BD  1D03               	btfss	3,2
   547     07BE  2FC0               	goto	u441
   548     07BF  2FC1               	goto	u440
   549     07C0                     u441:
   550     07C0  2FF6               	goto	l1093
   551     07C1                     u440:
   552     07C1                     l1075:
   553                           
   554                           ;atividade10.c: 117:         {;atividade10.c: 118:             eeprom_value = EEPROM_Rea
      +                          d(0x00);
   555     07C1  3000               	movlw	0
   556     07C2  120A  118A  25A6  120A  118A  	fcall	_EEPROM_Read
   557     07C7  00FA               	movwf	main@eeprom_value
   558     07C8                     l1077:
   559                           
   560                           ;atividade10.c: 119:             LCD_Clear();
   561     07C8  120A  118A  25B4  120A  118A  	fcall	_LCD_Clear
   562     07CD                     l1079:
   563                           
   564                           ;atividade10.c: 120:             LCD_SetCursor(1, 1);
   565     07CD  01F3               	clrf	LCD_SetCursor@col
   566     07CE  0AF3               	incf	LCD_SetCursor@col,f
   567     07CF  3001               	movlw	1
   568     07D0  120A  118A  25F7  120A  118A  	fcall	_LCD_SetCursor
   569     07D5                     l1081:
   570                           
   571                           ;atividade10.c: 121:             LCD_String("Tecla Dig.");
   572     07D5  3011               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   573     07D6  00F3               	movwf	LCD_String@str
   574     07D7  120A  118A  25DB  120A  118A  	fcall	_LCD_String
   575     07DC                     l1083:
   576                           
   577                           ;atividade10.c: 122:             LCD_SetCursor(2, 1);
   578     07DC  01F3               	clrf	LCD_SetCursor@col
   579     07DD  0AF3               	incf	LCD_SetCursor@col,f
   580     07DE  3002               	movlw	2
   581     07DF  120A  118A  25F7  120A  118A  	fcall	_LCD_SetCursor
   582     07E4                     l1085:
   583                           
   584                           ;atividade10.c: 123:             LCD_Char(eeprom_value);
   585     07E4  087A               	movf	main@eeprom_value,w
   586     07E5  120A  118A  264B  120A  118A  	fcall	_LCD_Char
   587     07EA                     l1087:
   588                           
   589                           ;atividade10.c: 124:             (void)Keypad_GetChar();
   590     07EA  120A  118A  26E3  120A  118A  	fcall	_Keypad_GetChar
   591     07EF                     l1089:
   592                           
   593                           ;atividade10.c: 128:             if(key_pressed != 'E')
   594     07EF  3045               	movlw	69
   595     07F0  067C               	xorwf	main@key_pressed,w
   596     07F1  1903               	btfsc	3,2
   597     07F2  2FF4               	goto	u451
   598     07F3  2FF5               	goto	u450
   599     07F4                     u451:
   600     07F4  2FF6               	goto	l1093
   601     07F5                     u450:
   602     07F5  2FB5               	goto	l1071
   603     07F6                     l1093:
   604                           
   605                           ;atividade10.c: 136:         previous_key = key_pressed;
   606     07F6  087C               	movf	main@key_pressed,w
   607     07F7  00FB               	movwf	main@previous_key
   608     07F8  2F76               	goto	l1053
   609     07F9  120A  118A  2800   	ljmp	start
   610     07FC                     __end_of_main:
   611                           
   612                           	psect	text1
   613     05DB                     __ptext1:	
   614 ;; *************** function _LCD_String *****************
   615 ;; Defined at:
   616 ;;		line 186 in file "atividade10.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;  str             1    3[COMMON] PTR const unsigned char 
   619 ;;		 -> STR_2(11), STR_1(11), 
   620 ;; Auto vars:     Size  Location     Type
   621 ;;		None
   622 ;; Return value:  Size  Location     Type
   623 ;;                  1    wreg      void 
   624 ;; Registers used:
   625 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   626 ;; Tracked objects:
   627 ;;		On entry : 0/0
   628 ;;		On exit  : 0/0
   629 ;;		Unchanged: 0/0
   630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   631 ;;      Params:         1       0       0       0       0
   632 ;;      Locals:         0       0       0       0       0
   633 ;;      Temps:          0       0       0       0       0
   634 ;;      Totals:         1       0       0       0       0
   635 ;;Total ram usage:        1 bytes
   636 ;; Hardware stack levels used: 1
   637 ;; Hardware stack levels required when called: 1
   638 ;; This function calls:
   639 ;;		_LCD_Char
   640 ;; This function is called by:
   641 ;;		_main
   642 ;; This function uses a non-reentrant model
   643 ;;
   644                           
   645     05DB                     _LCD_String:	
   646                           ;psect for function _LCD_String
   647                           
   648     05DB                     l975:	
   649                           ;incstack = 0
   650                           ; Regs used in _LCD_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   651                           
   652                           
   653                           ;atividade10.c: 186: void LCD_String(const char *str);atividade10.c: 187: {;atividade10.
      +                          c: 188:     while(*str) LCD_Char(*str++);
   654     05DB  2DEA               	goto	l981
   655     05DC                     l977:
   656     05DC  0873               	movf	LCD_String@str,w
   657     05DD  0084               	movwf	4
   658     05DE  120A  118A  2003  120A  118A  	fcall	stringdir
   659     05E3  120A  118A  264B  120A  118A  	fcall	_LCD_Char
   660     05E8                     l979:
   661     05E8  3001               	movlw	1
   662     05E9  07F3               	addwf	LCD_String@str,f
   663     05EA                     l981:
   664     05EA  0873               	movf	LCD_String@str,w
   665     05EB  0084               	movwf	4
   666     05EC  120A  118A  2003  120A  118A  	fcall	stringdir
   667     05F1  3A00               	xorlw	0
   668     05F2  1D03               	skipz
   669     05F3  2DF5               	goto	u271
   670     05F4  2DF6               	goto	u270
   671     05F5                     u271:
   672     05F5  2DDC               	goto	l977
   673     05F6                     u270:
   674     05F6                     l99:
   675     05F6  0008               	return
   676     05F7                     __end_of_LCD_String:
   677                           
   678                           	psect	text2
   679     064B                     __ptext2:	
   680 ;; *************** function _LCD_Char *****************
   681 ;; Defined at:
   682 ;;		line 174 in file "atividade10.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;  data            1    wreg     unsigned char 
   685 ;; Auto vars:     Size  Location     Type
   686 ;;  data            1    2[COMMON] unsigned char 
   687 ;; Return value:  Size  Location     Type
   688 ;;                  1    wreg      void 
   689 ;; Registers used:
   690 ;;		wreg, status,2, status,0
   691 ;; Tracked objects:
   692 ;;		On entry : 0/0
   693 ;;		On exit  : 0/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   696 ;;      Params:         0       0       0       0       0
   697 ;;      Locals:         1       0       0       0       0
   698 ;;      Temps:          2       0       0       0       0
   699 ;;      Totals:         3       0       0       0       0
   700 ;;Total ram usage:        3 bytes
   701 ;; Hardware stack levels used: 1
   702 ;; This function calls:
   703 ;;		Nothing
   704 ;; This function is called by:
   705 ;;		_main
   706 ;;		_LCD_String
   707 ;; This function uses a non-reentrant model
   708 ;;
   709                           
   710     064B                     _LCD_Char:	
   711                           ;psect for function _LCD_Char
   712                           
   713                           
   714                           ;incstack = 0
   715                           ; Regs used in _LCD_Char: [wreg+status,2+status,0]
   716                           ;LCD_Char@data stored from wreg
   717     064B  00F2               	movwf	LCD_Char@data
   718     064C                     l713:
   719                           
   720                           ;atividade10.c: 174: void LCD_Char(char data);atividade10.c: 175: {;atividade10.c: 176: 
      +                              RE0 = 1;
   721     064C  1283               	bcf	3,5	;RP0=0, select bank0
   722     064D  1303               	bcf	3,6	;RP1=0, select bank0
   723     064E  1409               	bsf	9,0	;volatile
   724     064F                     l715:
   725                           
   726                           ;atividade10.c: 177:     PORTD = (PORTD & 0x0F) | (data & 0xF0);
   727     064F  30F0               	movlw	240
   728     0650  0572               	andwf	LCD_Char@data,w
   729     0651  00F0               	movwf	??_LCD_Char
   730     0652  0808               	movf	8,w	;volatile
   731     0653  390F               	andlw	15
   732     0654  0470               	iorwf	??_LCD_Char,w
   733     0655  0088               	movwf	8	;volatile
   734     0656                     l717:
   735                           
   736                           ;atividade10.c: 178:     RE1 = 1; _delay((unsigned long)((10)*(20000000UL/4000000.0))); 
      +                          RE1 = 0;
   737     0656  1489               	bsf	9,1	;volatile
   738     0657                     l719:
   739     0657  3010               	movlw	16
   740     0658  00F0               	movwf	??_LCD_Char
   741     0659                     u477:
   742     0659  0BF0               	decfsz	??_LCD_Char,f
   743     065A  2E59               	goto	u477
   744     065B  0000               	nop
   745     065C                     l721:
   746     065C  1283               	bcf	3,5	;RP0=0, select bank0
   747     065D  1303               	bcf	3,6	;RP1=0, select bank0
   748     065E  1089               	bcf	9,1	;volatile
   749     065F                     l723:
   750                           
   751                           ;atividade10.c: 180:     PORTD = (PORTD & 0x0F) | ((data << 4) & 0xF0);
   752     065F  0872               	movf	LCD_Char@data,w
   753     0660  00F0               	movwf	??_LCD_Char
   754     0661  3004               	movlw	4
   755     0662                     u15:
   756     0662  1003               	clrc
   757     0663  0DF0               	rlf	??_LCD_Char,f
   758     0664  3EFF               	addlw	-1
   759     0665  1D03               	skipz
   760     0666  2E62               	goto	u15
   761     0667  30F0               	movlw	240
   762     0668  0570               	andwf	??_LCD_Char,w
   763     0669  00F1               	movwf	??_LCD_Char+1
   764     066A  0808               	movf	8,w	;volatile
   765     066B  390F               	andlw	15
   766     066C  0471               	iorwf	??_LCD_Char+1,w
   767     066D  0088               	movwf	8	;volatile
   768     066E                     l725:
   769                           
   770                           ;atividade10.c: 181:     RE1 = 1; _delay((unsigned long)((10)*(20000000UL/4000000.0))); 
      +                          RE1 = 0;
   771     066E  1489               	bsf	9,1	;volatile
   772     066F  3010               	movlw	16
   773     0670  00F0               	movwf	??_LCD_Char
   774     0671                     u487:
   775     0671  0BF0               	decfsz	??_LCD_Char,f
   776     0672  2E71               	goto	u487
   777     0673  0000               	nop
   778     0674                     l727:
   779     0674  1283               	bcf	3,5	;RP0=0, select bank0
   780     0675  1303               	bcf	3,6	;RP1=0, select bank0
   781     0676  1089               	bcf	9,1	;volatile
   782                           
   783                           ;atividade10.c: 183:     _delay((unsigned long)((2)*(20000000UL/4000.0)));
   784     0677  300D               	movlw	13
   785     0678  00F1               	movwf	??_LCD_Char+1
   786     0679  30FB               	movlw	251
   787     067A  00F0               	movwf	??_LCD_Char
   788     067B                     u497:
   789     067B  0BF0               	decfsz	??_LCD_Char,f
   790     067C  2E7B               	goto	u497
   791     067D  0BF1               	decfsz	??_LCD_Char+1,f
   792     067E  2E7B               	goto	u497
   793     067F  2E80               	nop2
   794     0680                     l93:
   795     0680  0008               	return
   796     0681                     __end_of_LCD_Char:
   797                           
   798                           	psect	text3
   799     05F7                     __ptext3:	
   800 ;; *************** function _LCD_SetCursor *****************
   801 ;; Defined at:
   802 ;;		line 197 in file "atividade10.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;  row             1    wreg     unsigned char 
   805 ;;  col             1    3[COMMON] unsigned char 
   806 ;; Auto vars:     Size  Location     Type
   807 ;;  row             1    4[COMMON] unsigned char 
   808 ;;  address         1    7[COMMON] unsigned char 
   809 ;; Return value:  Size  Location     Type
   810 ;;                  1    wreg      void 
   811 ;; Registers used:
   812 ;;		wreg, status,2, status,0, pclath, cstack
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   818 ;;      Params:         1       0       0       0       0
   819 ;;      Locals:         4       0       0       0       0
   820 ;;      Temps:          0       0       0       0       0
   821 ;;      Totals:         5       0       0       0       0
   822 ;;Total ram usage:        5 bytes
   823 ;; Hardware stack levels used: 1
   824 ;; Hardware stack levels required when called: 1
   825 ;; This function calls:
   826 ;;		_LCD_Cmd
   827 ;; This function is called by:
   828 ;;		_main
   829 ;; This function uses a non-reentrant model
   830 ;;
   831                           
   832     05F7                     _LCD_SetCursor:	
   833                           ;psect for function _LCD_SetCursor
   834                           
   835                           
   836                           ;incstack = 0
   837                           ; Regs used in _LCD_SetCursor: [wreg+status,2+status,0+pclath+cstack]
   838                           ;LCD_SetCursor@row stored from wreg
   839     05F7  00F4               	movwf	LCD_SetCursor@row
   840     05F8                     l967:
   841                           
   842                           ;atividade10.c: 197: void LCD_SetCursor(uint8_t row, uint8_t col);atividade10.c: 198: {;
      +                          atividade10.c: 199:     uint8_t address = (row == 1) ? 0x80 + (col - 1) : 0xC0 + (col - 
      +                          1);
   843     05F8  0374               	decf	LCD_SetCursor@row,w
   844     05F9  1903               	btfsc	3,2
   845     05FA  2DFC               	goto	u261
   846     05FB  2DFD               	goto	u260
   847     05FC                     u261:
   848     05FC  2E05               	goto	l971
   849     05FD                     u260:
   850     05FD                     l969:
   851     05FD  0873               	movf	LCD_SetCursor@col,w
   852     05FE  3EBF               	addlw	191
   853     05FF  00F5               	movwf	_LCD_SetCursor$221
   854     0600  3000               	movlw	0
   855     0601  1803               	skipnc
   856     0602  3001               	movlw	1
   857     0603  00F6               	movwf	_LCD_SetCursor$221+1
   858     0604  2E0C               	goto	l108
   859     0605                     l971:
   860     0605  0873               	movf	LCD_SetCursor@col,w
   861     0606  3E7F               	addlw	127
   862     0607  00F5               	movwf	_LCD_SetCursor$221
   863     0608  3000               	movlw	0
   864     0609  1803               	skipnc
   865     060A  3001               	movlw	1
   866     060B  00F6               	movwf	_LCD_SetCursor$221+1
   867     060C                     l108:
   868     060C  0875               	movf	_LCD_SetCursor$221,w
   869     060D  00F7               	movwf	LCD_SetCursor@address
   870     060E                     l973:
   871                           
   872                           ;atividade10.c: 200:     LCD_Cmd(address);
   873     060E  0877               	movf	LCD_SetCursor@address,w
   874     060F  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
   875     0614                     l109:
   876     0614  0008               	return
   877     0615                     __end_of_LCD_SetCursor:
   878                           
   879                           	psect	text4
   880     0681                     __ptext4:	
   881 ;; *************** function _LCD_Init *****************
   882 ;; Defined at:
   883 ;;		line 141 in file "atividade10.c"
   884 ;; Parameters:    Size  Location     Type
   885 ;;		None
   886 ;; Auto vars:     Size  Location     Type
   887 ;;		None
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      void 
   890 ;; Registers used:
   891 ;;		wreg, status,2, status,0, pclath, cstack
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   897 ;;      Params:         0       0       0       0       0
   898 ;;      Locals:         0       0       0       0       0
   899 ;;      Temps:          2       0       0       0       0
   900 ;;      Totals:         2       0       0       0       0
   901 ;;Total ram usage:        2 bytes
   902 ;; Hardware stack levels used: 1
   903 ;; Hardware stack levels required when called: 1
   904 ;; This function calls:
   905 ;;		_LCD_Cmd
   906 ;; This function is called by:
   907 ;;		_main
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911     0681                     _LCD_Init:	
   912                           ;psect for function _LCD_Init
   913                           
   914     0681                     l943:	
   915                           ;incstack = 0
   916                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
   917                           
   918                           
   919                           ;atividade10.c: 143:     TRISE0 = TRISE1 = TRISD4 = TRISD5 = TRISD6 = TRISD7 = 0;
   920     0681  1683               	bsf	3,5	;RP0=1, select bank1
   921     0682  1303               	bcf	3,6	;RP1=0, select bank1
   922     0683  1388               	bcf	8,7	;volatile
   923     0684  1308               	bcf	8,6	;volatile
   924     0685  1288               	bcf	8,5	;volatile
   925     0686  1208               	bcf	8,4	;volatile
   926     0687  1089               	bcf	9,1	;volatile
   927     0688  1009               	bcf	9,0	;volatile
   928     0689                     l945:
   929                           
   930                           ;atividade10.c: 145:     _delay((unsigned long)((20)*(20000000UL/4000.0)));
   931     0689  3082               	movlw	130
   932     068A  00F4               	movwf	??_LCD_Init+1
   933     068B  30DD               	movlw	221
   934     068C  00F3               	movwf	??_LCD_Init
   935     068D                     u507:
   936     068D  0BF3               	decfsz	??_LCD_Init,f
   937     068E  2E8D               	goto	u507
   938     068F  0BF4               	decfsz	??_LCD_Init+1,f
   939     0690  2E8D               	goto	u507
   940     0691  2E92               	nop2
   941     0692                     l947:
   942                           
   943                           ;atividade10.c: 147:     LCD_Cmd(0x03);
   944     0692  3003               	movlw	3
   945     0693  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
   946     0698                     l949:
   947                           
   948                           ;atividade10.c: 148:     _delay((unsigned long)((5)*(20000000UL/4000.0)));
   949     0698  3021               	movlw	33
   950     0699  00F4               	movwf	??_LCD_Init+1
   951     069A  3076               	movlw	118
   952     069B  00F3               	movwf	??_LCD_Init
   953     069C                     u517:
   954     069C  0BF3               	decfsz	??_LCD_Init,f
   955     069D  2E9C               	goto	u517
   956     069E  0BF4               	decfsz	??_LCD_Init+1,f
   957     069F  2E9C               	goto	u517
   958     06A0  0000               	nop
   959                           
   960                           ;atividade10.c: 149:     LCD_Cmd(0x03);
   961     06A1  3003               	movlw	3
   962     06A2  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
   963     06A7                     l951:
   964                           
   965                           ;atividade10.c: 150:     _delay((unsigned long)((200)*(20000000UL/4000000.0)));
   966     06A7  30C7               	movlw	199
   967     06A8  00F3               	movwf	??_LCD_Init
   968     06A9                     u527:
   969     06A9  2EAA               	nop2
   970     06AA  0BF3               	decfsz	??_LCD_Init,f
   971     06AB  2EA9               	goto	u527
   972     06AC  2EAD               	nop2
   973     06AD  2EAE               	nop2
   974     06AE                     l953:
   975                           
   976                           ;atividade10.c: 151:     LCD_Cmd(0x03);
   977     06AE  3003               	movlw	3
   978     06AF  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
   979                           
   980                           ;atividade10.c: 152:     _delay((unsigned long)((200)*(20000000UL/4000000.0)));
   981     06B4  30C7               	movlw	199
   982     06B5  00F3               	movwf	??_LCD_Init
   983     06B6                     u537:
   984     06B6  2EB7               	nop2
   985     06B7  0BF3               	decfsz	??_LCD_Init,f
   986     06B8  2EB6               	goto	u537
   987     06B9  2EBA               	nop2
   988     06BA  2EBB               	nop2
   989     06BB                     l955:
   990                           
   991                           ;atividade10.c: 154:     LCD_Cmd(0x02);
   992     06BB  3002               	movlw	2
   993     06BC  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
   994     06C1                     l957:
   995                           
   996                           ;atividade10.c: 155:     LCD_Cmd(0x28);
   997     06C1  3028               	movlw	40
   998     06C2  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
   999     06C7                     l959:
  1000                           
  1001                           ;atividade10.c: 156:     LCD_Cmd(0x0C);
  1002     06C7  300C               	movlw	12
  1003     06C8  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
  1004     06CD                     l961:
  1005                           
  1006                           ;atividade10.c: 157:     LCD_Cmd(0x06);
  1007     06CD  3006               	movlw	6
  1008     06CE  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
  1009     06D3                     l963:
  1010                           
  1011                           ;atividade10.c: 158:     LCD_Cmd(0x01);
  1012     06D3  3001               	movlw	1
  1013     06D4  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
  1014     06D9                     l965:
  1015                           
  1016                           ;atividade10.c: 159:     _delay((unsigned long)((2)*(20000000UL/4000.0)));
  1017     06D9  300D               	movlw	13
  1018     06DA  00F4               	movwf	??_LCD_Init+1
  1019     06DB  30FB               	movlw	251
  1020     06DC  00F3               	movwf	??_LCD_Init
  1021     06DD                     u547:
  1022     06DD  0BF3               	decfsz	??_LCD_Init,f
  1023     06DE  2EDD               	goto	u547
  1024     06DF  0BF4               	decfsz	??_LCD_Init+1,f
  1025     06E0  2EDD               	goto	u547
  1026     06E1  2EE2               	nop2
  1027     06E2                     l87:
  1028     06E2  0008               	return
  1029     06E3                     __end_of_LCD_Init:
  1030                           
  1031                           	psect	text5
  1032     05B4                     __ptext5:	
  1033 ;; *************** function _LCD_Clear *****************
  1034 ;; Defined at:
  1035 ;;		line 191 in file "atividade10.c"
  1036 ;; Parameters:    Size  Location     Type
  1037 ;;		None
  1038 ;; Auto vars:     Size  Location     Type
  1039 ;;		None
  1040 ;; Return value:  Size  Location     Type
  1041 ;;                  1    wreg      void 
  1042 ;; Registers used:
  1043 ;;		wreg, status,2, status,0, pclath, cstack
  1044 ;; Tracked objects:
  1045 ;;		On entry : 0/0
  1046 ;;		On exit  : 0/0
  1047 ;;		Unchanged: 0/0
  1048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1049 ;;      Params:         0       0       0       0       0
  1050 ;;      Locals:         0       0       0       0       0
  1051 ;;      Temps:          2       0       0       0       0
  1052 ;;      Totals:         2       0       0       0       0
  1053 ;;Total ram usage:        2 bytes
  1054 ;; Hardware stack levels used: 1
  1055 ;; Hardware stack levels required when called: 1
  1056 ;; This function calls:
  1057 ;;		_LCD_Cmd
  1058 ;; This function is called by:
  1059 ;;		_main
  1060 ;; This function uses a non-reentrant model
  1061 ;;
  1062                           
  1063     05B4                     _LCD_Clear:	
  1064                           ;psect for function _LCD_Clear
  1065                           
  1066     05B4                     l1043:	
  1067                           ;incstack = 0
  1068                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  1069                           
  1070                           
  1071                           ;atividade10.c: 193:     LCD_Cmd(0x01);
  1072     05B4  3001               	movlw	1
  1073     05B5  120A  118A  2615  120A  118A  	fcall	_LCD_Cmd
  1074     05BA                     l1045:
  1075                           
  1076                           ;atividade10.c: 194:     _delay((unsigned long)((2)*(20000000UL/4000.0)));
  1077     05BA  300D               	movlw	13
  1078     05BB  00F4               	movwf	??_LCD_Clear+1
  1079     05BC  30FB               	movlw	251
  1080     05BD  00F3               	movwf	??_LCD_Clear
  1081     05BE                     u557:
  1082     05BE  0BF3               	decfsz	??_LCD_Clear,f
  1083     05BF  2DBE               	goto	u557
  1084     05C0  0BF4               	decfsz	??_LCD_Clear+1,f
  1085     05C1  2DBE               	goto	u557
  1086     05C2  2DC3               	nop2
  1087     05C3                     l102:
  1088     05C3  0008               	return
  1089     05C4                     __end_of_LCD_Clear:
  1090                           
  1091                           	psect	text6
  1092     0615                     __ptext6:	
  1093 ;; *************** function _LCD_Cmd *****************
  1094 ;; Defined at:
  1095 ;;		line 162 in file "atividade10.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;  cmd             1    wreg     unsigned char 
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;  cmd             1    2[COMMON] unsigned char 
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  1    wreg      void 
  1102 ;; Registers used:
  1103 ;;		wreg, status,2, status,0
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1109 ;;      Params:         0       0       0       0       0
  1110 ;;      Locals:         1       0       0       0       0
  1111 ;;      Temps:          2       0       0       0       0
  1112 ;;      Totals:         3       0       0       0       0
  1113 ;;Total ram usage:        3 bytes
  1114 ;; Hardware stack levels used: 1
  1115 ;; This function calls:
  1116 ;;		Nothing
  1117 ;; This function is called by:
  1118 ;;		_LCD_Init
  1119 ;;		_LCD_Clear
  1120 ;;		_LCD_SetCursor
  1121 ;; This function uses a non-reentrant model
  1122 ;;
  1123                           
  1124     0615                     _LCD_Cmd:	
  1125                           ;psect for function _LCD_Cmd
  1126                           
  1127                           
  1128                           ;incstack = 0
  1129                           ; Regs used in _LCD_Cmd: [wreg+status,2+status,0]
  1130                           ;LCD_Cmd@cmd stored from wreg
  1131     0615  00F2               	movwf	LCD_Cmd@cmd
  1132     0616                     l927:
  1133                           
  1134                           ;atividade10.c: 162: void LCD_Cmd(unsigned char cmd);atividade10.c: 163: {;atividade10.c
      +                          : 164:     RE0 = 0;
  1135     0616  1283               	bcf	3,5	;RP0=0, select bank0
  1136     0617  1303               	bcf	3,6	;RP1=0, select bank0
  1137     0618  1009               	bcf	9,0	;volatile
  1138     0619                     l929:
  1139                           
  1140                           ;atividade10.c: 165:     PORTD = (PORTD & 0x0F) | (cmd & 0xF0);
  1141     0619  30F0               	movlw	240
  1142     061A  0572               	andwf	LCD_Cmd@cmd,w
  1143     061B  00F0               	movwf	??_LCD_Cmd
  1144     061C  0808               	movf	8,w	;volatile
  1145     061D  390F               	andlw	15
  1146     061E  0470               	iorwf	??_LCD_Cmd,w
  1147     061F  0088               	movwf	8	;volatile
  1148     0620                     l931:
  1149                           
  1150                           ;atividade10.c: 166:     RE1 = 1; _delay((unsigned long)((10)*(20000000UL/4000000.0))); 
      +                          RE1 = 0;
  1151     0620  1489               	bsf	9,1	;volatile
  1152     0621                     l933:
  1153     0621  3010               	movlw	16
  1154     0622  00F0               	movwf	??_LCD_Cmd
  1155     0623                     u567:
  1156     0623  0BF0               	decfsz	??_LCD_Cmd,f
  1157     0624  2E23               	goto	u567
  1158     0625  0000               	nop
  1159     0626                     l935:
  1160     0626  1283               	bcf	3,5	;RP0=0, select bank0
  1161     0627  1303               	bcf	3,6	;RP1=0, select bank0
  1162     0628  1089               	bcf	9,1	;volatile
  1163     0629                     l937:
  1164                           
  1165                           ;atividade10.c: 168:     PORTD = (PORTD & 0x0F) | ((cmd << 4) & 0xF0);
  1166     0629  0872               	movf	LCD_Cmd@cmd,w
  1167     062A  00F0               	movwf	??_LCD_Cmd
  1168     062B  3004               	movlw	4
  1169     062C                     u255:
  1170     062C  1003               	clrc
  1171     062D  0DF0               	rlf	??_LCD_Cmd,f
  1172     062E  3EFF               	addlw	-1
  1173     062F  1D03               	skipz
  1174     0630  2E2C               	goto	u255
  1175     0631  30F0               	movlw	240
  1176     0632  0570               	andwf	??_LCD_Cmd,w
  1177     0633  00F1               	movwf	??_LCD_Cmd+1
  1178     0634  0808               	movf	8,w	;volatile
  1179     0635  390F               	andlw	15
  1180     0636  0471               	iorwf	??_LCD_Cmd+1,w
  1181     0637  0088               	movwf	8	;volatile
  1182     0638                     l939:
  1183                           
  1184                           ;atividade10.c: 169:     RE1 = 1; _delay((unsigned long)((10)*(20000000UL/4000000.0))); 
      +                          RE1 = 0;
  1185     0638  1489               	bsf	9,1	;volatile
  1186     0639  3010               	movlw	16
  1187     063A  00F0               	movwf	??_LCD_Cmd
  1188     063B                     u577:
  1189     063B  0BF0               	decfsz	??_LCD_Cmd,f
  1190     063C  2E3B               	goto	u577
  1191     063D  0000               	nop
  1192     063E                     l941:
  1193     063E  1283               	bcf	3,5	;RP0=0, select bank0
  1194     063F  1303               	bcf	3,6	;RP1=0, select bank0
  1195     0640  1089               	bcf	9,1	;volatile
  1196                           
  1197                           ;atividade10.c: 171:     _delay((unsigned long)((2)*(20000000UL/4000.0)));
  1198     0641  300D               	movlw	13
  1199     0642  00F1               	movwf	??_LCD_Cmd+1
  1200     0643  30FB               	movlw	251
  1201     0644  00F0               	movwf	??_LCD_Cmd
  1202     0645                     u587:
  1203     0645  0BF0               	decfsz	??_LCD_Cmd,f
  1204     0646  2E45               	goto	u587
  1205     0647  0BF1               	decfsz	??_LCD_Cmd+1,f
  1206     0648  2E45               	goto	u587
  1207     0649  2E4A               	nop2
  1208     064A                     l90:
  1209     064A  0008               	return
  1210     064B                     __end_of_LCD_Cmd:
  1211                           
  1212                           	psect	text7
  1213     05A0                     __ptext7:	
  1214 ;; *************** function _Keypad_Init *****************
  1215 ;; Defined at:
  1216 ;;		line 212 in file "atividade10.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;		None
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;		None
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      void 
  1223 ;; Registers used:
  1224 ;;		None
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1230 ;;      Params:         0       0       0       0       0
  1231 ;;      Locals:         0       0       0       0       0
  1232 ;;      Temps:          0       0       0       0       0
  1233 ;;      Totals:         0       0       0       0       0
  1234 ;;Total ram usage:        0 bytes
  1235 ;; Hardware stack levels used: 1
  1236 ;; This function calls:
  1237 ;;		Nothing
  1238 ;; This function is called by:
  1239 ;;		_main
  1240 ;; This function uses a non-reentrant model
  1241 ;;
  1242                           
  1243     05A0                     _Keypad_Init:	
  1244                           ;psect for function _Keypad_Init
  1245                           
  1246     05A0                     l773:	
  1247                           ;incstack = 0
  1248                           ; Regs used in _Keypad_Init: []
  1249                           
  1250                           
  1251                           ;atividade10.c: 214:     TRISC = 0xF0;
  1252     05A0  30F0               	movlw	240
  1253     05A1  1683               	bsf	3,5	;RP0=1, select bank1
  1254     05A2  1303               	bcf	3,6	;RP1=0, select bank1
  1255     05A3  0087               	movwf	7	;volatile
  1256                           
  1257                           ;atividade10.c: 215:     OPTION_REGbits.nRBPU = 0;
  1258     05A4  1381               	bcf	1,7	;volatile
  1259     05A5                     l114:
  1260     05A5  0008               	return
  1261     05A6                     __end_of_Keypad_Init:
  1262                           
  1263                           	psect	text8
  1264     06E3                     __ptext8:	
  1265 ;; *************** function _Keypad_GetChar *****************
  1266 ;; Defined at:
  1267 ;;		line 218 in file "atividade10.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;		None
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;  row             1    1[COMMON] unsigned char 
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  1    wreg      unsigned char 
  1274 ;; Registers used:
  1275 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1276 ;; Tracked objects:
  1277 ;;		On entry : 0/0
  1278 ;;		On exit  : 0/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1281 ;;      Params:         0       0       0       0       0
  1282 ;;      Locals:         1       0       0       0       0
  1283 ;;      Temps:          1       0       0       0       0
  1284 ;;      Totals:         2       0       0       0       0
  1285 ;;Total ram usage:        2 bytes
  1286 ;; Hardware stack levels used: 2
  1287 ;; This function calls:
  1288 ;;		Nothing
  1289 ;; This function is called by:
  1290 ;;		_main
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294     06E3                     _Keypad_GetChar:	
  1295                           ;psect for function _Keypad_GetChar
  1296                           
  1297     06E3                     l117:	
  1298                           ;incstack = 0
  1299                           ; Regs used in _Keypad_GetChar: [wreg-fsr0h+status,2+status,0+pclath]
  1300                           ;atividade10.c: 220:     while(1)
  1301                           
  1302     06E3                     l983:
  1303                           
  1304                           ;atividade10.c: 221:     {;atividade10.c: 222:         for(uint8_t row = 0; row < 4; row
      +                          ++)
  1305     06E3  01F1               	clrf	Keypad_GetChar@row
  1306     06E4                     l985:
  1307     06E4  3004               	movlw	4
  1308     06E5  0271               	subwf	Keypad_GetChar@row,w
  1309     06E6  1C03               	skipc
  1310     06E7  2EE9               	goto	u281
  1311     06E8  2EEA               	goto	u280
  1312     06E9                     u281:
  1313     06E9  2EEB               	goto	l989
  1314     06EA                     u280:
  1315     06EA  2EE3               	goto	l117
  1316     06EB                     l989:
  1317                           
  1318                           ;atividade10.c: 223:         {;atividade10.c: 224:             PORTC = ~(1 << row);
  1319     06EB  3001               	movlw	1
  1320     06EC  00F0               	movwf	??_Keypad_GetChar
  1321     06ED  0A71               	incf	Keypad_GetChar@row,w
  1322     06EE  2EF1               	goto	u294
  1323     06EF                     u295:
  1324     06EF  1003               	clrc
  1325     06F0  0DF0               	rlf	??_Keypad_GetChar,f
  1326     06F1                     u294:
  1327     06F1  3EFF               	addlw	-1
  1328     06F2  1D03               	skipz
  1329     06F3  2EEF               	goto	u295
  1330     06F4  0870               	movf	??_Keypad_GetChar,w
  1331     06F5  3AFF               	xorlw	255
  1332     06F6  1283               	bcf	3,5	;RP0=0, select bank0
  1333     06F7  1303               	bcf	3,6	;RP1=0, select bank0
  1334     06F8  0087               	movwf	7	;volatile
  1335     06F9                     l991:
  1336                           
  1337                           ;atividade10.c: 225:             _delay((unsigned long)((50)*(20000000UL/4000000.0)));
  1338     06F9  3053               	movlw	83
  1339     06FA  00F0               	movwf	??_Keypad_GetChar
  1340     06FB                     u597:
  1341     06FB  0BF0               	decfsz	??_Keypad_GetChar,f
  1342     06FC  2EFB               	goto	u597
  1343     06FD                     l993:
  1344                           
  1345                           ;atividade10.c: 227:             if(PORTBbits.RB0 == 0) { while(PORTBbits.RB0==0); retur
      +                          n keypad_map[row][0]; }
  1346     06FD  1283               	bcf	3,5	;RP0=0, select bank0
  1347     06FE  1303               	bcf	3,6	;RP1=0, select bank0
  1348     06FF  1806               	btfsc	6,0	;volatile
  1349     0700  2F02               	goto	u301
  1350     0701  2F03               	goto	u300
  1351     0702                     u301:
  1352     0702  2F19               	goto	l120
  1353     0703                     u300:
  1354     0703                     l121:
  1355     0703  1C06               	btfss	6,0	;volatile
  1356     0704  2F06               	goto	u311
  1357     0705  2F07               	goto	u310
  1358     0706                     u311:
  1359     0706  2F03               	goto	l121
  1360     0707                     u310:
  1361     0707                     l997:
  1362     0707  0871               	movf	Keypad_GetChar@row,w
  1363     0708  00F0               	movwf	??_Keypad_GetChar
  1364     0709  3001               	movlw	1
  1365     070A                     u325:
  1366     070A  1003               	clrc
  1367     070B  0DF0               	rlf	??_Keypad_GetChar,f
  1368     070C  3EFF               	addlw	-1
  1369     070D  1D03               	skipz
  1370     070E  2F0A               	goto	u325
  1371     070F  1003               	clrc
  1372     0710  0D70               	rlf	??_Keypad_GetChar,w
  1373     0711  3E01               	addlw	low ((_keypad_map-__stringbase)| (0+32768))
  1374     0712  0084               	movwf	4
  1375     0713  120A  118A  2003  120A  118A  	fcall	stringdir
  1376     0718  2F6A               	goto	l124
  1377     0719                     l120:
  1378                           
  1379                           ;atividade10.c: 228:             if(PORTBbits.RB1 == 0) { while(PORTBbits.RB1==0); retur
      +                          n keypad_map[row][1]; }
  1380     0719  1886               	btfsc	6,1	;volatile
  1381     071A  2F1C               	goto	u331
  1382     071B  2F1D               	goto	u330
  1383     071C                     u331:
  1384     071C  2F33               	goto	l125
  1385     071D                     u330:
  1386     071D                     l126:
  1387     071D  1C86               	btfss	6,1	;volatile
  1388     071E  2F20               	goto	u341
  1389     071F  2F21               	goto	u340
  1390     0720                     u341:
  1391     0720  2F1D               	goto	l126
  1392     0721                     u340:
  1393     0721                     l1003:
  1394     0721  0871               	movf	Keypad_GetChar@row,w
  1395     0722  00F0               	movwf	??_Keypad_GetChar
  1396     0723  3001               	movlw	1
  1397     0724                     u355:
  1398     0724  1003               	clrc
  1399     0725  0DF0               	rlf	??_Keypad_GetChar,f
  1400     0726  3EFF               	addlw	-1
  1401     0727  1D03               	skipz
  1402     0728  2F24               	goto	u355
  1403     0729  1003               	clrc
  1404     072A  0D70               	rlf	??_Keypad_GetChar,w
  1405     072B  3E02               	addlw	low (((_keypad_map-__stringbase)| (0+32768)+1))
  1406     072C  0084               	movwf	4
  1407     072D  120A  118A  2003  120A  118A  	fcall	stringdir
  1408     0732  2F6A               	goto	l124
  1409     0733                     l125:
  1410                           
  1411                           ;atividade10.c: 229:             if(PORTBbits.RB2 == 0) { while(PORTBbits.RB2==0); retur
      +                          n keypad_map[row][2]; }
  1412     0733  1906               	btfsc	6,2	;volatile
  1413     0734  2F36               	goto	u361
  1414     0735  2F37               	goto	u360
  1415     0736                     u361:
  1416     0736  2F4D               	goto	l129
  1417     0737                     u360:
  1418     0737                     l130:
  1419     0737  1D06               	btfss	6,2	;volatile
  1420     0738  2F3A               	goto	u371
  1421     0739  2F3B               	goto	u370
  1422     073A                     u371:
  1423     073A  2F37               	goto	l130
  1424     073B                     u370:
  1425     073B                     l1009:
  1426     073B  0871               	movf	Keypad_GetChar@row,w
  1427     073C  00F0               	movwf	??_Keypad_GetChar
  1428     073D  3001               	movlw	1
  1429     073E                     u385:
  1430     073E  1003               	clrc
  1431     073F  0DF0               	rlf	??_Keypad_GetChar,f
  1432     0740  3EFF               	addlw	-1
  1433     0741  1D03               	skipz
  1434     0742  2F3E               	goto	u385
  1435     0743  1003               	clrc
  1436     0744  0D70               	rlf	??_Keypad_GetChar,w
  1437     0745  3E03               	addlw	low (((_keypad_map-__stringbase)| (0+32768)+2))
  1438     0746  0084               	movwf	4
  1439     0747  120A  118A  2003  120A  118A  	fcall	stringdir
  1440     074C  2F6A               	goto	l124
  1441     074D                     l129:
  1442                           
  1443                           ;atividade10.c: 230:             if(PORTBbits.RB3 == 0) { while(PORTBbits.RB3==0); retur
      +                          n keypad_map[row][3]; }
  1444     074D  1986               	btfsc	6,3	;volatile
  1445     074E  2F50               	goto	u391
  1446     074F  2F51               	goto	u390
  1447     0750                     u391:
  1448     0750  2F67               	goto	l1019
  1449     0751                     u390:
  1450     0751                     l134:
  1451     0751  1D86               	btfss	6,3	;volatile
  1452     0752  2F54               	goto	u401
  1453     0753  2F55               	goto	u400
  1454     0754                     u401:
  1455     0754  2F51               	goto	l134
  1456     0755                     u400:
  1457     0755                     l1015:
  1458     0755  0871               	movf	Keypad_GetChar@row,w
  1459     0756  00F0               	movwf	??_Keypad_GetChar
  1460     0757  3001               	movlw	1
  1461     0758                     u415:
  1462     0758  1003               	clrc
  1463     0759  0DF0               	rlf	??_Keypad_GetChar,f
  1464     075A  3EFF               	addlw	-1
  1465     075B  1D03               	skipz
  1466     075C  2F58               	goto	u415
  1467     075D  1003               	clrc
  1468     075E  0D70               	rlf	??_Keypad_GetChar,w
  1469     075F  3E04               	addlw	low (((_keypad_map-__stringbase)| (0+32768)+3))
  1470     0760  0084               	movwf	4
  1471     0761  120A  118A  2003  120A  118A  	fcall	stringdir
  1472     0766  2F6A               	goto	l124
  1473     0767                     l1019:
  1474                           
  1475                           ;atividade10.c: 231:         }
  1476     0767  3001               	movlw	1
  1477     0768  07F1               	addwf	Keypad_GetChar@row,f
  1478     0769  2EE4               	goto	l985
  1479     076A                     l124:
  1480     076A  0008               	return
  1481     076B                     __end_of_Keypad_GetChar:
  1482                           
  1483                           	psect	text9
  1484     05C4                     __ptext9:	
  1485 ;; *************** function _EEPROM_Write *****************
  1486 ;; Defined at:
  1487 ;;		line 236 in file "atividade10.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;  address         1    wreg     unsigned char 
  1490 ;;  data            1    0[COMMON] unsigned char 
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  address         1    1[COMMON] unsigned char 
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  1    wreg      void 
  1495 ;; Registers used:
  1496 ;;		wreg
  1497 ;; Tracked objects:
  1498 ;;		On entry : 0/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1502 ;;      Params:         1       0       0       0       0
  1503 ;;      Locals:         1       0       0       0       0
  1504 ;;      Temps:          0       0       0       0       0
  1505 ;;      Totals:         2       0       0       0       0
  1506 ;;Total ram usage:        2 bytes
  1507 ;; Hardware stack levels used: 1
  1508 ;; This function calls:
  1509 ;;		Nothing
  1510 ;; This function is called by:
  1511 ;;		_main
  1512 ;; This function uses a non-reentrant model
  1513 ;;
  1514                           
  1515     05C4                     _EEPROM_Write:	
  1516                           ;psect for function _EEPROM_Write
  1517                           
  1518                           
  1519                           ;incstack = 0
  1520                           ; Regs used in _EEPROM_Write: [wreg]
  1521                           ;EEPROM_Write@address stored from wreg
  1522     05C4  00F1               	movwf	EEPROM_Write@address
  1523     05C5                     l1023:
  1524                           
  1525                           ;atividade10.c: 236: void EEPROM_Write(uint8_t address, uint8_t data);atividade10.c: 237
      +                          : {;atividade10.c: 239:     EEADR = address;
  1526     05C5  0871               	movf	EEPROM_Write@address,w
  1527     05C6  1283               	bcf	3,5	;RP0=0, select bank2
  1528     05C7  1703               	bsf	3,6	;RP1=1, select bank2
  1529     05C8  008D               	movwf	13	;volatile
  1530                           
  1531                           ;atividade10.c: 240:     EEDATA = data;
  1532     05C9  0870               	movf	EEPROM_Write@data,w
  1533     05CA  008C               	movwf	12	;volatile
  1534     05CB                     l1025:
  1535                           
  1536                           ;atividade10.c: 242:     EECON1bits.EEPGD = 0;
  1537     05CB  1683               	bsf	3,5	;RP0=1, select bank3
  1538     05CC  1703               	bsf	3,6	;RP1=1, select bank3
  1539     05CD  138C               	bcf	12,7	;volsfr
  1540     05CE                     l1027:
  1541                           
  1542                           ;atividade10.c: 243:     EECON1bits.WREN = 1;
  1543     05CE  150C               	bsf	12,2	;volsfr
  1544     05CF                     l1029:
  1545                           
  1546                           ;atividade10.c: 245:     INTCONbits.GIE = 0;
  1547     05CF  138B               	bcf	11,7	;volatile
  1548     05D0                     l1031:
  1549                           
  1550                           ;atividade10.c: 246:     EECON2 = 0x55;
  1551     05D0  3055               	movlw	85
  1552     05D1  008D               	movwf	13	;volsfr
  1553     05D2                     l1033:
  1554                           
  1555                           ;atividade10.c: 247:     EECON2 = 0xAA;
  1556     05D2  30AA               	movlw	170
  1557     05D3  008D               	movwf	13	;volsfr
  1558     05D4                     l1035:
  1559                           
  1560                           ;atividade10.c: 248:     EECON1bits.WR = 1;
  1561     05D4  148C               	bsf	12,1	;volsfr
  1562     05D5                     l1037:
  1563                           
  1564                           ;atividade10.c: 249:     __nop();
  1565     05D5  0000               	nop
  1566     05D6                     l1039:
  1567                           
  1568                           ;atividade10.c: 251:     EECON1bits.WREN = 0;
  1569     05D6  1683               	bsf	3,5	;RP0=1, select bank3
  1570     05D7  1703               	bsf	3,6	;RP1=1, select bank3
  1571     05D8  110C               	bcf	12,2	;volsfr
  1572     05D9                     l1041:
  1573                           
  1574                           ;atividade10.c: 252:     INTCONbits.GIE = 1;
  1575     05D9  178B               	bsf	11,7	;volatile
  1576     05DA                     l141:
  1577     05DA  0008               	return
  1578     05DB                     __end_of_EEPROM_Write:
  1579                           
  1580                           	psect	text10
  1581     05A6                     __ptext10:	
  1582 ;; *************** function _EEPROM_Read *****************
  1583 ;; Defined at:
  1584 ;;		line 255 in file "atividade10.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;  address         1    wreg     unsigned char 
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;  address         1    0[COMMON] unsigned char 
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      unsigned char 
  1591 ;; Registers used:
  1592 ;;		wreg
  1593 ;; Tracked objects:
  1594 ;;		On entry : 0/0
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1598 ;;      Params:         0       0       0       0       0
  1599 ;;      Locals:         1       0       0       0       0
  1600 ;;      Temps:          0       0       0       0       0
  1601 ;;      Totals:         1       0       0       0       0
  1602 ;;Total ram usage:        1 bytes
  1603 ;; Hardware stack levels used: 1
  1604 ;; This function calls:
  1605 ;;		Nothing
  1606 ;; This function is called by:
  1607 ;;		_main
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611     05A6                     _EEPROM_Read:	
  1612                           ;psect for function _EEPROM_Read
  1613                           
  1614                           
  1615                           ;incstack = 0
  1616                           ; Regs used in _EEPROM_Read: [wreg]
  1617                           ;EEPROM_Read@address stored from wreg
  1618     05A6  00F0               	movwf	EEPROM_Read@address
  1619     05A7                     l855:
  1620                           
  1621                           ;atividade10.c: 255: uint8_t EEPROM_Read(uint8_t address);atividade10.c: 256: {;atividad
      +                          e10.c: 257:     EEADR = address;
  1622     05A7  0870               	movf	EEPROM_Read@address,w
  1623     05A8  1283               	bcf	3,5	;RP0=0, select bank2
  1624     05A9  1703               	bsf	3,6	;RP1=1, select bank2
  1625     05AA  008D               	movwf	13	;volatile
  1626     05AB                     l857:
  1627                           
  1628                           ;atividade10.c: 258:     EECON1bits.EEPGD = 0;
  1629     05AB  1683               	bsf	3,5	;RP0=1, select bank3
  1630     05AC  1703               	bsf	3,6	;RP1=1, select bank3
  1631     05AD  138C               	bcf	12,7	;volsfr
  1632     05AE                     l859:
  1633                           
  1634                           ;atividade10.c: 259:     EECON1bits.RD = 1;
  1635     05AE  140C               	bsf	12,0	;volsfr
  1636     05AF                     l861:
  1637                           
  1638                           ;atividade10.c: 260:     __nop();
  1639     05AF  0000               	nop
  1640                           
  1641                           ;atividade10.c: 261:     return EEDATA;
  1642     05B0  1283               	bcf	3,5	;RP0=0, select bank2
  1643     05B1  1703               	bsf	3,6	;RP1=1, select bank2
  1644     05B2  080C               	movf	12,w	;volatile
  1645     05B3                     l144:
  1646     05B3  0008               	return
  1647     05B4                     __end_of_EEPROM_Read:
  1648     0002                     ___latbits      equ	2
  1649     007E                     btemp           set	126	;btemp
  1650     007E                     wtemp0          set	126
  1651                           
  1652                           	psect	config
  1653                           
  1654                           ;Config register CONFIG @ 0x2007
  1655                           ;	Oscillator Selection bits
  1656                           ;	FOSC = HS, HS oscillator
  1657                           ;	Watchdog Timer Enable bit
  1658                           ;	WDTE = OFF, WDT disabled
  1659                           ;	Power-up Timer Enable bit
  1660                           ;	PWRTE = ON, PWRT enabled
  1661                           ;	FLASH Program Memory Code Protection bits
  1662                           ;	CP = OFF, Code protection off
  1663                           ;	Brown-out Reset Enable bit
  1664                           ;	BOREN = ON, BOR enabled
  1665                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  1666                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1667                           ;	Data EE Memory Code Protection
  1668                           ;	CPD = OFF, Code Protection off
  1669                           ;	FLASH Program Memory Write Enable
  1670                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  1671                           ;	In-Circuit Debugger Mode bit
  1672                           ;	DEBUG = 0x1, unprogrammed default
  1673     2007                     	org	8199
  1674     2007  3D72               	dw	15730

Data Sizes:
    Strings     26
    Constant    16
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 10
		 -> uart_enviar_valor@buffer(COMMON[10]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    LCD_String@str	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), STR_2(CODE[11]), 

    S677$buffer	PTR unsigned char  size(1) Largest target is 10
		 -> uart_enviar_valor@buffer(COMMON[10]), 

    S677$source	PTR const unsigned char  size(1) Largest target is 0

    vfprintf$0	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMMON[10]), 

    vfprintf$1	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_3(CODE[4]), 

    vfprintf$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMMON[1]), 


Critical Paths under _main in COMMON

    _main->_LCD_SetCursor
    _LCD_String->_LCD_Char
    _LCD_SetCursor->_LCD_Cmd
    _LCD_Init->_LCD_Cmd
    _LCD_Clear->_LCD_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     808
                                              8 COMMON     5     5      0
                        _EEPROM_Read
                       _EEPROM_Write
                     _Keypad_GetChar
                        _Keypad_Init
                           _LCD_Char
                          _LCD_Clear
                           _LCD_Init
                      _LCD_SetCursor
                         _LCD_String
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           1     0      1      77
                                              3 COMMON     1     0      1
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Char                                             3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_SetCursor                                        5     4      1     182
                                              3 COMMON     5     4      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0      58
                                              3 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            2     2      0      58
                                              3 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0      58
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Keypad_GetChar                                       2     2      0     156
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         2     1      1      52
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read                                          1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM_Read
   _EEPROM_Write
   _Keypad_GetChar
   _Keypad_Init
   _LCD_Char
   _LCD_Clear
     _LCD_Cmd
   _LCD_Init
     _LCD_Cmd
   _LCD_SetCursor
     _LCD_Cmd
   _LCD_String
     _LCD_Char

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     13      13     92.9%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      13      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Feb 17 16:39:26 2025

                      pc 0002                       l90 064A                       l93 0680  
                     l87 06E2                       l99 05F6                       u15 0662  
                     fsr 0004              ?_LCD_String 0073            _LCD_SetCursor 05F7  
                    l102 05C3                      l120 0719                      l121 0703  
                    l130 0737                      l114 05A5                      l124 076A  
                    l108 060C                      l141 05DA                      l125 0733  
                    l117 06E3                      l109 0614                      l134 0751  
                    l126 071D                      l144 05B3                      l129 074D  
                    l721 065C                      l713 064C                      l723 065F  
                    l715 064F                      l725 066E                      l717 0656  
                    l727 0674                      l719 0657                      l931 0620  
                    l861 05AF                      l773 05A0                      l941 063E  
                    l933 0621                      l855 05A7                      l935 0626  
                    l927 0616                      l951 06A7                      l943 0681  
                    l857 05AB                      l937 0629                      l929 0619  
                    l961 06CD                      l953 06AE                      l945 0689  
                    l859 05AE                      l939 0638                      l963 06D3  
                    l955 06BB                      l947 0692                      l971 0605  
                    l965 06D9                      l957 06C1                      l949 0698  
                    l973 060E                      l981 05EA                      l991 06F9  
                    l983 06E3                      l959 06C7                      l967 05F8  
                    l975 05DB                      l993 06FD                      l985 06E4  
                    l969 05FD                      l977 05DC                      l979 05E8  
                    l997 0707                      l989 06EB                      _RE0 0048  
                    _RE1 0049                      u300 0703                      u301 0702  
                    u310 0707                      u311 0706                      u400 0755  
                    u401 0754                      u330 071D                      u331 071C  
                    u340 0721                      u260 05FD                      u420 079F  
                    u341 0720                      u325 070A                      u261 05FC  
                    u421 079E                      u270 05F6                      u430 07A4  
                    u415 0758                      u255 062C                      u271 05F5  
                    u431 07A3                      u360 0737                      u280 06EA  
                    u440 07C1                      u361 0736                      u281 06E9  
                    u441 07C0                      u370 073B                      u450 07F5  
                    u371 073A                      u355 0724                      u507 068D  
                    u451 07F4                      u517 069C                      u390 0751  
                    u294 06F1                      u391 0750                      u295 06EF  
                    u527 06A9                      u385 073E                      u537 06B6  
                    u547 06DD                      u467 07B0                      u557 05BE  
                    u477 0659                      u567 0623                      u487 0671  
                    u577 063B                      u497 067B                      u587 0645  
                    u597 06FB                      fsr0 0004          __end_of_LCD_Cmd 064B  
                   l1003 0721                     l1031 05D0                     l1023 05C5  
                   l1015 0755                     l1041 05D9                     l1033 05D2  
                   l1025 05CB                     l1009 073B                     l1035 05D4  
                   l1027 05CE                     l1019 0767                     l1043 05B4  
                   l1051 0771                     l1037 05D5                     l1029 05CF  
                   l1045 05BA                     l1061 0793                     l1053 0776  
                   l1039 05D6                     l1071 07B5                     l1063 0799  
                   l1055 077E                     l1047 076B                     l1081 07D5  
                   l1065 079F                     l1073 07BB                     l1057 0785  
                   l1049 076C                     l1083 07DC                     l1075 07C1  
                   l1067 07A4                     l1059 078B                     l1085 07E4  
                   l1077 07C8                     l1093 07F6                     l1069 07AC  
                   l1087 07EA                     l1079 07CD                     l1089 07EF  
                   STR_1 0024                     STR_2 0019                     STR_3 002F  
                   _TXIF 0064                     _main 076B                     btemp 007E  
                   start 0000     __end_of_EEPROM_Write 05DB         __end_of_LCD_Char 0681  
       __end_of_LCD_Init 06E3             LCD_Char@data 0072           ?_LCD_SetCursor 0073  
                  ?_main 0070                    _EEADR 010D            ??_Keypad_Init 0070  
                  _RCSTA 0018                    _SPBRG 0099                    _PORTC 0007  
                  _PORTD 0008                    _TRISC 0087                    _TXREG 0019  
                  _TXSTA 0098                    pclath 000A                    status 0003  
                  wtemp0 007E         EEPROM_Write@data 0070          __initialization 07FC  
           __end_of_main 07FC                   ??_main 0078        __end_of_LCD_Clear 05C4  
              ??_LCD_Cmd 0070                   _EEDATA 010C                   _EECON2 018D  
    __end_of_Keypad_Init 05A6                   _TRISE0 0448                   _TRISE1 0449  
                 _TRISD4 0444                   _TRISD5 0445                   _TRISD6 0446  
                 _TRISD7 0447     LCD_SetCursor@address 0077          ??_LCD_SetCursor 0074  
              ?_LCD_Char 0070  __end_of__initialization 07FC                ?_LCD_Init 0070  
         __pcstackCOMMON 0070        _LCD_SetCursor$221 0075             ??_LCD_String 0074  
         _OPTION_REGbits 0081              _Keypad_Init 05A0             _EEPROM_Write 05C4  
       main@eeprom_value 007A               ??_LCD_Char 0070               ??_LCD_Init 0073  
     __end_of_LCD_String 05F7               __pmaintext 076B           _Keypad_GetChar 06E3  
                _LCD_Cmd 0615               __stringtab 0003            LCD_String@str 0073  
 __end_of_Keypad_GetChar 076B                  __ptext1 05DB                  __ptext2 064B  
                __ptext3 05F7                  __ptext4 0681                  __ptext5 05B4  
                __ptext6 0615                  __ptext7 05A0                  __ptext8 06E3  
                __ptext9 05C4               _keypad_map 0009                _LCD_Clear 05B4  
   end_of_initialization 07FC         LCD_SetCursor@col 0073         LCD_SetCursor@row 0074  
          ??_EEPROM_Read 0070          ?_Keypad_GetChar 0070                _PORTBbits 0006  
             ?_LCD_Clear 0070               LCD_Cmd@cmd 0072      __end_of_EEPROM_Read 05B4  
  __end_of_LCD_SetCursor 0615             ?_Keypad_Init 0070      start_initialization 07FC  
               ?_LCD_Cmd 0070                ___latbits 0002              ??_LCD_Clear 0073  
            _EEPROM_Read 05A6                __pstrings 0003                 _LCD_Char 064B  
               _LCD_Init 0681         ??_Keypad_GetChar 0070              __stringbase 0008  
        main@key_pressed 007C               _EECON1bits 018C       __end_of__stringtab 0009  
      Keypad_GetChar@row 0071         main@previous_key 007B                 __ptext10 05A6  
          ?_EEPROM_Write 0070       __end_of_keypad_map 0019               _LCD_String 05DB  
             _INTCONbits 000B           ??_EEPROM_Write 0071             ?_EEPROM_Read 0070  
              stringcode 0003       EEPROM_Read@address 0070                 stringdir 0003  
               stringtab 0003      EEPROM_Write@address 0071  
