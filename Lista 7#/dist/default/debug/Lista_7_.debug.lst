

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Dec 09 15:45:02 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,space=0,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    15                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=3
    20                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=1
    21                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=1
    22                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=1
    23                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=2
    24                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=1
    25                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=1
    26                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=3
    27                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=3
    28                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2,group=3
    29                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2,group=3
    30                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2,group=2
    31                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2,group=2
    32                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    36                           	dabs	1,0x7E,2
    37     0000                     
    38                           ; Generated 12/10/2023 GMT
    39                           ; 
    40                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution. Publication is not required when
    54                           ;        this file is used in an embedded application.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F877 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72     0004                     fsr             equ	4
    73     0004                     fsr0            equ	4
    74     0000                     indf            equ	0
    75     0000                     indf0           equ	0
    76     0002                     pc              equ	2
    77     0002                     pcl             equ	2
    78     000A                     pclath          equ	10
    79     0003                     status          equ	3
    80     0000                     INDF            equ	0	;# 
    81     0001                     TMR0            equ	1	;# 
    82     0002                     PCL             equ	2	;# 
    83     0003                     STATUS          equ	3	;# 
    84     0004                     FSR             equ	4	;# 
    85     0005                     PORTA           equ	5	;# 
    86     0006                     PORTB           equ	6	;# 
    87     0007                     PORTC           equ	7	;# 
    88     0008                     PORTD           equ	8	;# 
    89     0009                     PORTE           equ	9	;# 
    90     000A                     PCLATH          equ	10	;# 
    91     000B                     INTCON          equ	11	;# 
    92     000C                     PIR1            equ	12	;# 
    93     000D                     PIR2            equ	13	;# 
    94     000E                     TMR1            equ	14	;# 
    95     000E                     TMR1L           equ	14	;# 
    96     000F                     TMR1H           equ	15	;# 
    97     0010                     T1CON           equ	16	;# 
    98     0011                     TMR2            equ	17	;# 
    99     0012                     T2CON           equ	18	;# 
   100     0013                     SSPBUF          equ	19	;# 
   101     0014                     SSPCON          equ	20	;# 
   102     0015                     CCPR1           equ	21	;# 
   103     0015                     CCPR1L          equ	21	;# 
   104     0016                     CCPR1H          equ	22	;# 
   105     0017                     CCP1CON         equ	23	;# 
   106     0018                     RCSTA           equ	24	;# 
   107     0019                     TXREG           equ	25	;# 
   108     001A                     RCREG           equ	26	;# 
   109     001B                     CCPR2           equ	27	;# 
   110     001B                     CCPR2L          equ	27	;# 
   111     001C                     CCPR2H          equ	28	;# 
   112     001D                     CCP2CON         equ	29	;# 
   113     001E                     ADRESH          equ	30	;# 
   114     001F                     ADCON0          equ	31	;# 
   115     0081                     OPTION_REG      equ	129	;# 
   116     0085                     TRISA           equ	133	;# 
   117     0086                     TRISB           equ	134	;# 
   118     0087                     TRISC           equ	135	;# 
   119     0088                     TRISD           equ	136	;# 
   120     0089                     TRISE           equ	137	;# 
   121     008C                     PIE1            equ	140	;# 
   122     008D                     PIE2            equ	141	;# 
   123     008E                     PCON            equ	142	;# 
   124     0091                     SSPCON2         equ	145	;# 
   125     0092                     PR2             equ	146	;# 
   126     0093                     SSPADD          equ	147	;# 
   127     0094                     SSPSTAT         equ	148	;# 
   128     0098                     TXSTA           equ	152	;# 
   129     0099                     SPBRG           equ	153	;# 
   130     009E                     ADRESL          equ	158	;# 
   131     009F                     ADCON1          equ	159	;# 
   132     010C                     EEDATA          equ	268	;# 
   133     010D                     EEADR           equ	269	;# 
   134     010E                     EEDATH          equ	270	;# 
   135     010F                     EEADRH          equ	271	;# 
   136     018C                     EECON1          equ	396	;# 
   137     018D                     EECON2          equ	397	;# 
   138     0000                     INDF            equ	0	;# 
   139     0001                     TMR0            equ	1	;# 
   140     0002                     PCL             equ	2	;# 
   141     0003                     STATUS          equ	3	;# 
   142     0004                     FSR             equ	4	;# 
   143     0005                     PORTA           equ	5	;# 
   144     0006                     PORTB           equ	6	;# 
   145     0007                     PORTC           equ	7	;# 
   146     0008                     PORTD           equ	8	;# 
   147     0009                     PORTE           equ	9	;# 
   148     000A                     PCLATH          equ	10	;# 
   149     000B                     INTCON          equ	11	;# 
   150     000C                     PIR1            equ	12	;# 
   151     000D                     PIR2            equ	13	;# 
   152     000E                     TMR1            equ	14	;# 
   153     000E                     TMR1L           equ	14	;# 
   154     000F                     TMR1H           equ	15	;# 
   155     0010                     T1CON           equ	16	;# 
   156     0011                     TMR2            equ	17	;# 
   157     0012                     T2CON           equ	18	;# 
   158     0013                     SSPBUF          equ	19	;# 
   159     0014                     SSPCON          equ	20	;# 
   160     0015                     CCPR1           equ	21	;# 
   161     0015                     CCPR1L          equ	21	;# 
   162     0016                     CCPR1H          equ	22	;# 
   163     0017                     CCP1CON         equ	23	;# 
   164     0018                     RCSTA           equ	24	;# 
   165     0019                     TXREG           equ	25	;# 
   166     001A                     RCREG           equ	26	;# 
   167     001B                     CCPR2           equ	27	;# 
   168     001B                     CCPR2L          equ	27	;# 
   169     001C                     CCPR2H          equ	28	;# 
   170     001D                     CCP2CON         equ	29	;# 
   171     001E                     ADRESH          equ	30	;# 
   172     001F                     ADCON0          equ	31	;# 
   173     0081                     OPTION_REG      equ	129	;# 
   174     0085                     TRISA           equ	133	;# 
   175     0086                     TRISB           equ	134	;# 
   176     0087                     TRISC           equ	135	;# 
   177     0088                     TRISD           equ	136	;# 
   178     0089                     TRISE           equ	137	;# 
   179     008C                     PIE1            equ	140	;# 
   180     008D                     PIE2            equ	141	;# 
   181     008E                     PCON            equ	142	;# 
   182     0091                     SSPCON2         equ	145	;# 
   183     0092                     PR2             equ	146	;# 
   184     0093                     SSPADD          equ	147	;# 
   185     0094                     SSPSTAT         equ	148	;# 
   186     0098                     TXSTA           equ	152	;# 
   187     0099                     SPBRG           equ	153	;# 
   188     009E                     ADRESL          equ	158	;# 
   189     009F                     ADCON1          equ	159	;# 
   190     010C                     EEDATA          equ	268	;# 
   191     010D                     EEADR           equ	269	;# 
   192     010E                     EEDATH          equ	270	;# 
   193     010F                     EEADRH          equ	271	;# 
   194     018C                     EECON1          equ	396	;# 
   195     018D                     EECON2          equ	397	;# 
   196                           
   197                           	psect	idataBANK1
   198     0225                     __pidataBANK1:
   199                           
   200                           ;initializer for main@cursor_pos
   201     0225  3480               	retlw	128
   202                           
   203                           ;initializer for _tecla_anterior
   204     0226  34FF               	retlw	255
   205     0006                     _PORTBbits      set	6
   206     0007                     _PORTCbits      set	7
   207     0009                     _PORTEbits      set	9
   208     0008                     _PORTD          set	8
   209     0086                     _TRISB          set	134
   210     0087                     _TRISC          set	135
   211     0088                     _TRISD          set	136
   212     0089                     _TRISE          set	137
   213                           
   214                           	psect	strings
   215     0003                     __pstrings:
   216     0003                     stringtab:
   217     0003                     __stringtab:
   218     0003                     stringcode:	
   219                           ;	String table - string pointers are 1 byte each
   220                           
   221     0003                     stringdir:
   222     0003  3000               	movlw	high stringdir
   223     0004  008A               	movwf	10
   224     0005  0804               	movf	4,w
   225     0006  0A84               	incf	4,f
   226     0007  0782               	addwf	2,f
   227     0008                     __stringbase:
   228     0008  3400               	retlw	0
   229     0009                     __end_of__stringtab:
   230     0009                     STR_1:
   231     0009  3425               	retlw	37	;'%'
   232     000A  3430               	retlw	48	;'0'
   233     000B  3434               	retlw	52	;'4'
   234     000C  3464               	retlw	100	;'d'
   235     000D  3400               	retlw	0
   236                           
   237                           	psect	cinit
   238     07E2                     start_initialization:	
   239                           ; #config settings
   240                           
   241     07E2                     __initialization:
   242                           
   243                           ; Initialize objects allocated to BANK1
   244     07E2  1683               	bsf	3,5	;RP0=1, select bank1
   245     07E3  1303               	bcf	3,6	;RP1=0, select bank1
   246     07E4  120A  118A  2225  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   247     07E9  00C8               	movwf	__pdataBANK1& (0+127)
   248     07EA  120A  118A  2226  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   249     07EF  00C9               	movwf	(__pdataBANK1+1)& (0+127)
   250                           
   251                           ; Clear objects allocated to BANK1
   252     07F0  1383               	bcf	3,7	;select IRP bank0
   253     07F1  30A0               	movlw	low __pbssBANK1
   254     07F2  0084               	movwf	4
   255     07F3  30C5               	movlw	low (__pbssBANK1+37)
   256     07F4  120A  118A  2227  120A  118A  	fcall	clear_ram0
   257                           
   258                           ; Clear objects allocated to BANK0
   259     07F9  1283               	bcf	3,5	;RP0=0, select bank0
   260     07FA  1303               	bcf	3,6	;RP1=0, select bank0
   261     07FB  01EF               	clrf	__pbssBANK0& (0+127)
   262     07FC                     end_of_initialization:	
   263                           ;End of C runtime variable initialization code
   264                           
   265     07FC                     __end_of__initialization:
   266     07FC  0183               	clrf	3
   267     07FD  120A  118A  2CC3   	ljmp	_main	;jump to C main() function
   268                           
   269                           	psect	bssBANK0
   270     006F                     __pbssBANK0:
   271     006F                     _flags:
   272     006F                     	ds	1
   273                           
   274                           	psect	bssBANK1
   275     00A0                     __pbssBANK1:
   276     00A0                     _width:
   277     00A0                     	ds	2
   278     00A2                     _prec:
   279     00A2                     	ds	2
   280     00A4                     _tecla_pressionada:
   281     00A4                     	ds	1
   282     00A5                     _dbuf:
   283     00A5                     	ds	32
   284                           
   285                           	psect	dataBANK1
   286     00C8                     __pdataBANK1:
   287     00C8                     main@cursor_pos:
   288     00C8                     	ds	1
   289     00C9                     _tecla_anterior:
   290     00C9                     	ds	1
   291                           
   292                           	psect	clrtext
   293     0227                     clear_ram0:	
   294                           ;	Called with FSR containing the base address, and
   295                           ;	W with the last address+1
   296                           
   297     0227  0064               	clrwdt	;clear the watchdog before getting into this loop
   298     0228                     clrloop0:
   299     0228  0180               	clrf	0	;clear RAM location pointed to by FSR
   300     0229  0A84               	incf	4,f	;increment pointer
   301     022A  0604               	xorwf	4,w	;XOR with final address
   302     022B  1903               	btfsc	3,2	;have we reached the end yet?
   303     022C  3400               	retlw	0	;all done for this memory range, return
   304     022D  0604               	xorwf	4,w	;XOR again to restore value
   305     022E  2A28               	goto	clrloop0	;do the next byte
   306                           
   307                           	psect	cstackBANK1
   308     00C5                     __pcstackBANK1:
   309     00C5                     main@i:
   310                           
   311                           ; 2 bytes @ 0x0
   312     00C5                     	ds	2
   313     00C7                     main@tecla:
   314                           
   315                           ; 1 bytes @ 0x2
   316     00C7                     	ds	1
   317                           
   318                           	psect	cstackCOMMON
   319     0070                     __pcstackCOMMON:
   320     0070                     ?_putch:
   321     0070                     ?_lcd_data:	
   322                           ; 1 bytes @ 0x0
   323                           
   324     0070                     ?_lcd_command:	
   325                           ; 1 bytes @ 0x0
   326                           
   327     0070                     ?_lcd_initialise:	
   328                           ; 1 bytes @ 0x0
   329                           
   330     0070                     ?_debounce:	
   331                           ; 1 bytes @ 0x0
   332                           
   333     0070                     ?_teclado:	
   334                           ; 1 bytes @ 0x0
   335                           
   336     0070                     ?_atualiza_lcd:	
   337                           ; 1 bytes @ 0x0
   338                           
   339     0070                     ?_main:	
   340                           ; 1 bytes @ 0x0
   341                           
   342     0070                     ?_fputc:	
   343                           ; 1 bytes @ 0x0
   344                           
   345     0070                     ?___wmul:	
   346                           ; 2 bytes @ 0x0
   347                           
   348     0070                     ?___awdiv:	
   349                           ; 2 bytes @ 0x0
   350                           
   351     0070                     ?___awmod:	
   352                           ; 2 bytes @ 0x0
   353                           
   354     0070                     teclado@tecla:	
   355                           ; 2 bytes @ 0x0
   356                           
   357     0070                     putch@c:	
   358                           ; 1 bytes @ 0x0
   359                           
   360     0070                     ___wmul@multiplier:	
   361                           ; 1 bytes @ 0x0
   362                           
   363     0070                     ___awdiv@divisor:	
   364                           ; 2 bytes @ 0x0
   365                           
   366     0070                     ___awmod@divisor:	
   367                           ; 2 bytes @ 0x0
   368                           
   369     0070                     fputc@c:	
   370                           ; 2 bytes @ 0x0
   371                           
   372     0070                     ??_putch:	
   373                           ; 2 bytes @ 0x0
   374                           
   375     0070                     ??_lcd_data:	
   376                           ; 1 bytes @ 0x0
   377                           
   378     0070                     ??_lcd_command:	
   379                           ; 1 bytes @ 0x0
   380                           
   381     0070                     ??_debounce:	
   382                           ; 1 bytes @ 0x0
   383                           
   384     0070                     ??_teclado:	
   385                           ; 1 bytes @ 0x0
   386                           
   387                           
   388                           ; 1 bytes @ 0x0
   389     0070                     	ds	2
   390     0072                     lcd_data@data:
   391     0072                     lcd_command@cmd:	
   392                           ; 1 bytes @ 0x2
   393                           
   394     0072                     ___wmul@multiplicand:	
   395                           ; 1 bytes @ 0x2
   396                           
   397     0072                     ___awdiv@dividend:	
   398                           ; 2 bytes @ 0x2
   399                           
   400     0072                     ___awmod@dividend:	
   401                           ; 2 bytes @ 0x2
   402                           
   403     0072                     fputc@fp:	
   404                           ; 2 bytes @ 0x2
   405                           
   406                           
   407                           ; 2 bytes @ 0x2
   408     0072                     	ds	1
   409     0073                     ?_lcd_string:
   410     0073                     lcd_string@str:	
   411                           ; 1 bytes @ 0x3
   412                           
   413     0073                     ??_lcd_initialise:	
   414                           ; 1 bytes @ 0x3
   415                           
   416                           
   417                           ; 1 bytes @ 0x3
   418     0073                     	ds	1
   419     0074                     ___awdiv@counter:
   420     0074                     ___awmod@counter:	
   421                           ; 1 bytes @ 0x4
   422                           
   423     0074                     ___wmul@product:	
   424                           ; 1 bytes @ 0x4
   425                           
   426     0074                     ??_fputc:	
   427                           ; 2 bytes @ 0x4
   428                           
   429     0074                     ??_lcd_string:	
   430                           ; 1 bytes @ 0x4
   431                           
   432     0074                     ??___wmul:	
   433                           ; 1 bytes @ 0x4
   434                           
   435     0074                     ??___awdiv:	
   436                           ; 1 bytes @ 0x4
   437                           
   438     0074                     ??___awmod:	
   439                           ; 1 bytes @ 0x4
   440                           
   441                           
   442                           ; 1 bytes @ 0x4
   443     0074                     	ds	1
   444     0075                     ___awdiv@sign:
   445     0075                     ___awmod@sign:	
   446                           ; 1 bytes @ 0x5
   447                           
   448                           
   449                           ; 1 bytes @ 0x5
   450     0075                     	ds	1
   451     0076                     ?_abs:
   452     0076                     ?_read_prec_or_width:	
   453                           ; 2 bytes @ 0x6
   454                           
   455     0076                     read_prec_or_width@fmt:	
   456                           ; 2 bytes @ 0x6
   457                           
   458     0076                     ___awdiv@quotient:	
   459                           ; 1 bytes @ 0x6
   460                           
   461     0076                     abs@a:	
   462                           ; 2 bytes @ 0x6
   463                           
   464                           
   465                           ; 2 bytes @ 0x6
   466     0076                     	ds	1
   467     0077                     read_prec_or_width@ap:
   468                           
   469                           ; 1 bytes @ 0x7
   470     0077                     	ds	1
   471     0078                     read_prec_or_width@c:
   472     0078                     ??_abs:	
   473                           ; 1 bytes @ 0x8
   474                           
   475     0078                     ??_read_prec_or_width:	
   476                           ; 1 bytes @ 0x8
   477                           
   478                           
   479                           ; 1 bytes @ 0x8
   480     0078                     	ds	1
   481     0079                     read_prec_or_width@n:
   482                           
   483                           ; 2 bytes @ 0x9
   484     0079                     	ds	4
   485     007D                     ??_pad:
   486                           
   487                           ; 1 bytes @ 0xD
   488     007D                     	ds	1
   489     007E                     ??_vfprintf:
   490     007E                     ??_main:	
   491                           ; 1 bytes @ 0xE
   492                           
   493     007E                     ??_dtoa:	
   494                           ; 1 bytes @ 0xE
   495                           
   496                           
   497                           	psect	cstackBANK0
   498     0020                     __pcstackBANK0:	
   499                           ; 1 bytes @ 0xE
   500                           
   501     0020                     ?_fputs:
   502     0020                     fputs@s:	
   503                           ; 2 bytes @ 0x0
   504                           
   505                           
   506                           ; 1 bytes @ 0x0
   507     0020                     	ds	1
   508     0021                     fputs@fp:
   509                           
   510                           ; 2 bytes @ 0x1
   511     0021                     	ds	2
   512     0023                     ??_fputs:
   513                           
   514                           ; 1 bytes @ 0x3
   515     0023                     	ds	2
   516     0025                     fputs@c:
   517                           
   518                           ; 1 bytes @ 0x5
   519     0025                     	ds	1
   520     0026                     fputs@i:
   521                           
   522                           ; 2 bytes @ 0x6
   523     0026                     	ds	2
   524     0028                     ?_pad:
   525     0028                     pad@fp:	
   526                           ; 1 bytes @ 0x8
   527                           
   528                           
   529                           ; 2 bytes @ 0x8
   530     0028                     	ds	2
   531     002A                     pad@buf:
   532                           
   533                           ; 1 bytes @ 0xA
   534     002A                     	ds	1
   535     002B                     pad@p:
   536                           
   537                           ; 2 bytes @ 0xB
   538     002B                     	ds	2
   539     002D                     pad@i:
   540                           
   541                           ; 2 bytes @ 0xD
   542     002D                     	ds	2
   543     002F                     ?_dtoa:
   544     002F                     dtoa@fp:	
   545                           ; 1 bytes @ 0xF
   546                           
   547                           
   548                           ; 2 bytes @ 0xF
   549     002F                     	ds	2
   550     0031                     dtoa@d:
   551                           
   552                           ; 2 bytes @ 0x11
   553     0031                     	ds	2
   554     0033                     _dtoa$661:
   555                           
   556                           ; 2 bytes @ 0x13
   557     0033                     	ds	2
   558     0035                     dtoa@p:
   559                           
   560                           ; 1 bytes @ 0x15
   561     0035                     	ds	1
   562     0036                     dtoa@w:
   563                           
   564                           ; 2 bytes @ 0x16
   565     0036                     	ds	2
   566     0038                     dtoa@s:
   567                           
   568                           ; 1 bytes @ 0x18
   569     0038                     	ds	1
   570     0039                     dtoa@i:
   571                           
   572                           ; 2 bytes @ 0x19
   573     0039                     	ds	2
   574     003B                     ?_vfpfcnvrt:
   575     003B                     vfpfcnvrt@fp:	
   576                           ; 1 bytes @ 0x1B
   577                           
   578                           
   579                           ; 2 bytes @ 0x1B
   580     003B                     	ds	2
   581     003D                     vfpfcnvrt@fmt:
   582                           
   583                           ; 1 bytes @ 0x1D
   584     003D                     	ds	1
   585     003E                     vfpfcnvrt@ap:
   586                           
   587                           ; 1 bytes @ 0x1E
   588     003E                     	ds	1
   589     003F                     ??_vfpfcnvrt:
   590                           
   591                           ; 1 bytes @ 0x1F
   592     003F                     	ds	2
   593     0041                     vfpfcnvrt@convarg:
   594                           
   595                           ; 4 bytes @ 0x21
   596     0041                     	ds	4
   597     0045                     vfpfcnvrt@done:
   598                           
   599                           ; 1 bytes @ 0x25
   600     0045                     	ds	1
   601     0046                     vfpfcnvrt@cp:
   602                           
   603                           ; 1 bytes @ 0x26
   604     0046                     	ds	1
   605     0047                     ?_vfprintf:
   606     0047                     vfprintf@fp:	
   607                           ; 2 bytes @ 0x27
   608                           
   609                           
   610                           ; 2 bytes @ 0x27
   611     0047                     	ds	2
   612     0049                     vfprintf@fmt:
   613                           
   614                           ; 1 bytes @ 0x29
   615     0049                     	ds	1
   616     004A                     vfprintf@ap:
   617                           
   618                           ; 1 bytes @ 0x2A
   619     004A                     	ds	1
   620     004B                     vfprintf@cfmt:
   621                           
   622                           ; 1 bytes @ 0x2B
   623     004B                     	ds	1
   624     004C                     ?_sprintf:
   625     004C                     sprintf@s:	
   626                           ; 2 bytes @ 0x2C
   627                           
   628                           
   629                           ; 1 bytes @ 0x2C
   630     004C                     	ds	1
   631     004D                     sprintf@fmt:
   632                           
   633                           ; 1 bytes @ 0x2D
   634     004D                     	ds	3
   635     0050                     ??_sprintf:
   636                           
   637                           ; 1 bytes @ 0x30
   638     0050                     	ds	1
   639     0051                     sprintf@ap:
   640                           
   641                           ; 1 bytes @ 0x31
   642     0051                     	ds	1
   643     0052                     sprintf@f:
   644                           
   645                           ; 11 bytes @ 0x32
   646     0052                     	ds	11
   647     005D                     ??_atualiza_lcd:
   648                           
   649                           ; 1 bytes @ 0x3D
   650     005D                     	ds	2
   651     005F                     atualiza_lcd@buffer:
   652                           
   653                           ; 16 bytes @ 0x3F
   654     005F                     	ds	16
   655                           
   656                           	psect	maintext
   657     04C3                     __pmaintext:	
   658 ;;
   659 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   660 ;;
   661 ;; *************** function _main *****************
   662 ;; Defined at:
   663 ;;		line 133 in file "atividade7.c"
   664 ;; Parameters:    Size  Location     Type
   665 ;;		None
   666 ;; Auto vars:     Size  Location     Type
   667 ;;  i               2    0[BANK1 ] int 
   668 ;;  tecla           1    2[BANK1 ] unsigned char 
   669 ;; Return value:  Size  Location     Type
   670 ;;                  1    wreg      void 
   671 ;; Registers used:
   672 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   673 ;; Tracked objects:
   674 ;;		On entry : B00/0
   675 ;;		On exit  : 0/0
   676 ;;		Unchanged: 0/0
   677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   678 ;;      Params:         0       0       0       0       0
   679 ;;      Locals:         0       0       3       0       0
   680 ;;      Temps:          0       0       0       0       0
   681 ;;      Totals:         0       0       3       0       0
   682 ;;Total ram usage:        3 bytes
   683 ;; Hardware stack levels required when called: 9
   684 ;; This function calls:
   685 ;;		_atualiza_lcd
   686 ;;		_debounce
   687 ;;		_lcd_command
   688 ;;		_lcd_data
   689 ;;		_lcd_initialise
   690 ;;		_teclado
   691 ;; This function is called by:
   692 ;;		Startup code after reset
   693 ;; This function uses a non-reentrant model
   694 ;;
   695                           
   696     04C3                     _main:	
   697                           ;psect for function _main
   698                           
   699     04C3                     l1505:	
   700                           ;incstack = 0
   701 ;; hardware stack exceeded
   702                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   703                           
   704                           
   705                           ;atividade7.c: 135:     TRISE = 0x00;
   706     04C3  1683               	bsf	3,5	;RP0=1, select bank1
   707     04C4  1303               	bcf	3,6	;RP1=0, select bank1
   708     04C5  0189               	clrf	9	;volatile
   709                           
   710                           ;atividade7.c: 136:     TRISD = 0x00;
   711     04C6  0188               	clrf	8	;volatile
   712                           
   713                           ;atividade7.c: 137:     TRISC = 0x00;
   714     04C7  0187               	clrf	7	;volatile
   715     04C8                     l1507:
   716                           
   717                           ;atividade7.c: 138:     TRISB = 0xFF;
   718     04C8  30FF               	movlw	255
   719     04C9  0086               	movwf	6	;volatile
   720     04CA                     l1509:
   721                           
   722                           ;atividade7.c: 140:     lcd_initialise();
   723     04CA  120A  118A  228A  120A  118A  	fcall	_lcd_initialise
   724     04CF                     l1511:
   725                           
   726                           ;atividade7.c: 141:     atualiza_lcd();
   727     04CF  120A  118A  230E  120A  118A  	fcall	_atualiza_lcd
   728     04D4                     l1513:
   729                           
   730                           ;atividade7.c: 144:         unsigned char tecla = teclado();
   731     04D4  120A  118A  253F  120A  118A  	fcall	_teclado
   732     04D9  1683               	bsf	3,5	;RP0=1, select bank1
   733     04DA  1303               	bcf	3,6	;RP1=0, select bank1
   734     04DB  00C7               	movwf	main@tecla^(0+128)
   735     04DC                     l1515:
   736                           
   737                           ;atividade7.c: 146:         static unsigned char cursor_pos = 0x80;;atividade7.c: 149:  
      +                                 for(int i = 0; i < 31; i++ ){
   738     04DC  01C5               	clrf	main@i^(0+128)
   739     04DD  01C6               	clrf	(main@i+1)^(0+128)
   740     04DE                     l1521:
   741                           
   742                           ;atividade7.c: 151:             lcd_command(i);
   743     04DE  1683               	bsf	3,5	;RP0=1, select bank1
   744     04DF  1303               	bcf	3,6	;RP1=0, select bank1
   745     04E0  0845               	movf	main@i^(0+128),w
   746     04E1  120A  118A  224E  120A  118A  	fcall	_lcd_command
   747     04E6                     l1523:
   748                           
   749                           ;atividade7.c: 153:             if(cursor_pos < 16){
   750     04E6  3010               	movlw	16
   751     04E7  1683               	bsf	3,5	;RP0=1, select bank1
   752     04E8  1303               	bcf	3,6	;RP1=0, select bank1
   753     04E9  0248               	subwf	main@cursor_pos^(0+128),w
   754     04EA  1803               	skipnc
   755     04EB  2CED               	goto	u1441
   756     04EC  2CEE               	goto	u1440
   757     04ED                     u1441:
   758     04ED  2D08               	goto	l1537
   759     04EE                     u1440:
   760     04EE                     l1525:
   761                           
   762                           ;atividade7.c: 155:               if (tecla < 10) {
   763     04EE  300A               	movlw	10
   764     04EF  0247               	subwf	main@tecla^(0+128),w
   765     04F0  1803               	skipnc
   766     04F1  2CF3               	goto	u1451
   767     04F2  2CF4               	goto	u1450
   768     04F3                     u1451:
   769     04F3  2CFC               	goto	l1529
   770     04F4                     u1450:
   771     04F4                     l1527:
   772                           
   773                           ;atividade7.c: 156:                     lcd_data(tecla + '0');
   774     04F4  0847               	movf	main@tecla^(0+128),w
   775     04F5  3E30               	addlw	48
   776     04F6  120A  118A  2262  120A  118A  	fcall	_lcd_data
   777                           
   778                           ;atividade7.c: 157:               } else {
   779     04FB  2D03               	goto	l1531
   780     04FC                     l1529:
   781                           
   782                           ;atividade7.c: 159:                     lcd_data(tecla - 10 + 'A');
   783     04FC  0847               	movf	main@tecla^(0+128),w
   784     04FD  3E37               	addlw	55
   785     04FE  120A  118A  2262  120A  118A  	fcall	_lcd_data
   786     0503                     l1531:
   787                           
   788                           ;atividade7.c: 161:               cursor_pos++;
   789     0503  3001               	movlw	1
   790     0504  1683               	bsf	3,5	;RP0=1, select bank1
   791     0505  1303               	bcf	3,6	;RP1=0, select bank1
   792     0506  07C8               	addwf	main@cursor_pos^(0+128),f
   793                           
   794                           ;atividade7.c: 162:                 break;
   795     0507  2D25               	goto	l1545
   796     0508                     l1537:
   797                           
   798                           ;atividade7.c: 168:                     lcd_command(0xC0);
   799     0508  30C0               	movlw	192
   800     0509  120A  118A  224E  120A  118A  	fcall	_lcd_command
   801     050E                     l1539:
   802                           
   803                           ;atividade7.c: 169:                     cursor_pos = 0xC0;
   804     050E  30C0               	movlw	192
   805     050F  1683               	bsf	3,5	;RP0=1, select bank1
   806     0510  1303               	bcf	3,6	;RP1=0, select bank1
   807     0511  00C8               	movwf	main@cursor_pos^(0+128)
   808     0512                     l1541:
   809                           
   810                           ;atividade7.c: 173:         }
   811     0512  3001               	movlw	1
   812     0513  07C5               	addwf	main@i^(0+128),f
   813     0514  1803               	skipnc
   814     0515  0AC6               	incf	(main@i+1)^(0+128),f
   815     0516  3000               	movlw	0
   816     0517  07C6               	addwf	(main@i+1)^(0+128),f
   817     0518                     l1543:
   818     0518  0846               	movf	(main@i+1)^(0+128),w
   819     0519  3A80               	xorlw	128
   820     051A  00FF               	movwf	btemp+1
   821     051B  3080               	movlw	128
   822     051C  027F               	subwf	btemp+1,w
   823     051D  1D03               	skipz
   824     051E  2D21               	goto	u1465
   825     051F  301F               	movlw	31
   826     0520  0245               	subwf	main@i^(0+128),w
   827     0521                     u1465:
   828     0521  1C03               	skipc
   829     0522  2D24               	goto	u1461
   830     0523  2D25               	goto	u1460
   831     0524                     u1461:
   832     0524  2CDE               	goto	l1521
   833     0525                     u1460:
   834     0525                     l1545:
   835                           
   836                           ;atividade7.c: 174:         if (tecla != 0xFF) {
   837     0525  1683               	bsf	3,5	;RP0=1, select bank1
   838     0526  1303               	bcf	3,6	;RP1=0, select bank1
   839     0527  0A47               	incf	main@tecla^(0+128),w
   840     0528  1903               	btfsc	3,2
   841     0529  2D2B               	goto	u1471
   842     052A  2D2C               	goto	u1470
   843     052B                     u1471:
   844     052B  2CD4               	goto	l1513
   845     052C                     u1470:
   846     052C                     l1547:
   847                           
   848                           ;atividade7.c: 175:             debounce();
   849     052C  120A  118A  222F  120A  118A  	fcall	_debounce
   850     0531                     l1549:	
   851                           ;atividade7.c: 176:             while (teclado() != 0xFF);
   852                           
   853     0531  120A  118A  253F  120A  118A  	fcall	_teclado
   854     0536  3AFF               	xorlw	255
   855     0537  1D03               	skipz
   856     0538  2D3A               	goto	u1481
   857     0539  2D3B               	goto	u1480
   858     053A                     u1481:
   859     053A  2D31               	goto	l1549
   860     053B                     u1480:
   861     053B  2CD4               	goto	l1513
   862     053C  120A  118A  2800   	ljmp	start
   863     053F                     __end_of_main:
   864                           
   865                           	psect	text1
   866     053F                     __ptext1:	
   867 ;; *************** function _teclado *****************
   868 ;; Defined at:
   869 ;;		line 62 in file "atividade7.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;		None
   872 ;; Auto vars:     Size  Location     Type
   873 ;;  tecla           1    0[COMMON] unsigned char 
   874 ;; Return value:  Size  Location     Type
   875 ;;                  1    wreg      unsigned char 
   876 ;; Registers used:
   877 ;;		wreg, status,2
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   883 ;;      Params:         0       0       0       0       0
   884 ;;      Locals:         1       0       0       0       0
   885 ;;      Temps:          0       0       0       0       0
   886 ;;      Totals:         1       0       0       0       0
   887 ;;Total ram usage:        1 bytes
   888 ;; Hardware stack levels used: 1
   889 ;; This function calls:
   890 ;;		Nothing
   891 ;; This function is called by:
   892 ;;		_main
   893 ;; This function uses a non-reentrant model
   894 ;;
   895                           
   896     053F                     _teclado:	
   897                           ;psect for function _teclado
   898                           
   899     053F                     l1451:	
   900                           ;incstack = 0
   901                           ; Regs used in _teclado: [wreg+status,2]
   902                           
   903                           
   904                           ;atividade7.c: 63:     unsigned char tecla = 0xFF;
   905     053F  30FF               	movlw	255
   906     0540  00F0               	movwf	teclado@tecla
   907                           
   908                           ;atividade7.c: 65:     PORTCbits.RC0 = 0; PORTCbits.RC1 = 1; PORTCbits.RC2 = 1; PORTCbit
      +                          s.RC3 = 1;
   909     0541  1283               	bcf	3,5	;RP0=0, select bank0
   910     0542  1303               	bcf	3,6	;RP1=0, select bank0
   911     0543  1007               	bcf	7,0	;volatile
   912     0544  1487               	bsf	7,1	;volatile
   913     0545  1507               	bsf	7,2	;volatile
   914     0546  1587               	bsf	7,3	;volatile
   915                           
   916                           ;atividade7.c: 66:     if (PORTBbits.RB0 == 0)
   917     0547  1806               	btfsc	6,0	;volatile
   918     0548  2D4A               	goto	u1281
   919     0549  2D4B               	goto	u1280
   920     054A                     u1281:
   921     054A  2D4F               	goto	l1457
   922     054B                     u1280:
   923     054B                     l1453:
   924                           
   925                           ;atividade7.c: 67:     {;atividade7.c: 68:         tecla = 0;
   926     054B  01F0               	clrf	teclado@tecla
   927     054C                     l1455:
   928                           
   929                           ;atividade7.c: 69:         tecla_pressionada = tecla;
   930     054C  1683               	bsf	3,5	;RP0=1, select bank1
   931     054D  1303               	bcf	3,6	;RP1=0, select bank1
   932     054E  01A4               	clrf	_tecla_pressionada^(0+128)
   933     054F                     l1457:
   934                           
   935                           ;atividade7.c: 72:     if (PORTBbits.RB1 == 0){
   936     054F  1283               	bcf	3,5	;RP0=0, select bank0
   937     0550  1886               	btfsc	6,1	;volatile
   938     0551  2D53               	goto	u1291
   939     0552  2D54               	goto	u1290
   940     0553                     u1291:
   941     0553  2D5A               	goto	l1463
   942     0554                     u1290:
   943     0554                     l1459:
   944                           
   945                           ;atividade7.c: 74:                 tecla = 1;
   946     0554  3001               	movlw	1
   947     0555  00F0               	movwf	teclado@tecla
   948     0556                     l1461:
   949                           
   950                           ;atividade7.c: 75:                 tecla_pressionada = tecla;
   951     0556  3001               	movlw	1
   952     0557  1683               	bsf	3,5	;RP0=1, select bank1
   953     0558  1303               	bcf	3,6	;RP1=0, select bank1
   954     0559  00A4               	movwf	_tecla_pressionada^(0+128)
   955     055A                     l1463:
   956                           
   957                           ;atividade7.c: 77:     if (PORTBbits.RB2 == 0) tecla = 2;
   958     055A  1283               	bcf	3,5	;RP0=0, select bank0
   959     055B  1906               	btfsc	6,2	;volatile
   960     055C  2D5E               	goto	u1301
   961     055D  2D5F               	goto	u1300
   962     055E                     u1301:
   963     055E  2D61               	goto	l47
   964     055F                     u1300:
   965     055F                     l1465:
   966     055F  3002               	movlw	2
   967     0560  00F0               	movwf	teclado@tecla
   968     0561                     l47:
   969                           
   970                           ;atividade7.c: 78:     if (PORTBbits.RB3 == 0) tecla = 3;
   971     0561  1986               	btfsc	6,3	;volatile
   972     0562  2D64               	goto	u1311
   973     0563  2D65               	goto	u1310
   974     0564                     u1311:
   975     0564  2D67               	goto	l48
   976     0565                     u1310:
   977     0565                     l1467:
   978     0565  3003               	movlw	3
   979     0566  00F0               	movwf	teclado@tecla
   980     0567                     l48:
   981                           
   982                           ;atividade7.c: 80:     PORTCbits.RC0 = 1; PORTCbits.RC1 = 0; PORTCbits.RC2 = 1; PORTCbit
      +                          s.RC3 = 1;
   983     0567  1407               	bsf	7,0	;volatile
   984     0568  1087               	bcf	7,1	;volatile
   985     0569  1507               	bsf	7,2	;volatile
   986     056A  1587               	bsf	7,3	;volatile
   987                           
   988                           ;atividade7.c: 81:     if (PORTBbits.RB0 == 0) tecla = 4;
   989     056B  1806               	btfsc	6,0	;volatile
   990     056C  2D6E               	goto	u1321
   991     056D  2D6F               	goto	u1320
   992     056E                     u1321:
   993     056E  2D71               	goto	l49
   994     056F                     u1320:
   995     056F                     l1469:
   996     056F  3004               	movlw	4
   997     0570  00F0               	movwf	teclado@tecla
   998     0571                     l49:
   999                           
  1000                           ;atividade7.c: 82:     if (PORTBbits.RB1 == 0) tecla = 5;
  1001     0571  1886               	btfsc	6,1	;volatile
  1002     0572  2D74               	goto	u1331
  1003     0573  2D75               	goto	u1330
  1004     0574                     u1331:
  1005     0574  2D77               	goto	l50
  1006     0575                     u1330:
  1007     0575                     l1471:
  1008     0575  3005               	movlw	5
  1009     0576  00F0               	movwf	teclado@tecla
  1010     0577                     l50:
  1011                           
  1012                           ;atividade7.c: 83:     if (PORTBbits.RB2 == 0) tecla = 6;
  1013     0577  1906               	btfsc	6,2	;volatile
  1014     0578  2D7A               	goto	u1341
  1015     0579  2D7B               	goto	u1340
  1016     057A                     u1341:
  1017     057A  2D7D               	goto	l51
  1018     057B                     u1340:
  1019     057B                     l1473:
  1020     057B  3006               	movlw	6
  1021     057C  00F0               	movwf	teclado@tecla
  1022     057D                     l51:
  1023                           
  1024                           ;atividade7.c: 84:     if (PORTBbits.RB3 == 0) tecla = 7;
  1025     057D  1986               	btfsc	6,3	;volatile
  1026     057E  2D80               	goto	u1351
  1027     057F  2D81               	goto	u1350
  1028     0580                     u1351:
  1029     0580  2D83               	goto	l52
  1030     0581                     u1350:
  1031     0581                     l1475:
  1032     0581  3007               	movlw	7
  1033     0582  00F0               	movwf	teclado@tecla
  1034     0583                     l52:
  1035                           
  1036                           ;atividade7.c: 86:     PORTCbits.RC0 = 1; PORTCbits.RC1 = 1; PORTCbits.RC2 = 0; PORTCbit
      +                          s.RC3 = 1;
  1037     0583  1407               	bsf	7,0	;volatile
  1038     0584  1487               	bsf	7,1	;volatile
  1039     0585  1107               	bcf	7,2	;volatile
  1040     0586  1587               	bsf	7,3	;volatile
  1041                           
  1042                           ;atividade7.c: 87:     if (PORTBbits.RB0 == 0) tecla = 8;
  1043     0587  1806               	btfsc	6,0	;volatile
  1044     0588  2D8A               	goto	u1361
  1045     0589  2D8B               	goto	u1360
  1046     058A                     u1361:
  1047     058A  2D8D               	goto	l53
  1048     058B                     u1360:
  1049     058B                     l1477:
  1050     058B  3008               	movlw	8
  1051     058C  00F0               	movwf	teclado@tecla
  1052     058D                     l53:
  1053                           
  1054                           ;atividade7.c: 88:     if (PORTBbits.RB1 == 0) tecla = 9;
  1055     058D  1886               	btfsc	6,1	;volatile
  1056     058E  2D90               	goto	u1371
  1057     058F  2D91               	goto	u1370
  1058     0590                     u1371:
  1059     0590  2D93               	goto	l54
  1060     0591                     u1370:
  1061     0591                     l1479:
  1062     0591  3009               	movlw	9
  1063     0592  00F0               	movwf	teclado@tecla
  1064     0593                     l54:
  1065                           
  1066                           ;atividade7.c: 89:     if (PORTBbits.RB2 == 0) tecla = 10;
  1067     0593  1906               	btfsc	6,2	;volatile
  1068     0594  2D96               	goto	u1381
  1069     0595  2D97               	goto	u1380
  1070     0596                     u1381:
  1071     0596  2D99               	goto	l55
  1072     0597                     u1380:
  1073     0597                     l1481:
  1074     0597  300A               	movlw	10
  1075     0598  00F0               	movwf	teclado@tecla
  1076     0599                     l55:
  1077                           
  1078                           ;atividade7.c: 90:     if (PORTBbits.RB3 == 0) tecla = 11;
  1079     0599  1986               	btfsc	6,3	;volatile
  1080     059A  2D9C               	goto	u1391
  1081     059B  2D9D               	goto	u1390
  1082     059C                     u1391:
  1083     059C  2D9F               	goto	l56
  1084     059D                     u1390:
  1085     059D                     l1483:
  1086     059D  300B               	movlw	11
  1087     059E  00F0               	movwf	teclado@tecla
  1088     059F                     l56:
  1089                           
  1090                           ;atividade7.c: 92:     PORTCbits.RC0 = 1; PORTCbits.RC1 = 1; PORTCbits.RC2 = 1; PORTCbit
      +                          s.RC3 = 0;
  1091     059F  1407               	bsf	7,0	;volatile
  1092     05A0  1487               	bsf	7,1	;volatile
  1093     05A1  1507               	bsf	7,2	;volatile
  1094     05A2  1187               	bcf	7,3	;volatile
  1095                           
  1096                           ;atividade7.c: 93:     if (PORTBbits.RB0 == 0) tecla = 12;
  1097     05A3  1806               	btfsc	6,0	;volatile
  1098     05A4  2DA6               	goto	u1401
  1099     05A5  2DA7               	goto	u1400
  1100     05A6                     u1401:
  1101     05A6  2DA9               	goto	l57
  1102     05A7                     u1400:
  1103     05A7                     l1485:
  1104     05A7  300C               	movlw	12
  1105     05A8  00F0               	movwf	teclado@tecla
  1106     05A9                     l57:
  1107                           
  1108                           ;atividade7.c: 94:     if (PORTBbits.RB1 == 0) tecla = 13;
  1109     05A9  1886               	btfsc	6,1	;volatile
  1110     05AA  2DAC               	goto	u1411
  1111     05AB  2DAD               	goto	u1410
  1112     05AC                     u1411:
  1113     05AC  2DAF               	goto	l58
  1114     05AD                     u1410:
  1115     05AD                     l1487:
  1116     05AD  300D               	movlw	13
  1117     05AE  00F0               	movwf	teclado@tecla
  1118     05AF                     l58:
  1119                           
  1120                           ;atividade7.c: 95:     if (PORTBbits.RB2 == 0) tecla = 14;
  1121     05AF  1906               	btfsc	6,2	;volatile
  1122     05B0  2DB2               	goto	u1421
  1123     05B1  2DB3               	goto	u1420
  1124     05B2                     u1421:
  1125     05B2  2DB5               	goto	l59
  1126     05B3                     u1420:
  1127     05B3                     l1489:
  1128     05B3  300E               	movlw	14
  1129     05B4  00F0               	movwf	teclado@tecla
  1130     05B5                     l59:
  1131                           
  1132                           ;atividade7.c: 96:     if (PORTBbits.RB3 == 0) tecla = 15;
  1133     05B5  1986               	btfsc	6,3	;volatile
  1134     05B6  2DB8               	goto	u1431
  1135     05B7  2DB9               	goto	u1430
  1136     05B8                     u1431:
  1137     05B8  2DBB               	goto	l1493
  1138     05B9                     u1430:
  1139     05B9                     l1491:
  1140     05B9  300F               	movlw	15
  1141     05BA  00F0               	movwf	teclado@tecla
  1142     05BB                     l1493:
  1143                           
  1144                           ;atividade7.c: 98:     return tecla;
  1145     05BB  0870               	movf	teclado@tecla,w
  1146     05BC                     l61:
  1147     05BC  0008               	return
  1148     05BD                     __end_of_teclado:
  1149                           
  1150                           	psect	text2
  1151     028A                     __ptext2:	
  1152 ;; *************** function _lcd_initialise *****************
  1153 ;; Defined at:
  1154 ;;		line 51 in file "atividade7.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;		None
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  1    wreg      void 
  1161 ;; Registers used:
  1162 ;;		wreg, status,2, status,0, pclath, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1168 ;;      Params:         0       0       0       0       0
  1169 ;;      Locals:         0       0       0       0       0
  1170 ;;      Temps:          0       0       0       0       0
  1171 ;;      Totals:         0       0       0       0       0
  1172 ;;Total ram usage:        0 bytes
  1173 ;; Hardware stack levels used: 1
  1174 ;; Hardware stack levels required when called: 1
  1175 ;; This function calls:
  1176 ;;		_lcd_command
  1177 ;; This function is called by:
  1178 ;;		_main
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182     028A                     _lcd_initialise:	
  1183                           ;psect for function _lcd_initialise
  1184                           
  1185     028A                     l1447:	
  1186                           ;incstack = 0
  1187                           ; Regs used in _lcd_initialise: [wreg+status,2+status,0+pclath+cstack]
  1188                           
  1189                           
  1190                           ;atividade7.c: 52:     lcd_command(0x38);
  1191     028A  3038               	movlw	56
  1192     028B  120A  118A  224E  120A  118A  	fcall	_lcd_command
  1193                           
  1194                           ;atividade7.c: 53:     lcd_command(0x06);
  1195     0290  3006               	movlw	6
  1196     0291  120A  118A  224E  120A  118A  	fcall	_lcd_command
  1197                           
  1198                           ;atividade7.c: 54:     lcd_command(0x0C);
  1199     0296  300C               	movlw	12
  1200     0297  120A  118A  224E  120A  118A  	fcall	_lcd_command
  1201                           
  1202                           ;atividade7.c: 55:     lcd_command(0x01);
  1203     029C  3001               	movlw	1
  1204     029D  120A  118A  224E  120A  118A  	fcall	_lcd_command
  1205     02A2                     l39:
  1206     02A2  0008               	return
  1207     02A3                     __end_of_lcd_initialise:
  1208                           
  1209                           	psect	text3
  1210     022F                     __ptext3:	
  1211 ;; *************** function _debounce *****************
  1212 ;; Defined at:
  1213 ;;		line 58 in file "atividade7.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;		None
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;		None
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      void 
  1220 ;; Registers used:
  1221 ;;		wreg
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1227 ;;      Params:         0       0       0       0       0
  1228 ;;      Locals:         0       0       0       0       0
  1229 ;;      Temps:          3       0       0       0       0
  1230 ;;      Totals:         3       0       0       0       0
  1231 ;;Total ram usage:        3 bytes
  1232 ;; Hardware stack levels used: 1
  1233 ;; This function calls:
  1234 ;;		Nothing
  1235 ;; This function is called by:
  1236 ;;		_main
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240     022F                     _debounce:	
  1241                           ;psect for function _debounce
  1242                           
  1243     022F                     l1449:	
  1244                           ;incstack = 0
  1245                           ; Regs used in _debounce: [wreg]
  1246                           
  1247                           
  1248                           ;atividade7.c: 59:     _delay((unsigned long)((50)*(20000000/4000.0)));
  1249     022F  3002               	movlw	2
  1250     0230  00F2               	movwf	??_debounce+2
  1251     0231  3045               	movlw	69
  1252     0232  00F1               	movwf	??_debounce+1
  1253     0233  30A9               	movlw	169
  1254     0234  00F0               	movwf	??_debounce
  1255     0235                     u1497:
  1256     0235  0BF0               	decfsz	??_debounce,f
  1257     0236  2A35               	goto	u1497
  1258     0237  0BF1               	decfsz	??_debounce+1,f
  1259     0238  2A35               	goto	u1497
  1260     0239  0BF2               	decfsz	??_debounce+2,f
  1261     023A  2A35               	goto	u1497
  1262     023B  2A3C               	nop2
  1263     023C                     l42:
  1264     023C  0008               	return
  1265     023D                     __end_of_debounce:
  1266                           
  1267                           	psect	text4
  1268     030E                     __ptext4:	
  1269 ;; *************** function _atualiza_lcd *****************
  1270 ;; Defined at:
  1271 ;;		line 101 in file "atividade7.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;		None
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;  buffer         16   63[BANK0 ] unsigned char [16]
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  1    wreg      void 
  1278 ;; Registers used:
  1279 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1280 ;; Tracked objects:
  1281 ;;		On entry : 0/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1285 ;;      Params:         0       0       0       0       0
  1286 ;;      Locals:         0      16       0       0       0
  1287 ;;      Temps:          0       2       0       0       0
  1288 ;;      Totals:         0      18       0       0       0
  1289 ;;Total ram usage:       18 bytes
  1290 ;; Hardware stack levels used: 1
  1291 ;; Hardware stack levels required when called: 8
  1292 ;; This function calls:
  1293 ;;		_lcd_command
  1294 ;;		_lcd_string
  1295 ;;		_sprintf
  1296 ;; This function is called by:
  1297 ;;		_main
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301     030E                     _atualiza_lcd:	
  1302                           ;psect for function _atualiza_lcd
  1303                           
  1304     030E                     l1497:	
  1305                           ;incstack = 0
  1306 ;; hardware stack exceeded
  1307                           ; Regs used in _atualiza_lcd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1308                           
  1309                           
  1310                           ;atividade7.c: 103:     char buffer[16];;atividade7.c: 104:     sprintf(buffer, "%04d", 
      +                          tecla_pressionada);
  1311     030E  305F               	movlw	(low (atualiza_lcd@buffer| 0))& (0+255)
  1312     030F  1283               	bcf	3,5	;RP0=0, select bank0
  1313     0310  1303               	bcf	3,6	;RP1=0, select bank0
  1314     0311  00CC               	movwf	sprintf@s
  1315     0312  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1316     0313  00CD               	movwf	sprintf@fmt
  1317     0314  1683               	bsf	3,5	;RP0=1, select bank1
  1318     0315  1303               	bcf	3,6	;RP1=0, select bank1
  1319     0316  0824               	movf	_tecla_pressionada^(0+128),w
  1320     0317  1283               	bcf	3,5	;RP0=0, select bank0
  1321     0318  1303               	bcf	3,6	;RP1=0, select bank0
  1322     0319  00DD               	movwf	??_atualiza_lcd
  1323     031A  01DE               	clrf	??_atualiza_lcd+1
  1324     031B  085D               	movf	??_atualiza_lcd,w
  1325     031C  00CE               	movwf	?_sprintf+2
  1326     031D  085E               	movf	??_atualiza_lcd+1,w
  1327     031E  00CF               	movwf	?_sprintf+3
  1328     031F  120A  118A  22C6  120A  118A  	fcall	_sprintf
  1329     0324                     l1499:
  1330                           
  1331                           ;atividade7.c: 106:     lcd_command(0x80);
  1332     0324  3080               	movlw	128
  1333     0325  120A  118A  224E  120A  118A  	fcall	_lcd_command
  1334     032A                     l1501:
  1335                           
  1336                           ;atividade7.c: 108:     lcd_command(0xC0);
  1337     032A  30C0               	movlw	192
  1338     032B  120A  118A  224E  120A  118A  	fcall	_lcd_command
  1339     0330                     l1503:
  1340                           
  1341                           ;atividade7.c: 109:     lcd_string(buffer);
  1342     0330  305F               	movlw	(low (atualiza_lcd@buffer| 0))& (0+255)
  1343     0331  00F3               	movwf	lcd_string@str
  1344     0332  120A  118A  2276  120A  118A  	fcall	_lcd_string
  1345     0337                     l64:
  1346     0337  0008               	return
  1347     0338                     __end_of_atualiza_lcd:
  1348                           
  1349                           	psect	text5
  1350     02C6                     __ptext5:	
  1351 ;; *************** function _sprintf *****************
  1352 ;; Defined at:
  1353 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
  1354 ;; Parameters:    Size  Location     Type
  1355 ;;  s               1   44[BANK0 ] PTR unsigned char 
  1356 ;;		 -> atualiza_lcd@buffer(16), 
  1357 ;;  fmt             1   45[BANK0 ] PTR const unsigned char 
  1358 ;;		 -> STR_1(5), 
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;  f              11   50[BANK0 ] struct _IO_FILE
  1361 ;;  ret             2    0        int 
  1362 ;;  ap              1   49[BANK0 ] PTR void [1]
  1363 ;;		 -> ?_sprintf(2), 
  1364 ;; Return value:  Size  Location     Type
  1365 ;;                  2   44[BANK0 ] int 
  1366 ;; Registers used:
  1367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1373 ;;      Params:         0       4       0       0       0
  1374 ;;      Locals:         0      12       0       0       0
  1375 ;;      Temps:          0       1       0       0       0
  1376 ;;      Totals:         0      17       0       0       0
  1377 ;;Total ram usage:       17 bytes
  1378 ;; Hardware stack levels used: 1
  1379 ;; Hardware stack levels required when called: 7
  1380 ;; This function calls:
  1381 ;;		_vfprintf
  1382 ;; This function is called by:
  1383 ;;		_atualiza_lcd
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387     02C6                     _sprintf:	
  1388                           ;psect for function _sprintf
  1389                           
  1390     02C6                     l1433:	
  1391                           ;incstack = 0
  1392 ;; hardware stack exceeded
  1393                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1394                           
  1395     02C6  304E               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1396     02C7  1283               	bcf	3,5	;RP0=0, select bank0
  1397     02C8  1303               	bcf	3,6	;RP1=0, select bank0
  1398     02C9  00D1               	movwf	sprintf@ap
  1399     02CA                     l1435:
  1400     02CA  084C               	movf	sprintf@s,w
  1401     02CB  00D2               	movwf	sprintf@f
  1402     02CC  3000               	movlw	0
  1403     02CD  00D3               	movwf	sprintf@f+1
  1404     02CE                     l1437:
  1405     02CE  01D4               	clrf	sprintf@f+2
  1406     02CF  01D5               	clrf	sprintf@f+3
  1407     02D0                     l1439:
  1408     02D0  01DB               	clrf	sprintf@f+9
  1409     02D1  01DC               	clrf	sprintf@f+10
  1410     02D2                     l1441:
  1411     02D2  3052               	movlw	low sprintf@f
  1412     02D3  00C7               	movwf	vfprintf@fp
  1413     02D4  3000               	movlw	high sprintf@f
  1414     02D5  00C8               	movwf	vfprintf@fp+1
  1415     02D6  084D               	movf	sprintf@fmt,w
  1416     02D7  00C9               	movwf	vfprintf@fmt
  1417     02D8  3051               	movlw	(low (sprintf@ap| 0))& (0+255)
  1418     02D9  00CA               	movwf	vfprintf@ap
  1419     02DA  120A  118A  22A3  120A  118A  	fcall	_vfprintf
  1420     02DF                     l1443:
  1421     02DF  1283               	bcf	3,5	;RP0=0, select bank0
  1422     02E0  1303               	bcf	3,6	;RP1=0, select bank0
  1423     02E1  0854               	movf	sprintf@f+2,w
  1424     02E2  074C               	addwf	sprintf@s,w
  1425     02E3  00D0               	movwf	??_sprintf
  1426     02E4  0850               	movf	??_sprintf,w
  1427     02E5  0084               	movwf	4
  1428     02E6  1383               	bcf	3,7	;select IRP bank0
  1429     02E7  0180               	clrf	0
  1430     02E8                     l633:
  1431     02E8  0008               	return
  1432     02E9                     __end_of_sprintf:
  1433                           
  1434                           	psect	text6
  1435     02A3                     __ptext6:	
  1436 ;; *************** function _vfprintf *****************
  1437 ;; Defined at:
  1438 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;  fp              2   39[BANK0 ] PTR struct _IO_FILE
  1441 ;;		 -> sprintf@f(11), 
  1442 ;;  fmt             1   41[BANK0 ] PTR const unsigned char 
  1443 ;;		 -> STR_1(5), 
  1444 ;;  ap              1   42[BANK0 ] PTR PTR void 
  1445 ;;		 -> sprintf@ap(1), 
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;  cfmt            1   43[BANK0 ] PTR unsigned char 
  1448 ;;		 -> STR_1(5), 
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  2   39[BANK0 ] int 
  1451 ;; Registers used:
  1452 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1458 ;;      Params:         0       4       0       0       0
  1459 ;;      Locals:         0       1       0       0       0
  1460 ;;      Temps:          0       0       0       0       0
  1461 ;;      Totals:         0       5       0       0       0
  1462 ;;Total ram usage:        5 bytes
  1463 ;; Hardware stack levels used: 1
  1464 ;; Hardware stack levels required when called: 6
  1465 ;; This function calls:
  1466 ;;		_vfpfcnvrt
  1467 ;; This function is called by:
  1468 ;;		_sprintf
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472     02A3                     _vfprintf:	
  1473                           ;psect for function _vfprintf
  1474                           
  1475     02A3                     l1407:	
  1476                           ;incstack = 0
  1477 ;; hardware stack exceeded
  1478                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1479                           
  1480                           
  1481                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1482     02A3  1283               	bcf	3,5	;RP0=0, select bank0
  1483     02A4  1303               	bcf	3,6	;RP1=0, select bank0
  1484     02A5  0849               	movf	vfprintf@fmt,w
  1485     02A6  00CB               	movwf	vfprintf@cfmt
  1486                           
  1487                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1488     02A7  2AB5               	goto	l1411
  1489     02A8                     l1409:
  1490                           
  1491                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1492     02A8  0847               	movf	vfprintf@fp,w
  1493     02A9  00BB               	movwf	vfpfcnvrt@fp
  1494     02AA  0848               	movf	vfprintf@fp+1,w
  1495     02AB  00BC               	movwf	vfpfcnvrt@fp+1
  1496     02AC  304B               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1497     02AD  00BD               	movwf	vfpfcnvrt@fmt
  1498     02AE  084A               	movf	vfprintf@ap,w
  1499     02AF  00BE               	movwf	vfpfcnvrt@ap
  1500     02B0  120A  118A  2657  120A  118A  	fcall	_vfpfcnvrt
  1501     02B5                     l1411:
  1502                           
  1503                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1504     02B5  1283               	bcf	3,5	;RP0=0, select bank0
  1505     02B6  1303               	bcf	3,6	;RP1=0, select bank0
  1506     02B7  084B               	movf	vfprintf@cfmt,w
  1507     02B8  0084               	movwf	4
  1508     02B9  120A  118A  2003  120A  118A  	fcall	stringdir
  1509     02BE  3A00               	xorlw	0
  1510     02BF  1D03               	skipz
  1511     02C0  2AC2               	goto	u1261
  1512     02C1  2AC3               	goto	u1260
  1513     02C2                     u1261:
  1514     02C2  2AA8               	goto	l1409
  1515     02C3                     u1260:
  1516     02C3                     l1413:
  1517                           
  1518                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1519     02C3  01C7               	clrf	?_vfprintf
  1520     02C4  01C8               	clrf	?_vfprintf+1
  1521     02C5                     l703:
  1522     02C5  0008               	return
  1523     02C6                     __end_of_vfprintf:
  1524                           
  1525                           	psect	text7
  1526     0657                     __ptext7:	
  1527 ;; *************** function _vfpfcnvrt *****************
  1528 ;; Defined at:
  1529 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;  fp              2   27[BANK0 ] PTR struct _IO_FILE
  1532 ;;		 -> sprintf@f(11), 
  1533 ;;  fmt             1   29[BANK0 ] PTR PTR unsigned char 
  1534 ;;		 -> vfprintf@cfmt(1), 
  1535 ;;  ap              1   30[BANK0 ] PTR PTR void 
  1536 ;;		 -> sprintf@ap(1), 
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;  convarg         4   33[BANK0 ] struct .
  1539 ;;  cp              1   38[BANK0 ] PTR unsigned char 
  1540 ;;		 -> STR_1(5), 
  1541 ;;  done            1   37[BANK0 ] _Bool 
  1542 ;;  c               1    0        unsigned char 
  1543 ;; Return value:  Size  Location     Type
  1544 ;;                  1    wreg      void 
  1545 ;; Registers used:
  1546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1547 ;; Tracked objects:
  1548 ;;		On entry : 0/0
  1549 ;;		On exit  : 0/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1552 ;;      Params:         0       4       0       0       0
  1553 ;;      Locals:         0       6       0       0       0
  1554 ;;      Temps:          0       2       0       0       0
  1555 ;;      Totals:         0      12       0       0       0
  1556 ;;Total ram usage:       12 bytes
  1557 ;; Hardware stack levels used: 1
  1558 ;; Hardware stack levels required when called: 5
  1559 ;; This function calls:
  1560 ;;		_dtoa
  1561 ;;		_fputc
  1562 ;;		_read_prec_or_width
  1563 ;; This function is called by:
  1564 ;;		_vfprintf
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568     0657                     _vfpfcnvrt:	
  1569                           ;psect for function _vfpfcnvrt
  1570                           
  1571     0657                     l1349:	
  1572                           ;incstack = 0
  1573 ;; hardware stack exceeded
  1574                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1575                           
  1576                           
  1577                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1578     0657  1283               	bcf	3,5	;RP0=0, select bank0
  1579     0658  1303               	bcf	3,6	;RP1=0, select bank0
  1580     0659  083D               	movf	vfpfcnvrt@fmt,w
  1581     065A  0084               	movwf	4
  1582     065B  1383               	bcf	3,7	;select IRP bank0
  1583     065C  0800               	movf	0,w
  1584     065D  0084               	movwf	4
  1585     065E  120A  118A  2003  120A  118A  	fcall	stringdir
  1586     0663  3A25               	xorlw	37
  1587     0664  1D03               	skipz
  1588     0665  2E67               	goto	u1211
  1589     0666  2E68               	goto	u1210
  1590     0667                     u1211:
  1591     0667  2EFD               	goto	l1393
  1592     0668                     u1210:
  1593     0668                     l1351:
  1594                           
  1595                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1596     0668  083D               	movf	vfpfcnvrt@fmt,w
  1597     0669  0084               	movwf	4
  1598     066A  3001               	movlw	1
  1599     066B  0780               	addwf	0,f
  1600     066C                     l1353:
  1601                           
  1602                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1603     066C  1683               	bsf	3,5	;RP0=1, select bank1
  1604     066D  1303               	bcf	3,6	;RP1=0, select bank1
  1605     066E  01A0               	clrf	_width^(0+128)
  1606     066F  01A1               	clrf	(_width+1)^(0+128)
  1607     0670  3000               	movlw	0
  1608     0671  1283               	bcf	3,5	;RP0=0, select bank0
  1609     0672  1303               	bcf	3,6	;RP1=0, select bank0
  1610     0673  00EF               	movwf	_flags
  1611     0674                     l1355:
  1612                           
  1613                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1614     0674  30FF               	movlw	255
  1615     0675  1683               	bsf	3,5	;RP0=1, select bank1
  1616     0676  1303               	bcf	3,6	;RP1=0, select bank1
  1617     0677  00A2               	movwf	_prec^(0+128)
  1618     0678  30FF               	movlw	255
  1619     0679  00A3               	movwf	(_prec^(0+128)+1)
  1620     067A                     l1357:
  1621                           
  1622                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1623     067A  1283               	bcf	3,5	;RP0=0, select bank0
  1624     067B  1303               	bcf	3,6	;RP1=0, select bank0
  1625     067C  01C5               	clrf	vfpfcnvrt@done
  1626                           
  1627                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1628     067D  2E94               	goto	l1365
  1629     067E                     l689:	
  1630                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1219:            
      +                               case '0' :
  1631                           
  1632                           
  1633                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1634     067E  14EF               	bsf	_flags,1
  1635     067F                     l1359:
  1636                           
  1637                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1638     067F  083D               	movf	vfpfcnvrt@fmt,w
  1639     0680  0084               	movwf	4
  1640     0681  3001               	movlw	1
  1641     0682  0780               	addwf	0,f
  1642                           
  1643                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1644     0683  2E94               	goto	l1365
  1645     0684                     l691:	
  1646                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1242:            
      +                               default:
  1647                           
  1648                           
  1649                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1650     0684  3001               	movlw	1
  1651     0685  00C5               	movwf	vfpfcnvrt@done
  1652                           
  1653                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1654     0686  2E94               	goto	l1365
  1655     0687                     l1363:
  1656     0687  083D               	movf	vfpfcnvrt@fmt,w
  1657     0688  0084               	movwf	4
  1658     0689  0800               	movf	0,w
  1659     068A  0084               	movwf	4
  1660     068B  120A  118A  2003  120A  118A  	fcall	stringdir
  1661                           
  1662                           ; Switch size 1, requested type "simple"
  1663                           ; Number of cases is 1, Range of values is 48 to 48
  1664                           ; switch strategies available:
  1665                           ; Name         Instructions Cycles
  1666                           ; simple_byte            4     3 (average)
  1667                           ; direct_byte           14    11 (fixed)
  1668                           ; jumptable            263     9 (fixed)
  1669                           ;	Chosen strategy is simple_byte
  1670     0690  3A30               	xorlw	48	; case 48
  1671     0691  1903               	skipnz
  1672     0692  2E7E               	goto	l689
  1673     0693  2E84               	goto	l691
  1674     0694                     l1365:
  1675                           
  1676                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1677     0694  0845               	movf	vfpfcnvrt@done,w
  1678     0695  1903               	btfsc	3,2
  1679     0696  2E98               	goto	u1221
  1680     0697  2E99               	goto	u1220
  1681     0698                     u1221:
  1682     0698  2E87               	goto	l1363
  1683     0699                     u1220:
  1684     0699                     l1367:
  1685                           
  1686                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1687     0699  083D               	movf	vfpfcnvrt@fmt,w
  1688     069A  00F6               	movwf	read_prec_or_width@fmt
  1689     069B  083E               	movf	vfpfcnvrt@ap,w
  1690     069C  00F7               	movwf	read_prec_or_width@ap
  1691     069D  120A  118A  23B6  120A  118A  	fcall	_read_prec_or_width
  1692     06A2  0877               	movf	?_read_prec_or_width+1,w
  1693     06A3  1683               	bsf	3,5	;RP0=1, select bank1
  1694     06A4  1303               	bcf	3,6	;RP1=0, select bank1
  1695     06A5  00A1               	movwf	(_width+1)^(0+128)
  1696     06A6  0876               	movf	?_read_prec_or_width,w
  1697     06A7  00A0               	movwf	_width^(0+128)
  1698     06A8                     l1369:
  1699                           
  1700                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1701     06A8  1FA1               	btfss	(_width+1)^(0+128),7
  1702     06A9  2EAB               	goto	u1231
  1703     06AA  2EAC               	goto	u1230
  1704     06AB                     u1231:
  1705     06AB  2EB6               	goto	l1375
  1706     06AC                     u1230:
  1707     06AC                     l1371:
  1708                           
  1709                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1710     06AC  1283               	bcf	3,5	;RP0=0, select bank0
  1711     06AD  1303               	bcf	3,6	;RP1=0, select bank0
  1712     06AE  146F               	bsf	_flags,0
  1713     06AF                     l1373:
  1714                           
  1715                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1716     06AF  1683               	bsf	3,5	;RP0=1, select bank1
  1717     06B0  1303               	bcf	3,6	;RP1=0, select bank1
  1718     06B1  09A0               	comf	_width^(0+128),f
  1719     06B2  09A1               	comf	(_width+1)^(0+128),f
  1720     06B3  0AA0               	incf	_width^(0+128),f
  1721     06B4  1903               	skipnz
  1722     06B5  0AA1               	incf	(_width+1)^(0+128),f
  1723     06B6                     l1375:
  1724                           
  1725                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1726     06B6  1283               	bcf	3,5	;RP0=0, select bank0
  1727     06B7  1303               	bcf	3,6	;RP1=0, select bank0
  1728     06B8  083D               	movf	vfpfcnvrt@fmt,w
  1729     06B9  0084               	movwf	4
  1730     06BA  1383               	bcf	3,7	;select IRP bank0
  1731     06BB  0800               	movf	0,w
  1732     06BC  00C6               	movwf	vfpfcnvrt@cp
  1733     06BD                     l1377:
  1734                           
  1735                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1736     06BD  0846               	movf	vfpfcnvrt@cp,w
  1737     06BE  0084               	movwf	4
  1738     06BF  120A  118A  2003  120A  118A  	fcall	stringdir
  1739     06C4  3A64               	xorlw	100
  1740     06C5  1903               	skipnz
  1741     06C6  2EC8               	goto	u1241
  1742     06C7  2EC9               	goto	u1240
  1743     06C8                     u1241:
  1744     06C8  2ED5               	goto	l1381
  1745     06C9                     u1240:
  1746     06C9                     l1379:
  1747     06C9  0846               	movf	vfpfcnvrt@cp,w
  1748     06CA  0084               	movwf	4
  1749     06CB  120A  118A  2003  120A  118A  	fcall	stringdir
  1750     06D0  3A69               	xorlw	105
  1751     06D1  1D03               	skipz
  1752     06D2  2ED4               	goto	u1251
  1753     06D3  2ED5               	goto	u1250
  1754     06D4                     u1251:
  1755     06D4  2EF5               	goto	l1389
  1756     06D5                     u1250:
  1757     06D5                     l1381:
  1758                           
  1759                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1760     06D5  083E               	movf	vfpfcnvrt@ap,w
  1761     06D6  0084               	movwf	4
  1762     06D7  0800               	movf	0,w
  1763     06D8  00FF               	movwf	btemp+1
  1764     06D9  3002               	movlw	2
  1765     06DA  0780               	addwf	0,f
  1766     06DB  087F               	movf	btemp+1,w
  1767     06DC  0084               	movwf	4
  1768     06DD  0800               	movf	0,w
  1769     06DE  00C1               	movwf	vfpfcnvrt@convarg
  1770     06DF  0A84               	incf	4,f
  1771     06E0  0800               	movf	0,w
  1772     06E1  00C2               	movwf	vfpfcnvrt@convarg+1
  1773     06E2                     l1383:
  1774                           
  1775                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1776     06E2  083D               	movf	vfpfcnvrt@fmt,w
  1777     06E3  0084               	movwf	4
  1778     06E4  0846               	movf	vfpfcnvrt@cp,w
  1779     06E5  3E01               	addlw	1
  1780     06E6  0080               	movwf	0
  1781     06E7                     l1385:
  1782                           
  1783                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1784     06E7  083B               	movf	vfpfcnvrt@fp,w
  1785     06E8  00AF               	movwf	dtoa@fp
  1786     06E9  083C               	movf	vfpfcnvrt@fp+1,w
  1787     06EA  00B0               	movwf	dtoa@fp+1
  1788     06EB  0842               	movf	vfpfcnvrt@convarg+1,w
  1789     06EC  00B2               	movwf	dtoa@d+1
  1790     06ED  0841               	movf	vfpfcnvrt@convarg,w
  1791     06EE  00B1               	movwf	dtoa@d
  1792     06EF  120A  118A  2717  120A  118A  	fcall	_dtoa
  1793     06F4  2F16               	goto	l697
  1794     06F5                     l1389:
  1795                           
  1796                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1797     06F5  1283               	bcf	3,5	;RP0=0, select bank0
  1798     06F6  1303               	bcf	3,6	;RP1=0, select bank0
  1799     06F7  083D               	movf	vfpfcnvrt@fmt,w
  1800     06F8  0084               	movwf	4
  1801     06F9  3001               	movlw	1
  1802     06FA  1383               	bcf	3,7	;select IRP bank0
  1803     06FB  0780               	addwf	0,f
  1804     06FC  2F16               	goto	l697
  1805     06FD                     l1393:
  1806                           
  1807                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1808     06FD  083D               	movf	vfpfcnvrt@fmt,w
  1809     06FE  0084               	movwf	4
  1810     06FF  0800               	movf	0,w
  1811     0700  0084               	movwf	4
  1812     0701  120A  118A  2003  120A  118A  	fcall	stringdir
  1813     0706  00BF               	movwf	??_vfpfcnvrt
  1814     0707  01C0               	clrf	??_vfpfcnvrt+1
  1815     0708  083F               	movf	??_vfpfcnvrt,w
  1816     0709  00F0               	movwf	fputc@c
  1817     070A  0840               	movf	??_vfpfcnvrt+1,w
  1818     070B  00F1               	movwf	fputc@c+1
  1819     070C  083B               	movf	vfpfcnvrt@fp,w
  1820     070D  00F2               	movwf	fputc@fp
  1821     070E  083C               	movf	vfpfcnvrt@fp+1,w
  1822     070F  00F3               	movwf	fputc@fp+1
  1823     0710  120A  118A  25BD  120A  118A  	fcall	_fputc
  1824     0715  2EF5               	goto	l1389
  1825     0716                     l697:
  1826     0716  0008               	return
  1827     0717                     __end_of_vfpfcnvrt:
  1828                           
  1829                           	psect	text8
  1830     03B6                     __ptext8:	
  1831 ;; *************** function _read_prec_or_width *****************
  1832 ;; Defined at:
  1833 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;  fmt             1    6[COMMON] PTR PTR const unsigned c
  1836 ;;		 -> vfprintf@cfmt(1), 
  1837 ;;  ap              1    7[COMMON] PTR PTR void [1]
  1838 ;;		 -> sprintf@ap(1), 
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;  c               1    8[COMMON] unsigned char 
  1841 ;;  n               2    9[COMMON] int 
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  2    6[COMMON] int 
  1844 ;; Registers used:
  1845 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1851 ;;      Params:         2       0       0       0       0
  1852 ;;      Locals:         3       0       0       0       0
  1853 ;;      Temps:          0       0       0       0       0
  1854 ;;      Totals:         5       0       0       0       0
  1855 ;;Total ram usage:        5 bytes
  1856 ;; Hardware stack levels used: 1
  1857 ;; Hardware stack levels required when called: 1
  1858 ;; This function calls:
  1859 ;;		___wmul
  1860 ;; This function is called by:
  1861 ;;		_vfpfcnvrt
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865     03B6                     _read_prec_or_width:	
  1866                           ;psect for function _read_prec_or_width
  1867                           
  1868     03B6                     l1331:	
  1869                           ;incstack = 0
  1870                           ; Regs used in _read_prec_or_width: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1871                           
  1872                           
  1873                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  1874     03B6  01F9               	clrf	read_prec_or_width@n
  1875     03B7  01FA               	clrf	read_prec_or_width@n+1
  1876     03B8                     l1333:
  1877                           
  1878                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  1879     03B8  0876               	movf	read_prec_or_width@fmt,w
  1880     03B9  0084               	movwf	4
  1881     03BA  1383               	bcf	3,7	;select IRP bank0
  1882     03BB  0800               	movf	0,w
  1883     03BC  0084               	movwf	4
  1884     03BD  120A  118A  2003  120A  118A  	fcall	stringdir
  1885     03C2  3A2A               	xorlw	42
  1886     03C3  1D03               	skipz
  1887     03C4  2BC6               	goto	u1191
  1888     03C5  2BC7               	goto	u1190
  1889     03C6                     u1191:
  1890     03C6  2BF3               	goto	l1343
  1891     03C7                     u1190:
  1892     03C7                     l1335:
  1893                           
  1894                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  1895     03C7  0876               	movf	read_prec_or_width@fmt,w
  1896     03C8  0084               	movwf	4
  1897     03C9  3001               	movlw	1
  1898     03CA  0780               	addwf	0,f
  1899     03CB                     l1337:
  1900                           
  1901                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  1902     03CB  0877               	movf	read_prec_or_width@ap,w
  1903     03CC  0084               	movwf	4
  1904     03CD  0800               	movf	0,w
  1905     03CE  00FF               	movwf	btemp+1
  1906     03CF  3002               	movlw	2
  1907     03D0  0780               	addwf	0,f
  1908     03D1  087F               	movf	btemp+1,w
  1909     03D2  0084               	movwf	4
  1910     03D3  0800               	movf	0,w
  1911     03D4  00F9               	movwf	read_prec_or_width@n
  1912     03D5  0A84               	incf	4,f
  1913     03D6  0800               	movf	0,w
  1914     03D7  00FA               	movwf	read_prec_or_width@n+1
  1915                           
  1916                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  1917     03D8  2C04               	goto	l1345
  1918     03D9                     l1339:
  1919                           
  1920                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  1921     03D9  087A               	movf	read_prec_or_width@n+1,w
  1922     03DA  00F1               	movwf	___wmul@multiplier+1
  1923     03DB  0879               	movf	read_prec_or_width@n,w
  1924     03DC  00F0               	movwf	___wmul@multiplier
  1925     03DD  300A               	movlw	10
  1926     03DE  00F2               	movwf	___wmul@multiplicand
  1927     03DF  3000               	movlw	0
  1928     03E0  00F3               	movwf	___wmul@multiplicand+1
  1929     03E1  120A  118A  22E9  120A  118A  	fcall	___wmul
  1930     03E6  0878               	movf	read_prec_or_width@c,w
  1931     03E7  0770               	addwf	?___wmul,w
  1932     03E8  00F9               	movwf	read_prec_or_width@n
  1933     03E9  3000               	movlw	0
  1934     03EA  1803               	skipnc
  1935     03EB  3001               	movlw	1
  1936     03EC  0771               	addwf	?___wmul+1,w
  1937     03ED  00FA               	movwf	read_prec_or_width@n+1
  1938     03EE                     l1341:
  1939                           
  1940                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  1941     03EE  0876               	movf	read_prec_or_width@fmt,w
  1942     03EF  0084               	movwf	4
  1943     03F0  3001               	movlw	1
  1944     03F1  1383               	bcf	3,7	;select IRP bank0
  1945     03F2  0780               	addwf	0,f
  1946     03F3                     l1343:
  1947                           
  1948                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  1949     03F3  0876               	movf	read_prec_or_width@fmt,w
  1950     03F4  0084               	movwf	4
  1951     03F5  0800               	movf	0,w
  1952     03F6  0084               	movwf	4
  1953     03F7  120A  118A  2003  120A  118A  	fcall	stringdir
  1954     03FC  3ED0               	addlw	208
  1955     03FD  00F8               	movwf	read_prec_or_width@c
  1956     03FE  300A               	movlw	10
  1957     03FF  0278               	subwf	read_prec_or_width@c,w
  1958     0400  1C03               	skipc
  1959     0401  2C03               	goto	u1201
  1960     0402  2C04               	goto	u1200
  1961     0403                     u1201:
  1962     0403  2BD9               	goto	l1339
  1963     0404                     u1200:
  1964     0404                     l1345:
  1965                           
  1966                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  1967     0404  087A               	movf	read_prec_or_width@n+1,w
  1968     0405  00F7               	movwf	?_read_prec_or_width+1
  1969     0406  0879               	movf	read_prec_or_width@n,w
  1970     0407  00F6               	movwf	?_read_prec_or_width
  1971     0408                     l682:
  1972     0408  0008               	return
  1973     0409                     __end_of_read_prec_or_width:
  1974                           
  1975                           	psect	text9
  1976     02E9                     __ptext9:	
  1977 ;; *************** function ___wmul *****************
  1978 ;; Defined at:
  1979 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\Umul16.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;  multiplier      2    0[COMMON] unsigned int 
  1982 ;;  multiplicand    2    2[COMMON] unsigned int 
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;  product         2    4[COMMON] unsigned int 
  1985 ;; Return value:  Size  Location     Type
  1986 ;;                  2    0[COMMON] unsigned int 
  1987 ;; Registers used:
  1988 ;;		wreg, status,2, status,0
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1994 ;;      Params:         4       0       0       0       0
  1995 ;;      Locals:         2       0       0       0       0
  1996 ;;      Temps:          0       0       0       0       0
  1997 ;;      Totals:         6       0       0       0       0
  1998 ;;Total ram usage:        6 bytes
  1999 ;; Hardware stack levels used: 1
  2000 ;; This function calls:
  2001 ;;		Nothing
  2002 ;; This function is called by:
  2003 ;;		_read_prec_or_width
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007     02E9                     ___wmul:	
  2008                           ;psect for function ___wmul
  2009                           
  2010     02E9                     l1165:	
  2011                           ;incstack = 0
  2012                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2013                           
  2014     02E9  01F4               	clrf	___wmul@product
  2015     02EA  01F5               	clrf	___wmul@product+1
  2016     02EB                     l1167:
  2017     02EB  1C70               	btfss	___wmul@multiplier,0
  2018     02EC  2AEE               	goto	u811
  2019     02ED  2AEF               	goto	u810
  2020     02EE                     u811:
  2021     02EE  2AF5               	goto	l170
  2022     02EF                     u810:
  2023     02EF                     l1169:
  2024     02EF  0872               	movf	___wmul@multiplicand,w
  2025     02F0  07F4               	addwf	___wmul@product,f
  2026     02F1  1803               	skipnc
  2027     02F2  0AF5               	incf	___wmul@product+1,f
  2028     02F3  0873               	movf	___wmul@multiplicand+1,w
  2029     02F4  07F5               	addwf	___wmul@product+1,f
  2030     02F5                     l170:
  2031     02F5  3001               	movlw	1
  2032     02F6                     u825:
  2033     02F6  1003               	clrc
  2034     02F7  0DF2               	rlf	___wmul@multiplicand,f
  2035     02F8  0DF3               	rlf	___wmul@multiplicand+1,f
  2036     02F9  3EFF               	addlw	-1
  2037     02FA  1D03               	skipz
  2038     02FB  2AF6               	goto	u825
  2039     02FC                     l1171:
  2040     02FC  3001               	movlw	1
  2041     02FD                     u835:
  2042     02FD  1003               	clrc
  2043     02FE  0CF1               	rrf	___wmul@multiplier+1,f
  2044     02FF  0CF0               	rrf	___wmul@multiplier,f
  2045     0300  3EFF               	addlw	-1
  2046     0301  1D03               	skipz
  2047     0302  2AFD               	goto	u835
  2048     0303                     l1173:
  2049     0303  0870               	movf	___wmul@multiplier,w
  2050     0304  0471               	iorwf	___wmul@multiplier+1,w
  2051     0305  1D03               	btfss	3,2
  2052     0306  2B08               	goto	u841
  2053     0307  2B09               	goto	u840
  2054     0308                     u841:
  2055     0308  2AEB               	goto	l1167
  2056     0309                     u840:
  2057     0309                     l1175:
  2058     0309  0875               	movf	___wmul@product+1,w
  2059     030A  00F1               	movwf	?___wmul+1
  2060     030B  0874               	movf	___wmul@product,w
  2061     030C  00F0               	movwf	?___wmul
  2062     030D                     l172:
  2063     030D  0008               	return
  2064     030E                     __end_of___wmul:
  2065                           
  2066                           	psect	text10
  2067     0717                     __ptext10:	
  2068 ;; *************** function _dtoa *****************
  2069 ;; Defined at:
  2070 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;  fp              2   15[BANK0 ] PTR struct _IO_FILE
  2073 ;;		 -> sprintf@f(11), 
  2074 ;;  d               2   17[BANK0 ] int 
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  i               2   25[BANK0 ] int 
  2077 ;;  w               2   22[BANK0 ] int 
  2078 ;;  s               1   24[BANK0 ] unsigned char 
  2079 ;;  p               1   21[BANK0 ] _Bool 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      void 
  2082 ;; Registers used:
  2083 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2089 ;;      Params:         0       4       0       0       0
  2090 ;;      Locals:         0       8       0       0       0
  2091 ;;      Temps:          0       0       0       0       0
  2092 ;;      Totals:         0      12       0       0       0
  2093 ;;Total ram usage:       12 bytes
  2094 ;; Hardware stack levels used: 1
  2095 ;; Hardware stack levels required when called: 4
  2096 ;; This function calls:
  2097 ;;		___awdiv
  2098 ;;		___awmod
  2099 ;;		_abs
  2100 ;;		_pad
  2101 ;; This function is called by:
  2102 ;;		_vfpfcnvrt
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106     0717                     _dtoa:	
  2107                           ;psect for function _dtoa
  2108                           
  2109     0717                     l1285:	
  2110                           ;incstack = 0
  2111 ;; hardware stack exceeded
  2112                           ; Regs used in _dtoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2113                           
  2114                           
  2115                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  2116     0717  3001               	movlw	1
  2117     0718  1283               	bcf	3,5	;RP0=0, select bank0
  2118     0719  1303               	bcf	3,6	;RP1=0, select bank0
  2119     071A  00B5               	movwf	dtoa@p
  2120     071B                     l1287:
  2121                           
  2122                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  2123     071B  1BB2               	btfsc	dtoa@d+1,7
  2124     071C  2F1E               	goto	u1091
  2125     071D  2F20               	goto	u1090
  2126     071E                     u1091:
  2127     071E  3001               	movlw	1
  2128     071F  2F21               	goto	u1100
  2129     0720                     u1090:
  2130     0720  3000               	movlw	0
  2131     0721                     u1100:
  2132     0721  00B8               	movwf	dtoa@s
  2133                           
  2134                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  2135     0722  1683               	bsf	3,5	;RP0=1, select bank1
  2136     0723  1303               	bcf	3,6	;RP1=0, select bank1
  2137     0724  0821               	movf	(_width+1)^(0+128),w
  2138     0725  1283               	bcf	3,5	;RP0=0, select bank0
  2139     0726  1303               	bcf	3,6	;RP1=0, select bank0
  2140     0727  00B7               	movwf	dtoa@w+1
  2141     0728  1683               	bsf	3,5	;RP0=1, select bank1
  2142     0729  1303               	bcf	3,6	;RP1=0, select bank1
  2143     072A  0820               	movf	_width^(0+128),w
  2144     072B  1283               	bcf	3,5	;RP0=0, select bank0
  2145     072C  1303               	bcf	3,6	;RP1=0, select bank0
  2146     072D  00B6               	movwf	dtoa@w
  2147     072E                     l1289:
  2148                           
  2149                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 536:     if (s
  2150     072E  0838               	movf	dtoa@s,w
  2151     072F  1903               	btfsc	3,2
  2152     0730  2F32               	goto	u1111
  2153     0731  2F33               	goto	u1110
  2154     0732                     u1111:
  2155     0732  2F49               	goto	l661
  2156     0733                     u1110:
  2157     0733                     l1291:
  2158                           
  2159                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 541:         --w;
  2160     0733  30FF               	movlw	255
  2161     0734  07B6               	addwf	dtoa@w,f
  2162     0735  1803               	skipnc
  2163     0736  0AB7               	incf	dtoa@w+1,f
  2164     0737  30FF               	movlw	255
  2165     0738  07B7               	addwf	dtoa@w+1,f
  2166     0739                     l1293:
  2167                           
  2168                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  2169     0739  0838               	movf	dtoa@s,w
  2170     073A  1D03               	btfss	3,2
  2171     073B  2F3D               	goto	u1121
  2172     073C  2F3E               	goto	u1120
  2173     073D                     u1121:
  2174     073D  2F43               	goto	l1297
  2175     073E                     u1120:
  2176     073E                     l1295:
  2177     073E  302B               	movlw	43
  2178     073F  00B3               	movwf	_dtoa$661
  2179     0740  3000               	movlw	0
  2180     0741  00B4               	movwf	_dtoa$661+1
  2181     0742  2F47               	goto	l665
  2182     0743                     l1297:
  2183     0743  302D               	movlw	45
  2184     0744  00B3               	movwf	_dtoa$661
  2185     0745  3000               	movlw	0
  2186     0746  00B4               	movwf	_dtoa$661+1
  2187     0747                     l665:
  2188     0747  0833               	movf	_dtoa$661,w
  2189     0748  00B8               	movwf	dtoa@s
  2190     0749                     l661:	
  2191                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 543:     }
  2192                           
  2193                           
  2194                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  2195     0749  301F               	movlw	31
  2196     074A  00B9               	movwf	dtoa@i
  2197     074B  3000               	movlw	0
  2198     074C  00BA               	movwf	dtoa@i+1
  2199     074D                     l1299:
  2200                           
  2201                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  2202     074D  1683               	bsf	3,5	;RP0=1, select bank1
  2203     074E  1303               	bcf	3,6	;RP1=0, select bank1
  2204     074F  01C4               	clrf	(_dbuf^(0+128)+31)
  2205                           
  2206                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2207     0750  2F90               	goto	l1311
  2208     0751                     l1301:
  2209                           
  2210                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 564:         --i;
  2211     0751  30FF               	movlw	255
  2212     0752  07B9               	addwf	dtoa@i,f
  2213     0753  1803               	skipnc
  2214     0754  0ABA               	incf	dtoa@i+1,f
  2215     0755  30FF               	movlw	255
  2216     0756  07BA               	addwf	dtoa@i+1,f
  2217     0757                     l1303:
  2218                           
  2219                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  2220     0757  0839               	movf	dtoa@i,w
  2221     0758  3EA5               	addlw	(low (_dbuf| 0))& (0+255)
  2222     0759  0084               	movwf	4
  2223     075A  300A               	movlw	10
  2224     075B  00F0               	movwf	___awmod@divisor
  2225     075C  3000               	movlw	0
  2226     075D  00F1               	movwf	___awmod@divisor+1
  2227     075E  0832               	movf	dtoa@d+1,w
  2228     075F  00F3               	movwf	___awmod@dividend+1
  2229     0760  0831               	movf	dtoa@d,w
  2230     0761  00F2               	movwf	___awmod@dividend
  2231     0762  120A  118A  2409  120A  118A  	fcall	___awmod
  2232     0767  0871               	movf	?___awmod+1,w
  2233     0768  00F7               	movwf	abs@a+1
  2234     0769  0870               	movf	?___awmod,w
  2235     076A  00F6               	movwf	abs@a
  2236     076B  120A  118A  223D  120A  118A  	fcall	_abs
  2237     0770  0876               	movf	?_abs,w
  2238     0771  3E30               	addlw	48
  2239     0772  1383               	bcf	3,7	;select IRP bank1
  2240     0773  0080               	movwf	0
  2241     0774                     l1305:
  2242                           
  2243                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  2244     0774  1283               	bcf	3,5	;RP0=0, select bank0
  2245     0775  1303               	bcf	3,6	;RP1=0, select bank0
  2246     0776  01B5               	clrf	dtoa@p
  2247     0777                     l1307:
  2248                           
  2249                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 571:         --w;
  2250     0777  30FF               	movlw	255
  2251     0778  07B6               	addwf	dtoa@w,f
  2252     0779  1803               	skipnc
  2253     077A  0AB7               	incf	dtoa@w+1,f
  2254     077B  30FF               	movlw	255
  2255     077C  07B7               	addwf	dtoa@w+1,f
  2256     077D                     l1309:
  2257                           
  2258                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  2259     077D  300A               	movlw	10
  2260     077E  00F0               	movwf	___awdiv@divisor
  2261     077F  3000               	movlw	0
  2262     0780  00F1               	movwf	___awdiv@divisor+1
  2263     0781  0832               	movf	dtoa@d+1,w
  2264     0782  00F3               	movwf	___awdiv@dividend+1
  2265     0783  0831               	movf	dtoa@d,w
  2266     0784  00F2               	movwf	___awdiv@dividend
  2267     0785  120A  118A  2460  120A  118A  	fcall	___awdiv
  2268     078A  0871               	movf	?___awdiv+1,w
  2269     078B  1283               	bcf	3,5	;RP0=0, select bank0
  2270     078C  1303               	bcf	3,6	;RP1=0, select bank0
  2271     078D  00B2               	movwf	dtoa@d+1
  2272     078E  0870               	movf	?___awdiv,w
  2273     078F  00B1               	movwf	dtoa@d
  2274     0790                     l1311:
  2275                           
  2276                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2277     0790  1283               	bcf	3,5	;RP0=0, select bank0
  2278     0791  083A               	movf	dtoa@i+1,w
  2279     0792  3A80               	xorlw	128
  2280     0793  00FF               	movwf	btemp+1
  2281     0794  3080               	movlw	128
  2282     0795  027F               	subwf	btemp+1,w
  2283     0796  1D03               	skipz
  2284     0797  2F9A               	goto	u1135
  2285     0798  3001               	movlw	1
  2286     0799  0239               	subwf	dtoa@i,w
  2287     079A                     u1135:
  2288     079A  1C03               	skipc
  2289     079B  2F9D               	goto	u1131
  2290     079C  2F9E               	goto	u1130
  2291     079D                     u1131:
  2292     079D  2FBE               	goto	l1321
  2293     079E                     u1130:
  2294     079E                     l1313:
  2295     079E  1283               	bcf	3,5	;RP0=0, select bank0
  2296     079F  1303               	bcf	3,6	;RP1=0, select bank0
  2297     07A0  0831               	movf	dtoa@d,w
  2298     07A1  0432               	iorwf	dtoa@d+1,w
  2299     07A2  1D03               	btfss	3,2
  2300     07A3  2FA5               	goto	u1141
  2301     07A4  2FA6               	goto	u1140
  2302     07A5                     u1141:
  2303     07A5  2F51               	goto	l1301
  2304     07A6                     u1140:
  2305     07A6                     l1315:
  2306     07A6  0835               	movf	dtoa@p,w
  2307     07A7  1D03               	btfss	3,2
  2308     07A8  2FAA               	goto	u1151
  2309     07A9  2FAB               	goto	u1150
  2310     07AA                     u1151:
  2311     07AA  2F51               	goto	l1301
  2312     07AB                     u1150:
  2313     07AB                     l1317:
  2314     07AB  0837               	movf	dtoa@w+1,w
  2315     07AC  3A80               	xorlw	128
  2316     07AD  00FF               	movwf	btemp+1
  2317     07AE  3080               	movlw	128
  2318     07AF  027F               	subwf	btemp+1,w
  2319     07B0  1D03               	skipz
  2320     07B1  2FB4               	goto	u1165
  2321     07B2  3001               	movlw	1
  2322     07B3  0236               	subwf	dtoa@w,w
  2323     07B4                     u1165:
  2324     07B4  1C03               	skipc
  2325     07B5  2FB7               	goto	u1161
  2326     07B6  2FB8               	goto	u1160
  2327     07B7                     u1161:
  2328     07B7  2FBE               	goto	l1321
  2329     07B8                     u1160:
  2330     07B8                     l1319:
  2331     07B8  1283               	bcf	3,5	;RP0=0, select bank0
  2332     07B9  1303               	bcf	3,6	;RP1=0, select bank0
  2333     07BA  18EF               	btfsc	_flags,1
  2334     07BB  2FBD               	goto	u1171
  2335     07BC  2FBE               	goto	u1170
  2336     07BD                     u1171:
  2337     07BD  2F51               	goto	l1301
  2338     07BE                     u1170:
  2339     07BE                     l1321:
  2340                           
  2341                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  2342     07BE  1283               	bcf	3,5	;RP0=0, select bank0
  2343     07BF  1303               	bcf	3,6	;RP1=0, select bank0
  2344     07C0  0838               	movf	dtoa@s,w
  2345     07C1  1903               	btfsc	3,2
  2346     07C2  2FC4               	goto	u1181
  2347     07C3  2FC5               	goto	u1180
  2348     07C4                     u1181:
  2349     07C4  2FD1               	goto	l1327
  2350     07C5                     u1180:
  2351     07C5                     l1323:
  2352                           
  2353                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 577:         --i;
  2354     07C5  30FF               	movlw	255
  2355     07C6  07B9               	addwf	dtoa@i,f
  2356     07C7  1803               	skipnc
  2357     07C8  0ABA               	incf	dtoa@i+1,f
  2358     07C9  30FF               	movlw	255
  2359     07CA  07BA               	addwf	dtoa@i+1,f
  2360     07CB                     l1325:
  2361                           
  2362                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  2363     07CB  0839               	movf	dtoa@i,w
  2364     07CC  3EA5               	addlw	(low (_dbuf| 0))& (0+255)
  2365     07CD  0084               	movwf	4
  2366     07CE  0838               	movf	dtoa@s,w
  2367     07CF  1383               	bcf	3,7	;select IRP bank1
  2368     07D0  0080               	movwf	0
  2369     07D1                     l1327:
  2370                           
  2371                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2372     07D1  082F               	movf	dtoa@fp,w
  2373     07D2  00A8               	movwf	pad@fp
  2374     07D3  0830               	movf	dtoa@fp+1,w
  2375     07D4  00A9               	movwf	pad@fp+1
  2376     07D5  0839               	movf	dtoa@i,w
  2377     07D6  3EA5               	addlw	(low (_dbuf| 0))& (0+255)
  2378     07D7  00AA               	movwf	pad@buf
  2379     07D8  0837               	movf	dtoa@w+1,w
  2380     07D9  00AC               	movwf	pad@p+1
  2381     07DA  0836               	movf	dtoa@w,w
  2382     07DB  00AB               	movwf	pad@p
  2383     07DC  120A  118A  2363  120A  118A  	fcall	_pad
  2384     07E1                     l674:
  2385     07E1  0008               	return
  2386     07E2                     __end_of_dtoa:
  2387                           
  2388                           	psect	text11
  2389     0363                     __ptext11:	
  2390 ;; *************** function _pad *****************
  2391 ;; Defined at:
  2392 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;  fp              2    8[BANK0 ] PTR struct _IO_FILE
  2395 ;;		 -> sprintf@f(11), 
  2396 ;;  buf             1   10[BANK0 ] PTR unsigned char 
  2397 ;;		 -> dbuf(32), 
  2398 ;;  p               2   11[BANK0 ] int 
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;  i               2   13[BANK0 ] int 
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  1    wreg      void 
  2403 ;; Registers used:
  2404 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2410 ;;      Params:         0       5       0       0       0
  2411 ;;      Locals:         0       2       0       0       0
  2412 ;;      Temps:          1       0       0       0       0
  2413 ;;      Totals:         1       7       0       0       0
  2414 ;;Total ram usage:        8 bytes
  2415 ;; Hardware stack levels used: 1
  2416 ;; Hardware stack levels required when called: 3
  2417 ;; This function calls:
  2418 ;;		_fputc
  2419 ;;		_fputs
  2420 ;; This function is called by:
  2421 ;;		_dtoa
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425     0363                     _pad:	
  2426                           ;psect for function _pad
  2427                           
  2428     0363                     l1261:	
  2429                           ;incstack = 0
  2430 ;; hardware stack exceeded
  2431                           ; Regs used in _pad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2432                           
  2433                           
  2434                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  2435     0363  1283               	bcf	3,5	;RP0=0, select bank0
  2436     0364  1303               	bcf	3,6	;RP1=0, select bank0
  2437     0365  1C6F               	btfss	_flags,0
  2438     0366  2B68               	goto	u1041
  2439     0367  2B69               	goto	u1040
  2440     0368                     u1041:
  2441     0368  2B74               	goto	l1265
  2442     0369                     u1040:
  2443     0369                     l1263:
  2444                           
  2445                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  2446     0369  082A               	movf	pad@buf,w
  2447     036A  00A0               	movwf	fputs@s
  2448     036B  0828               	movf	pad@fp,w
  2449     036C  00A1               	movwf	fputs@fp
  2450     036D  0829               	movf	pad@fp+1,w
  2451     036E  00A2               	movwf	fputs@fp+1
  2452     036F  120A  118A  2338  120A  118A  	fcall	_fputs
  2453     0374                     l1265:
  2454                           
  2455                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2456     0374  1283               	bcf	3,5	;RP0=0, select bank0
  2457     0375  1303               	bcf	3,6	;RP1=0, select bank0
  2458     0376  1FAC               	btfss	pad@p+1,7
  2459     0377  2B79               	goto	u1051
  2460     0378  2B7A               	goto	u1050
  2461     0379                     u1051:
  2462     0379  2B7C               	goto	l653
  2463     037A                     u1050:
  2464     037A                     l1267:
  2465                           
  2466                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2467     037A  01AB               	clrf	pad@p
  2468     037B  01AC               	clrf	pad@p+1
  2469     037C                     l653:	
  2470                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 207:  }
  2471                           
  2472                           
  2473                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2474     037C  01AD               	clrf	pad@i
  2475     037D  01AE               	clrf	pad@i+1
  2476                           
  2477                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2478     037E  2B96               	goto	l1273
  2479     037F                     l1269:
  2480                           
  2481                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  2482     037F  3020               	movlw	32
  2483     0380  00F0               	movwf	fputc@c
  2484     0381  3000               	movlw	0
  2485     0382  00F1               	movwf	fputc@c+1
  2486     0383  1283               	bcf	3,5	;RP0=0, select bank0
  2487     0384  1303               	bcf	3,6	;RP1=0, select bank0
  2488     0385  0828               	movf	pad@fp,w
  2489     0386  00F2               	movwf	fputc@fp
  2490     0387  0829               	movf	pad@fp+1,w
  2491     0388  00F3               	movwf	fputc@fp+1
  2492     0389  120A  118A  25BD  120A  118A  	fcall	_fputc
  2493     038E                     l1271:
  2494                           
  2495                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 211:         ++i;
  2496     038E  3001               	movlw	1
  2497     038F  1283               	bcf	3,5	;RP0=0, select bank0
  2498     0390  1303               	bcf	3,6	;RP1=0, select bank0
  2499     0391  07AD               	addwf	pad@i,f
  2500     0392  1803               	skipnc
  2501     0393  0AAE               	incf	pad@i+1,f
  2502     0394  3000               	movlw	0
  2503     0395  07AE               	addwf	pad@i+1,f
  2504     0396                     l1273:
  2505                           
  2506                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2507     0396  082E               	movf	pad@i+1,w
  2508     0397  3A80               	xorlw	128
  2509     0398  00FD               	movwf	??_pad
  2510     0399  082C               	movf	pad@p+1,w
  2511     039A  3A80               	xorlw	128
  2512     039B  027D               	subwf	??_pad,w
  2513     039C  1D03               	skipz
  2514     039D  2BA0               	goto	u1065
  2515     039E  082B               	movf	pad@p,w
  2516     039F  022D               	subwf	pad@i,w
  2517     03A0                     u1065:
  2518     03A0  1C03               	skipc
  2519     03A1  2BA3               	goto	u1061
  2520     03A2  2BA4               	goto	u1060
  2521     03A3                     u1061:
  2522     03A3  2B7F               	goto	l1269
  2523     03A4                     u1060:
  2524     03A4                     l656:
  2525                           
  2526                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  2527     03A4  1283               	bcf	3,5	;RP0=0, select bank0
  2528     03A5  1303               	bcf	3,6	;RP1=0, select bank0
  2529     03A6  186F               	btfsc	_flags,0
  2530     03A7  2BA9               	goto	u1071
  2531     03A8  2BAA               	goto	u1070
  2532     03A9                     u1071:
  2533     03A9  2BB5               	goto	l658
  2534     03AA                     u1070:
  2535     03AA                     l1275:
  2536                           
  2537                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  2538     03AA  082A               	movf	pad@buf,w
  2539     03AB  00A0               	movwf	fputs@s
  2540     03AC  0828               	movf	pad@fp,w
  2541     03AD  00A1               	movwf	fputs@fp
  2542     03AE  0829               	movf	pad@fp+1,w
  2543     03AF  00A2               	movwf	fputs@fp+1
  2544     03B0  120A  118A  2338  120A  118A  	fcall	_fputs
  2545     03B5                     l658:
  2546     03B5  0008               	return
  2547     03B6                     __end_of_pad:
  2548                           
  2549                           	psect	text12
  2550     0338                     __ptext12:	
  2551 ;; *************** function _fputs *****************
  2552 ;; Defined at:
  2553 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputs.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;  s               1    0[BANK0 ] PTR const unsigned char 
  2556 ;;		 -> dbuf(32), 
  2557 ;;  fp              2    1[BANK0 ] PTR struct _IO_FILE
  2558 ;;		 -> sprintf@f(11), 
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;  i               2    6[BANK0 ] int 
  2561 ;;  c               1    5[BANK0 ] unsigned char 
  2562 ;; Return value:  Size  Location     Type
  2563 ;;                  2    0[BANK0 ] int 
  2564 ;; Registers used:
  2565 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2566 ;; Tracked objects:
  2567 ;;		On entry : 0/0
  2568 ;;		On exit  : 0/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2571 ;;      Params:         0       3       0       0       0
  2572 ;;      Locals:         0       3       0       0       0
  2573 ;;      Temps:          0       2       0       0       0
  2574 ;;      Totals:         0       8       0       0       0
  2575 ;;Total ram usage:        8 bytes
  2576 ;; Hardware stack levels used: 1
  2577 ;; Hardware stack levels required when called: 2
  2578 ;; This function calls:
  2579 ;;		_fputc
  2580 ;; This function is called by:
  2581 ;;		_pad
  2582 ;; This function uses a non-reentrant model
  2583 ;;
  2584                           
  2585     0338                     _fputs:	
  2586                           ;psect for function _fputs
  2587                           
  2588     0338                     l1157:	
  2589                           ;incstack = 0
  2590 ;; hardware stack exceeded
  2591                           ; Regs used in _fputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2592                           
  2593     0338  1283               	bcf	3,5	;RP0=0, select bank0
  2594     0339  1303               	bcf	3,6	;RP1=0, select bank0
  2595     033A  01A6               	clrf	fputs@i
  2596     033B  01A7               	clrf	fputs@i+1
  2597     033C  2B55               	goto	l1163
  2598     033D                     l1159:
  2599     033D  0825               	movf	fputs@c,w
  2600     033E  00A3               	movwf	??_fputs
  2601     033F  01A4               	clrf	??_fputs+1
  2602     0340  0823               	movf	??_fputs,w
  2603     0341  00F0               	movwf	fputc@c
  2604     0342  0824               	movf	??_fputs+1,w
  2605     0343  00F1               	movwf	fputc@c+1
  2606     0344  0821               	movf	fputs@fp,w
  2607     0345  00F2               	movwf	fputc@fp
  2608     0346  0822               	movf	fputs@fp+1,w
  2609     0347  00F3               	movwf	fputc@fp+1
  2610     0348  120A  118A  25BD  120A  118A  	fcall	_fputc
  2611     034D                     l1161:
  2612     034D  3001               	movlw	1
  2613     034E  1283               	bcf	3,5	;RP0=0, select bank0
  2614     034F  1303               	bcf	3,6	;RP1=0, select bank0
  2615     0350  07A6               	addwf	fputs@i,f
  2616     0351  1803               	skipnc
  2617     0352  0AA7               	incf	fputs@i+1,f
  2618     0353  3000               	movlw	0
  2619     0354  07A7               	addwf	fputs@i+1,f
  2620     0355                     l1163:
  2621     0355  0826               	movf	fputs@i,w
  2622     0356  0720               	addwf	fputs@s,w
  2623     0357  00A3               	movwf	??_fputs
  2624     0358  0823               	movf	??_fputs,w
  2625     0359  0084               	movwf	4
  2626     035A  1383               	bcf	3,7	;select IRP bank0
  2627     035B  0800               	movf	0,w
  2628     035C  00A5               	movwf	fputs@c
  2629     035D  0825               	movf	fputs@c,w
  2630     035E  1D03               	btfss	3,2
  2631     035F  2B61               	goto	u801
  2632     0360  2B62               	goto	u800
  2633     0361                     u801:
  2634     0361  2B3D               	goto	l1159
  2635     0362                     u800:
  2636     0362                     l730:
  2637     0362  0008               	return
  2638     0363                     __end_of_fputs:
  2639                           
  2640                           	psect	text13
  2641     05BD                     __ptext13:	
  2642 ;; *************** function _fputc *****************
  2643 ;; Defined at:
  2644 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;  c               2    0[COMMON] int 
  2647 ;;  fp              2    2[COMMON] PTR struct _IO_FILE
  2648 ;;		 -> sprintf@f(11), 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;		None
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  2    0[COMMON] int 
  2653 ;; Registers used:
  2654 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2660 ;;      Params:         4       0       0       0       0
  2661 ;;      Locals:         0       0       0       0       0
  2662 ;;      Temps:          9       0       0       0       0
  2663 ;;      Totals:        13       0       0       0       0
  2664 ;;Total ram usage:       13 bytes
  2665 ;; Hardware stack levels used: 1
  2666 ;; Hardware stack levels required when called: 1
  2667 ;; This function calls:
  2668 ;;		_putch
  2669 ;; This function is called by:
  2670 ;;		_pad
  2671 ;;		_vfpfcnvrt
  2672 ;;		_fputs
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675                           
  2676     05BD                     _fputc:	
  2677                           ;psect for function _fputc
  2678                           
  2679     05BD                     l1143:	
  2680                           ;incstack = 0
  2681                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2682                           
  2683     05BD  0872               	movf	fputc@fp,w
  2684     05BE  0473               	iorwf	fputc@fp+1,w
  2685     05BF  1903               	btfsc	3,2
  2686     05C0  2DC2               	goto	u751
  2687     05C1  2DC3               	goto	u750
  2688     05C2                     u751:
  2689     05C2  2DC9               	goto	l1147
  2690     05C3                     u750:
  2691     05C3                     l1145:
  2692     05C3  0872               	movf	fputc@fp,w
  2693     05C4  0473               	iorwf	fputc@fp+1,w
  2694     05C5  1D03               	btfss	3,2
  2695     05C6  2DC8               	goto	u761
  2696     05C7  2DC9               	goto	u760
  2697     05C8                     u761:
  2698     05C8  2DD0               	goto	l1149
  2699     05C9                     u760:
  2700     05C9                     l1147:
  2701     05C9  0870               	movf	fputc@c,w
  2702     05CA  120A  118A  2224  120A  118A  	fcall	_putch
  2703     05CF  2E56               	goto	l722
  2704     05D0                     l1149:
  2705     05D0  0872               	movf	fputc@fp,w
  2706     05D1  3E09               	addlw	9
  2707     05D2  00F4               	movwf	??_fputc
  2708     05D3  0873               	movf	fputc@fp+1,w
  2709     05D4  1803               	skipnc
  2710     05D5  3E01               	addlw	1
  2711     05D6  3E00               	addlw	0
  2712     05D7  00F5               	movwf	??_fputc+1
  2713     05D8  0874               	movf	??_fputc,w
  2714     05D9  0084               	movwf	4
  2715     05DA  1783               	bsf	3,7
  2716     05DB  1C75               	btfss	??_fputc+1,0
  2717     05DC  1383               	bcf	3,7
  2718     05DD  0800               	movf	0,w
  2719     05DE  00F6               	movwf	??_fputc+2
  2720     05DF  0A84               	incf	4,f
  2721     05E0  0800               	movf	0,w
  2722     05E1  00F7               	movwf	??_fputc+3
  2723     05E2  0876               	movf	??_fputc+2,w
  2724     05E3  0477               	iorwf	??_fputc+3,w
  2725     05E4  1903               	btfsc	3,2
  2726     05E5  2DE7               	goto	u771
  2727     05E6  2DE8               	goto	u770
  2728     05E7                     u771:
  2729     05E7  2E1A               	goto	l1153
  2730     05E8                     u770:
  2731     05E8                     l1151:
  2732     05E8  0872               	movf	fputc@fp,w
  2733     05E9  3E09               	addlw	9
  2734     05EA  00F4               	movwf	??_fputc
  2735     05EB  0873               	movf	fputc@fp+1,w
  2736     05EC  1803               	skipnc
  2737     05ED  3E01               	addlw	1
  2738     05EE  3E00               	addlw	0
  2739     05EF  00F5               	movwf	??_fputc+1
  2740     05F0  0874               	movf	??_fputc,w
  2741     05F1  0084               	movwf	4
  2742     05F2  1783               	bsf	3,7
  2743     05F3  1C75               	btfss	??_fputc+1,0
  2744     05F4  1383               	bcf	3,7
  2745     05F5  0800               	movf	0,w
  2746     05F6  00F6               	movwf	??_fputc+2
  2747     05F7  0A84               	incf	4,f
  2748     05F8  0800               	movf	0,w
  2749     05F9  00F7               	movwf	??_fputc+3
  2750     05FA  0872               	movf	fputc@fp,w
  2751     05FB  3E02               	addlw	2
  2752     05FC  00F8               	movwf	??_fputc+4
  2753     05FD  0873               	movf	fputc@fp+1,w
  2754     05FE  1803               	skipnc
  2755     05FF  3E01               	addlw	1
  2756     0600  3E00               	addlw	0
  2757     0601  00F9               	movwf	??_fputc+5
  2758     0602  0878               	movf	??_fputc+4,w
  2759     0603  0084               	movwf	4
  2760     0604  1783               	bsf	3,7
  2761     0605  1C79               	btfss	??_fputc+5,0
  2762     0606  1383               	bcf	3,7
  2763     0607  0800               	movf	0,w
  2764     0608  00FA               	movwf	??_fputc+6
  2765     0609  0A84               	incf	4,f
  2766     060A  0800               	movf	0,w
  2767     060B  00FB               	movwf	??_fputc+7
  2768     060C  087B               	movf	??_fputc+7,w
  2769     060D  3A80               	xorlw	128
  2770     060E  00FC               	movwf	??_fputc+8
  2771     060F  0877               	movf	??_fputc+3,w
  2772     0610  3A80               	xorlw	128
  2773     0611  027C               	subwf	??_fputc+8,w
  2774     0612  1D03               	skipz
  2775     0613  2E16               	goto	u785
  2776     0614  0876               	movf	??_fputc+2,w
  2777     0615  027A               	subwf	??_fputc+6,w
  2778     0616                     u785:
  2779     0616  1803               	skipnc
  2780     0617  2E19               	goto	u781
  2781     0618  2E1A               	goto	u780
  2782     0619                     u781:
  2783     0619  2E56               	goto	l722
  2784     061A                     u780:
  2785     061A                     l1153:
  2786     061A  0872               	movf	fputc@fp,w
  2787     061B  0084               	movwf	4
  2788     061C  1783               	bsf	3,7
  2789     061D  1C73               	btfss	fputc@fp+1,0
  2790     061E  1383               	bcf	3,7
  2791     061F  0800               	movf	0,w
  2792     0620  00F4               	movwf	??_fputc
  2793     0621  0A84               	incf	4,f
  2794     0622  0800               	movf	0,w
  2795     0623  00F5               	movwf	??_fputc+1
  2796     0624  0872               	movf	fputc@fp,w
  2797     0625  3E02               	addlw	2
  2798     0626  00F6               	movwf	??_fputc+2
  2799     0627  0873               	movf	fputc@fp+1,w
  2800     0628  1803               	skipnc
  2801     0629  3E01               	addlw	1
  2802     062A  3E00               	addlw	0
  2803     062B  00F7               	movwf	??_fputc+3
  2804     062C  0876               	movf	??_fputc+2,w
  2805     062D  0084               	movwf	4
  2806     062E  1783               	bsf	3,7
  2807     062F  1C77               	btfss	??_fputc+3,0
  2808     0630  1383               	bcf	3,7
  2809     0631  0800               	movf	0,w
  2810     0632  0774               	addwf	??_fputc,w
  2811     0633  00F9               	movwf	??_fputc+5
  2812     0634  0875               	movf	??_fputc+1,w
  2813     0635  00F8               	movwf	??_fputc+4
  2814     0636  1803               	skipnc
  2815     0637  0AF8               	incf	??_fputc+4,f
  2816     0638  1F80               	btfss	0,7
  2817     0639  2E3B               	goto	u790
  2818     063A  03F8               	decf	??_fputc+4,f
  2819     063B                     u790:
  2820     063B  0878               	movf	??_fputc+4,w
  2821     063C  00FA               	movwf	??_fputc+6
  2822     063D  0879               	movf	??_fputc+5,w
  2823     063E  0084               	movwf	4
  2824     063F  1783               	bsf	3,7
  2825     0640  1C7A               	btfss	??_fputc+6,0
  2826     0641  1383               	bcf	3,7
  2827     0642  0870               	movf	fputc@c,w
  2828     0643  0080               	movwf	0
  2829     0644  0872               	movf	fputc@fp,w
  2830     0645  3E02               	addlw	2
  2831     0646  00F4               	movwf	??_fputc
  2832     0647  0873               	movf	fputc@fp+1,w
  2833     0648  1803               	skipnc
  2834     0649  3E01               	addlw	1
  2835     064A  3E00               	addlw	0
  2836     064B  00F5               	movwf	??_fputc+1
  2837     064C  0874               	movf	??_fputc,w
  2838     064D  0084               	movwf	4
  2839     064E  1783               	bsf	3,7
  2840     064F  1C75               	btfss	??_fputc+1,0
  2841     0650  1383               	bcf	3,7
  2842     0651  3001               	movlw	1
  2843     0652  0780               	addwf	0,f
  2844     0653  0A84               	incf	4,f
  2845     0654  1803               	skipnc
  2846     0655  0A80               	incf	0,f
  2847     0656                     l722:
  2848     0656  0008               	return
  2849     0657                     __end_of_fputc:
  2850                           
  2851                           	psect	text14
  2852     0224                     __ptext14:	
  2853 ;; *************** function _putch *****************
  2854 ;; Defined at:
  2855 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;  c               1    wreg     unsigned char 
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;  c               1    0[COMMON] unsigned char 
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		wreg
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2869 ;;      Params:         0       0       0       0       0
  2870 ;;      Locals:         0       0       0       0       0
  2871 ;;      Temps:          0       0       0       0       0
  2872 ;;      Totals:         0       0       0       0       0
  2873 ;;Total ram usage:        0 bytes
  2874 ;; Hardware stack levels used: 1
  2875 ;; This function calls:
  2876 ;;		Nothing
  2877 ;; This function is called by:
  2878 ;;		_fputc
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882     0224                     _putch:	
  2883                           ;psect for function _putch
  2884                           
  2885     0224                     l733:	
  2886                           ;incstack = 0
  2887                           ; Regs used in _putch: [wreg]
  2888                           
  2889     0224  0008               	return
  2890     0225                     __end_of_putch:
  2891                           
  2892                           	psect	text15
  2893     023D                     __ptext15:	
  2894 ;; *************** function _abs *****************
  2895 ;; Defined at:
  2896 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\abs.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;  a               2    6[COMMON] int 
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  2    6[COMMON] int 
  2903 ;; Registers used:
  2904 ;;		wreg, status,2, status,0
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2910 ;;      Params:         2       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0
  2912 ;;      Temps:          2       0       0       0       0
  2913 ;;      Totals:         4       0       0       0       0
  2914 ;;Total ram usage:        4 bytes
  2915 ;; Hardware stack levels used: 1
  2916 ;; This function calls:
  2917 ;;		Nothing
  2918 ;; This function is called by:
  2919 ;;		_dtoa
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923     023D                     _abs:	
  2924                           ;psect for function _abs
  2925                           
  2926     023D                     l1277:	
  2927                           ;incstack = 0
  2928                           ; Regs used in _abs: [wreg+status,2+status,0]
  2929                           
  2930     023D  1BF7               	btfsc	abs@a+1,7
  2931     023E  2A40               	goto	u1081
  2932     023F  2A41               	goto	u1080
  2933     0240                     u1081:
  2934     0240  2A42               	goto	l1281
  2935     0241                     u1080:
  2936     0241                     l1279:
  2937     0241  2A4D               	goto	l710
  2938     0242                     l1281:
  2939     0242  0976               	comf	abs@a,w
  2940     0243  00F8               	movwf	??_abs
  2941     0244  0977               	comf	abs@a+1,w
  2942     0245  00F9               	movwf	??_abs+1
  2943     0246  0AF8               	incf	??_abs,f
  2944     0247  1903               	skipnz
  2945     0248  0AF9               	incf	??_abs+1,f
  2946     0249  0878               	movf	??_abs,w
  2947     024A  00F6               	movwf	?_abs
  2948     024B  0879               	movf	??_abs+1,w
  2949     024C  00F7               	movwf	?_abs+1
  2950     024D                     l710:
  2951     024D  0008               	return
  2952     024E                     __end_of_abs:
  2953                           
  2954                           	psect	text16
  2955     0409                     __ptext16:	
  2956 ;; *************** function ___awmod *****************
  2957 ;; Defined at:
  2958 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;  divisor         2    0[COMMON] int 
  2961 ;;  dividend        2    2[COMMON] int 
  2962 ;; Auto vars:     Size  Location     Type
  2963 ;;  sign            1    5[COMMON] unsigned char 
  2964 ;;  counter         1    4[COMMON] unsigned char 
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  2    0[COMMON] int 
  2967 ;; Registers used:
  2968 ;;		wreg, status,2, status,0
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2974 ;;      Params:         4       0       0       0       0
  2975 ;;      Locals:         2       0       0       0       0
  2976 ;;      Temps:          0       0       0       0       0
  2977 ;;      Totals:         6       0       0       0       0
  2978 ;;Total ram usage:        6 bytes
  2979 ;; Hardware stack levels used: 1
  2980 ;; This function calls:
  2981 ;;		Nothing
  2982 ;; This function is called by:
  2983 ;;		_dtoa
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987     0409                     ___awmod:	
  2988                           ;psect for function ___awmod
  2989                           
  2990     0409                     l1223:	
  2991                           ;incstack = 0
  2992                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2993                           
  2994     0409  01F5               	clrf	___awmod@sign
  2995     040A                     l1225:
  2996     040A  1FF3               	btfss	___awmod@dividend+1,7
  2997     040B  2C0D               	goto	u951
  2998     040C  2C0E               	goto	u950
  2999     040D                     u951:
  3000     040D  2C15               	goto	l1231
  3001     040E                     u950:
  3002     040E                     l1227:
  3003     040E  09F2               	comf	___awmod@dividend,f
  3004     040F  09F3               	comf	___awmod@dividend+1,f
  3005     0410  0AF2               	incf	___awmod@dividend,f
  3006     0411  1903               	skipnz
  3007     0412  0AF3               	incf	___awmod@dividend+1,f
  3008     0413                     l1229:
  3009     0413  3001               	movlw	1
  3010     0414  00F5               	movwf	___awmod@sign
  3011     0415                     l1231:
  3012     0415  1FF1               	btfss	___awmod@divisor+1,7
  3013     0416  2C18               	goto	u961
  3014     0417  2C19               	goto	u960
  3015     0418                     u961:
  3016     0418  2C1E               	goto	l1235
  3017     0419                     u960:
  3018     0419                     l1233:
  3019     0419  09F0               	comf	___awmod@divisor,f
  3020     041A  09F1               	comf	___awmod@divisor+1,f
  3021     041B  0AF0               	incf	___awmod@divisor,f
  3022     041C  1903               	skipnz
  3023     041D  0AF1               	incf	___awmod@divisor+1,f
  3024     041E                     l1235:
  3025     041E  0870               	movf	___awmod@divisor,w
  3026     041F  0471               	iorwf	___awmod@divisor+1,w
  3027     0420  1903               	btfsc	3,2
  3028     0421  2C23               	goto	u971
  3029     0422  2C24               	goto	u970
  3030     0423                     u971:
  3031     0423  2C51               	goto	l1253
  3032     0424                     u970:
  3033     0424                     l1237:
  3034     0424  3001               	movlw	1
  3035     0425  00F4               	movwf	___awmod@counter
  3036     0426  2C30               	goto	l1243
  3037     0427                     l1239:
  3038     0427  3001               	movlw	1
  3039     0428                     u985:
  3040     0428  1003               	clrc
  3041     0429  0DF0               	rlf	___awmod@divisor,f
  3042     042A  0DF1               	rlf	___awmod@divisor+1,f
  3043     042B  3EFF               	addlw	-1
  3044     042C  1D03               	skipz
  3045     042D  2C28               	goto	u985
  3046     042E                     l1241:
  3047     042E  3001               	movlw	1
  3048     042F  07F4               	addwf	___awmod@counter,f
  3049     0430                     l1243:
  3050     0430  1FF1               	btfss	___awmod@divisor+1,7
  3051     0431  2C33               	goto	u991
  3052     0432  2C34               	goto	u990
  3053     0433                     u991:
  3054     0433  2C27               	goto	l1239
  3055     0434                     u990:
  3056     0434                     l1245:
  3057     0434  0871               	movf	___awmod@divisor+1,w
  3058     0435  0273               	subwf	___awmod@dividend+1,w
  3059     0436  1D03               	skipz
  3060     0437  2C3A               	goto	u1005
  3061     0438  0870               	movf	___awmod@divisor,w
  3062     0439  0272               	subwf	___awmod@dividend,w
  3063     043A                     u1005:
  3064     043A  1C03               	skipc
  3065     043B  2C3D               	goto	u1001
  3066     043C  2C3E               	goto	u1000
  3067     043D                     u1001:
  3068     043D  2C44               	goto	l1249
  3069     043E                     u1000:
  3070     043E                     l1247:
  3071     043E  0870               	movf	___awmod@divisor,w
  3072     043F  02F2               	subwf	___awmod@dividend,f
  3073     0440  0871               	movf	___awmod@divisor+1,w
  3074     0441  1C03               	skipc
  3075     0442  03F3               	decf	___awmod@dividend+1,f
  3076     0443  02F3               	subwf	___awmod@dividend+1,f
  3077     0444                     l1249:
  3078     0444  3001               	movlw	1
  3079     0445                     u1015:
  3080     0445  1003               	clrc
  3081     0446  0CF1               	rrf	___awmod@divisor+1,f
  3082     0447  0CF0               	rrf	___awmod@divisor,f
  3083     0448  3EFF               	addlw	-1
  3084     0449  1D03               	skipz
  3085     044A  2C45               	goto	u1015
  3086     044B                     l1251:
  3087     044B  3001               	movlw	1
  3088     044C  02F4               	subwf	___awmod@counter,f
  3089     044D  1D03               	btfss	3,2
  3090     044E  2C50               	goto	u1021
  3091     044F  2C51               	goto	u1020
  3092     0450                     u1021:
  3093     0450  2C34               	goto	l1245
  3094     0451                     u1020:
  3095     0451                     l1253:
  3096     0451  0875               	movf	___awmod@sign,w
  3097     0452  1903               	btfsc	3,2
  3098     0453  2C55               	goto	u1031
  3099     0454  2C56               	goto	u1030
  3100     0455                     u1031:
  3101     0455  2C5B               	goto	l1257
  3102     0456                     u1030:
  3103     0456                     l1255:
  3104     0456  09F2               	comf	___awmod@dividend,f
  3105     0457  09F3               	comf	___awmod@dividend+1,f
  3106     0458  0AF2               	incf	___awmod@dividend,f
  3107     0459  1903               	skipnz
  3108     045A  0AF3               	incf	___awmod@dividend+1,f
  3109     045B                     l1257:
  3110     045B  0873               	movf	___awmod@dividend+1,w
  3111     045C  00F1               	movwf	?___awmod+1
  3112     045D  0872               	movf	___awmod@dividend,w
  3113     045E  00F0               	movwf	?___awmod
  3114     045F                     l336:
  3115     045F  0008               	return
  3116     0460                     __end_of___awmod:
  3117                           
  3118                           	psect	text17
  3119     0460                     __ptext17:	
  3120 ;; *************** function ___awdiv *****************
  3121 ;; Defined at:
  3122 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;  divisor         2    0[COMMON] int 
  3125 ;;  dividend        2    2[COMMON] int 
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;  quotient        2    6[COMMON] int 
  3128 ;;  sign            1    5[COMMON] unsigned char 
  3129 ;;  counter         1    4[COMMON] unsigned char 
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  2    0[COMMON] int 
  3132 ;; Registers used:
  3133 ;;		wreg, status,2, status,0
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3139 ;;      Params:         4       0       0       0       0
  3140 ;;      Locals:         4       0       0       0       0
  3141 ;;      Temps:          0       0       0       0       0
  3142 ;;      Totals:         8       0       0       0       0
  3143 ;;Total ram usage:        8 bytes
  3144 ;; Hardware stack levels used: 1
  3145 ;; This function calls:
  3146 ;;		Nothing
  3147 ;; This function is called by:
  3148 ;;		_dtoa
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152     0460                     ___awdiv:	
  3153                           ;psect for function ___awdiv
  3154                           
  3155     0460                     l1179:	
  3156                           ;incstack = 0
  3157                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3158                           
  3159     0460  01F5               	clrf	___awdiv@sign
  3160     0461                     l1181:
  3161     0461  1FF1               	btfss	___awdiv@divisor+1,7
  3162     0462  2C64               	goto	u851
  3163     0463  2C65               	goto	u850
  3164     0464                     u851:
  3165     0464  2C6C               	goto	l1187
  3166     0465                     u850:
  3167     0465                     l1183:
  3168     0465  09F0               	comf	___awdiv@divisor,f
  3169     0466  09F1               	comf	___awdiv@divisor+1,f
  3170     0467  0AF0               	incf	___awdiv@divisor,f
  3171     0468  1903               	skipnz
  3172     0469  0AF1               	incf	___awdiv@divisor+1,f
  3173     046A                     l1185:
  3174     046A  3001               	movlw	1
  3175     046B  00F5               	movwf	___awdiv@sign
  3176     046C                     l1187:
  3177     046C  1FF3               	btfss	___awdiv@dividend+1,7
  3178     046D  2C6F               	goto	u861
  3179     046E  2C70               	goto	u860
  3180     046F                     u861:
  3181     046F  2C77               	goto	l1193
  3182     0470                     u860:
  3183     0470                     l1189:
  3184     0470  09F2               	comf	___awdiv@dividend,f
  3185     0471  09F3               	comf	___awdiv@dividend+1,f
  3186     0472  0AF2               	incf	___awdiv@dividend,f
  3187     0473  1903               	skipnz
  3188     0474  0AF3               	incf	___awdiv@dividend+1,f
  3189     0475                     l1191:
  3190     0475  3001               	movlw	1
  3191     0476  06F5               	xorwf	___awdiv@sign,f
  3192     0477                     l1193:
  3193     0477  01F6               	clrf	___awdiv@quotient
  3194     0478  01F7               	clrf	___awdiv@quotient+1
  3195     0479                     l1195:
  3196     0479  0870               	movf	___awdiv@divisor,w
  3197     047A  0471               	iorwf	___awdiv@divisor+1,w
  3198     047B  1903               	btfsc	3,2
  3199     047C  2C7E               	goto	u871
  3200     047D  2C7F               	goto	u870
  3201     047E                     u871:
  3202     047E  2CB4               	goto	l1215
  3203     047F                     u870:
  3204     047F                     l1197:
  3205     047F  3001               	movlw	1
  3206     0480  00F4               	movwf	___awdiv@counter
  3207     0481  2C8B               	goto	l1203
  3208     0482                     l1199:
  3209     0482  3001               	movlw	1
  3210     0483                     u885:
  3211     0483  1003               	clrc
  3212     0484  0DF0               	rlf	___awdiv@divisor,f
  3213     0485  0DF1               	rlf	___awdiv@divisor+1,f
  3214     0486  3EFF               	addlw	-1
  3215     0487  1D03               	skipz
  3216     0488  2C83               	goto	u885
  3217     0489                     l1201:
  3218     0489  3001               	movlw	1
  3219     048A  07F4               	addwf	___awdiv@counter,f
  3220     048B                     l1203:
  3221     048B  1FF1               	btfss	___awdiv@divisor+1,7
  3222     048C  2C8E               	goto	u891
  3223     048D  2C8F               	goto	u890
  3224     048E                     u891:
  3225     048E  2C82               	goto	l1199
  3226     048F                     u890:
  3227     048F                     l1205:
  3228     048F  3001               	movlw	1
  3229     0490                     u905:
  3230     0490  1003               	clrc
  3231     0491  0DF6               	rlf	___awdiv@quotient,f
  3232     0492  0DF7               	rlf	___awdiv@quotient+1,f
  3233     0493  3EFF               	addlw	-1
  3234     0494  1D03               	skipz
  3235     0495  2C90               	goto	u905
  3236     0496  0871               	movf	___awdiv@divisor+1,w
  3237     0497  0273               	subwf	___awdiv@dividend+1,w
  3238     0498  1D03               	skipz
  3239     0499  2C9C               	goto	u915
  3240     049A  0870               	movf	___awdiv@divisor,w
  3241     049B  0272               	subwf	___awdiv@dividend,w
  3242     049C                     u915:
  3243     049C  1C03               	skipc
  3244     049D  2C9F               	goto	u911
  3245     049E  2CA0               	goto	u910
  3246     049F                     u911:
  3247     049F  2CA7               	goto	l1211
  3248     04A0                     u910:
  3249     04A0                     l1207:
  3250     04A0  0870               	movf	___awdiv@divisor,w
  3251     04A1  02F2               	subwf	___awdiv@dividend,f
  3252     04A2  0871               	movf	___awdiv@divisor+1,w
  3253     04A3  1C03               	skipc
  3254     04A4  03F3               	decf	___awdiv@dividend+1,f
  3255     04A5  02F3               	subwf	___awdiv@dividend+1,f
  3256     04A6                     l1209:
  3257     04A6  1476               	bsf	___awdiv@quotient,0
  3258     04A7                     l1211:
  3259     04A7  3001               	movlw	1
  3260     04A8                     u925:
  3261     04A8  1003               	clrc
  3262     04A9  0CF1               	rrf	___awdiv@divisor+1,f
  3263     04AA  0CF0               	rrf	___awdiv@divisor,f
  3264     04AB  3EFF               	addlw	-1
  3265     04AC  1D03               	skipz
  3266     04AD  2CA8               	goto	u925
  3267     04AE                     l1213:
  3268     04AE  3001               	movlw	1
  3269     04AF  02F4               	subwf	___awdiv@counter,f
  3270     04B0  1D03               	btfss	3,2
  3271     04B1  2CB3               	goto	u931
  3272     04B2  2CB4               	goto	u930
  3273     04B3                     u931:
  3274     04B3  2C8F               	goto	l1205
  3275     04B4                     u930:
  3276     04B4                     l1215:
  3277     04B4  0875               	movf	___awdiv@sign,w
  3278     04B5  1903               	btfsc	3,2
  3279     04B6  2CB8               	goto	u941
  3280     04B7  2CB9               	goto	u940
  3281     04B8                     u941:
  3282     04B8  2CBE               	goto	l1219
  3283     04B9                     u940:
  3284     04B9                     l1217:
  3285     04B9  09F6               	comf	___awdiv@quotient,f
  3286     04BA  09F7               	comf	___awdiv@quotient+1,f
  3287     04BB  0AF6               	incf	___awdiv@quotient,f
  3288     04BC  1903               	skipnz
  3289     04BD  0AF7               	incf	___awdiv@quotient+1,f
  3290     04BE                     l1219:
  3291     04BE  0877               	movf	___awdiv@quotient+1,w
  3292     04BF  00F1               	movwf	?___awdiv+1
  3293     04C0  0876               	movf	___awdiv@quotient,w
  3294     04C1  00F0               	movwf	?___awdiv
  3295     04C2                     l323:
  3296     04C2  0008               	return
  3297     04C3                     __end_of___awdiv:
  3298                           
  3299                           	psect	text18
  3300     0276                     __ptext18:	
  3301 ;; *************** function _lcd_string *****************
  3302 ;; Defined at:
  3303 ;;		line 45 in file "atividade7.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;  str             1    3[COMMON] PTR const unsigned char 
  3306 ;;		 -> atualiza_lcd@buffer(16), 
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;		None
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  1    wreg      void 
  3311 ;; Registers used:
  3312 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3318 ;;      Params:         1       0       0       0       0
  3319 ;;      Locals:         0       0       0       0       0
  3320 ;;      Temps:          0       0       0       0       0
  3321 ;;      Totals:         1       0       0       0       0
  3322 ;;Total ram usage:        1 bytes
  3323 ;; Hardware stack levels used: 1
  3324 ;; Hardware stack levels required when called: 1
  3325 ;; This function calls:
  3326 ;;		_lcd_data
  3327 ;; This function is called by:
  3328 ;;		_atualiza_lcd
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332     0276                     _lcd_string:	
  3333                           ;psect for function _lcd_string
  3334                           
  3335     0276                     l1425:	
  3336                           ;incstack = 0
  3337                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3338                           
  3339                           
  3340                           ;atividade7.c: 46:     while (*str) {
  3341     0276  2A81               	goto	l1431
  3342     0277                     l1427:
  3343                           
  3344                           ;atividade7.c: 47:         lcd_data(*str++);
  3345     0277  0873               	movf	lcd_string@str,w
  3346     0278  0084               	movwf	4
  3347     0279  0800               	movf	0,w
  3348     027A  120A  118A  2262  120A  118A  	fcall	_lcd_data
  3349     027F                     l1429:
  3350     027F  3001               	movlw	1
  3351     0280  07F3               	addwf	lcd_string@str,f
  3352     0281                     l1431:
  3353                           
  3354                           ;atividade7.c: 46:     while (*str) {
  3355     0281  0873               	movf	lcd_string@str,w
  3356     0282  0084               	movwf	4
  3357     0283  1383               	bcf	3,7	;select IRP bank0
  3358     0284  0800               	movf	0,w
  3359     0285  1D03               	btfss	3,2
  3360     0286  2A88               	goto	u1271
  3361     0287  2A89               	goto	u1270
  3362     0288                     u1271:
  3363     0288  2A77               	goto	l1427
  3364     0289                     u1270:
  3365     0289                     l36:
  3366     0289  0008               	return
  3367     028A                     __end_of_lcd_string:
  3368                           
  3369                           	psect	text19
  3370     0262                     __ptext19:	
  3371 ;; *************** function _lcd_data *****************
  3372 ;; Defined at:
  3373 ;;		line 29 in file "atividade7.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;  data            1    wreg     unsigned char 
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;  data            1    2[COMMON] unsigned char 
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  1    wreg      void 
  3380 ;; Registers used:
  3381 ;;		wreg
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3387 ;;      Params:         0       0       0       0       0
  3388 ;;      Locals:         1       0       0       0       0
  3389 ;;      Temps:          2       0       0       0       0
  3390 ;;      Totals:         3       0       0       0       0
  3391 ;;Total ram usage:        3 bytes
  3392 ;; Hardware stack levels used: 1
  3393 ;; This function calls:
  3394 ;;		Nothing
  3395 ;; This function is called by:
  3396 ;;		_lcd_string
  3397 ;;		_main
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401     0262                     _lcd_data:	
  3402                           ;psect for function _lcd_data
  3403                           
  3404                           
  3405                           ;incstack = 0
  3406                           ; Regs used in _lcd_data: [wreg]
  3407                           ;lcd_data@data stored from wreg
  3408     0262  00F2               	movwf	lcd_data@data
  3409     0263                     l1399:
  3410                           
  3411                           ;atividade7.c: 30:     PORTD = data;
  3412     0263  0872               	movf	lcd_data@data,w
  3413     0264  1283               	bcf	3,5	;RP0=0, select bank0
  3414     0265  1303               	bcf	3,6	;RP1=0, select bank0
  3415     0266  0088               	movwf	8	;volatile
  3416     0267                     l1401:
  3417                           
  3418                           ;atividade7.c: 31:     PORTEbits.RE0 = 1;
  3419     0267  1409               	bsf	9,0	;volatile
  3420     0268                     l1403:
  3421                           
  3422                           ;atividade7.c: 32:     PORTEbits.RE1 = 1;
  3423     0268  1489               	bsf	9,1	;volatile
  3424                           
  3425                           ;atividade7.c: 33:     _delay((unsigned long)((5)*(20000000/4000.0)));
  3426     0269  3021               	movlw	33
  3427     026A  00F1               	movwf	??_lcd_data+1
  3428     026B  3076               	movlw	118
  3429     026C  00F0               	movwf	??_lcd_data
  3430     026D                     u1507:
  3431     026D  0BF0               	decfsz	??_lcd_data,f
  3432     026E  2A6D               	goto	u1507
  3433     026F  0BF1               	decfsz	??_lcd_data+1,f
  3434     0270  2A6D               	goto	u1507
  3435     0271  0000               	nop
  3436     0272                     l1405:
  3437                           
  3438                           ;atividade7.c: 34:     PORTEbits.RE1 = 0;
  3439     0272  1283               	bcf	3,5	;RP0=0, select bank0
  3440     0273  1303               	bcf	3,6	;RP1=0, select bank0
  3441     0274  1089               	bcf	9,1	;volatile
  3442     0275                     l27:
  3443     0275  0008               	return
  3444     0276                     __end_of_lcd_data:
  3445                           
  3446                           	psect	text20
  3447     024E                     __ptext20:	
  3448 ;; *************** function _lcd_command *****************
  3449 ;; Defined at:
  3450 ;;		line 37 in file "atividade7.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;  cmd             1    wreg     unsigned char 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  cmd             1    2[COMMON] unsigned char 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  1    wreg      void 
  3457 ;; Registers used:
  3458 ;;		wreg
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3464 ;;      Params:         0       0       0       0       0
  3465 ;;      Locals:         1       0       0       0       0
  3466 ;;      Temps:          2       0       0       0       0
  3467 ;;      Totals:         3       0       0       0       0
  3468 ;;Total ram usage:        3 bytes
  3469 ;; Hardware stack levels used: 1
  3470 ;; This function calls:
  3471 ;;		Nothing
  3472 ;; This function is called by:
  3473 ;;		_lcd_initialise
  3474 ;;		_atualiza_lcd
  3475 ;;		_main
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479     024E                     _lcd_command:	
  3480                           ;psect for function _lcd_command
  3481                           
  3482                           
  3483                           ;incstack = 0
  3484                           ; Regs used in _lcd_command: [wreg]
  3485                           ;lcd_command@cmd stored from wreg
  3486     024E  00F2               	movwf	lcd_command@cmd
  3487     024F                     l1417:
  3488                           
  3489                           ;atividade7.c: 38:     PORTD = cmd;
  3490     024F  0872               	movf	lcd_command@cmd,w
  3491     0250  1283               	bcf	3,5	;RP0=0, select bank0
  3492     0251  1303               	bcf	3,6	;RP1=0, select bank0
  3493     0252  0088               	movwf	8	;volatile
  3494     0253                     l1419:
  3495                           
  3496                           ;atividade7.c: 39:     PORTEbits.RE0 = 0;
  3497     0253  1009               	bcf	9,0	;volatile
  3498     0254                     l1421:
  3499                           
  3500                           ;atividade7.c: 40:     PORTEbits.RE1 = 1;
  3501     0254  1489               	bsf	9,1	;volatile
  3502                           
  3503                           ;atividade7.c: 41:     _delay((unsigned long)((5)*(20000000/4000.0)));
  3504     0255  3021               	movlw	33
  3505     0256  00F1               	movwf	??_lcd_command+1
  3506     0257  3076               	movlw	118
  3507     0258  00F0               	movwf	??_lcd_command
  3508     0259                     u1517:
  3509     0259  0BF0               	decfsz	??_lcd_command,f
  3510     025A  2A59               	goto	u1517
  3511     025B  0BF1               	decfsz	??_lcd_command+1,f
  3512     025C  2A59               	goto	u1517
  3513     025D  0000               	nop
  3514     025E                     l1423:
  3515                           
  3516                           ;atividade7.c: 42:     PORTEbits.RE1 = 0;
  3517     025E  1283               	bcf	3,5	;RP0=0, select bank0
  3518     025F  1303               	bcf	3,6	;RP1=0, select bank0
  3519     0260  1089               	bcf	9,1	;volatile
  3520     0261                     l30:
  3521     0261  0008               	return
  3522     0262                     __end_of_lcd_command:
  3523     0002                     ___latbits      equ	2
  3524     007E                     btemp           set	126	;btemp
  3525     007E                     wtemp0          set	126
  3526                           
  3527                           	psect	config
  3528                           
  3529                           ;Config register CONFIG @ 0x2007
  3530                           ;	Oscillator Selection bits
  3531                           ;	FOSC = HS, HS oscillator
  3532                           ;	Watchdog Timer Enable bit
  3533                           ;	WDTE = OFF, WDT disabled
  3534                           ;	Power-up Timer Enable bit
  3535                           ;	PWRTE = OFF, PWRT disabled
  3536                           ;	FLASH Program Memory Code Protection bits
  3537                           ;	CP = OFF, Code protection off
  3538                           ;	Brown-out Reset Enable bit
  3539                           ;	BOREN = OFF, BOR disabled
  3540                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  3541                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  3542                           ;	Data EE Memory Code Protection
  3543                           ;	CPD = OFF, Code Protection off
  3544                           ;	FLASH Program Memory Write Enable
  3545                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  3546                           ;	In-Circuit Debugger Mode bit
  3547                           ;	DEBUG = 0x1, unprogrammed default
  3548     2007                     	org	8199
  3549     2007  3D3A               	dw	15674

Data Sizes:
    Strings     5
    Constant    0
    Data        2
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     79      80
    BANK1            80      3      42
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> atualiza_lcd@buffer(BANK0[16]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> atualiza_lcd@buffer(BANK0[16]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    lcd_string@str	PTR const unsigned char  size(1) Largest target is 16
		 -> atualiza_lcd@buffer(BANK0[16]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    S582$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> atualiza_lcd@buffer(BANK0[16]), 

    S582$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 16
		 -> atualiza_lcd@buffer(BANK0[16]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _lcd_initialise->_lcd_command
    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputc
    _fputs->_fputc
    _abs->___awmod
    _lcd_string->_lcd_data

Critical Paths under _main in BANK0

    _main->_atualiza_lcd
    _atualiza_lcd->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3576
                                              0 BANK1      3     3      0
                       _atualiza_lcd
                           _debounce
                        _lcd_command
                           _lcd_data
                     _lcd_initialise
                            _teclado
 ---------------------------------------------------------------------------------
 (1) _teclado                                              1     1      0      83
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_initialise                                       0     0      0      29
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _debounce                                             3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _atualiza_lcd                                        18    18      0    3249
                                             61 BANK0     18    18      0
                        _lcd_command
                         _lcd_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             19    15      4    3095
                                             44 BANK0     17    13      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             5     1      4    2892
                                             39 BANK0      5     1      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           13     9      4    2758
                                             27 BANK0     12     8      4
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (5) _read_prec_or_width                                   5     3      2     276
                                              6 COMMON     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4      94
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                12     8      4    1825
                                             15 BANK0     12     8      4
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  8     3      5     747
                                             13 COMMON     1     1      0
                                              8 BANK0      7     2      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (7) _fputs                                                8     5      3     333
                                              0 BANK0      8     5      3
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                               13     9      4     232
                                              0 COMMON    13     9      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2      67
                                              6 COMMON     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     298
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     302
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _lcd_string                                           1     0      1      75
                                              3 COMMON     1     0      1
                           _lcd_data
 ---------------------------------------------------------------------------------
 (1) _lcd_data                                             3     3      0      29
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          3     3      0      29
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _atualiza_lcd
     _lcd_command
     _lcd_string
       _lcd_data
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
           _fputc
           _read_prec_or_width
             ___wmul
   _debounce
   _lcd_command
   _lcd_data
   _lcd_initialise
     _lcd_command
   _teclado

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      3      42     52.5%
BITBANK1            80      0       0      0.0%
BANK0               80     79      80    100.0%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0     136      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Dec 09 15:45:02 2024

                         pc 0002                lcd_data@data 0072                          l30 0261  
                        l42 023C                          l50 0577                          l27 0275  
                        l51 057D                          l36 0289                          l52 0583  
                        l61 05BC                          l53 058D                          l54 0593  
                        l39 02A2                          l55 0599                          l47 0561  
                        l64 0337                          l56 059F                          l48 0567  
                        l57 05A9                          l49 0571                          l58 05AF  
                        l59 05B5                ___awdiv@sign 0075                          fsr 0004  
       ___wmul@multiplicand 0072                         l170 02F5                         l323 04C2  
                       l172 030D                         l336 045F                         l710 024D  
                       l703 02C5                         l633 02E8                         l722 0656  
                       l730 0362                         l733 0224                         l653 037C  
                       l661 0749                         l656 03A4                         l665 0747  
                       l658 03B5                         l674 07E1                         l682 0408  
                       l691 0684                         l697 0716                         l689 067E  
                       u800 0362                         u801 0361                         u810 02EF  
                       u811 02EE                         u910 04A0                         u750 05C3  
                       u911 049F                         u751 05C2                         u760 05C9  
                       u840 0309                         u905 0490                         u761 05C8  
                       u841 0308                         u825 02F6                         u930 04B4  
                       u850 0465                         u770 05E8                         u931 04B3  
                       u915 049C                         u851 0464                         u771 05E7  
                       u835 02FD                         u940 04B9                         u860 0470  
                       u780 061A                         u941 04B8                         u925 04A8  
                       u861 046F                         u781 0619                         u870 047F  
                       u950 040E                         u790 063B                         u871 047E  
                       u951 040D                         u960 0419                         u961 0418  
                       u785 0616                         u890 048F                         u970 0424  
                       u891 048E                         u971 0423                         u885 0483  
                       u990 0434                         u991 0433                         u985 0428  
                       _abs 023D                         _pad 0363                         fsr0 0004  
                       indf 0000                ___awmod@sign 0075                        l1201 0489  
                      l1211 04A7                        l1203 048B                        ?_abs 0076  
                      l1213 04AE                        l1205 048F                        l1301 0751  
                      l1207 04A0                        l1215 04B4                        l1231 0415  
                      l1223 0409                        l1151 05E8                        l1143 05BD  
                      l1303 0757                        l1311 0790                        l1401 0267  
                      l1217 04B9                        l1209 04A6                        l1241 042E  
                      l1233 0419                        l1225 040A                        l1153 061A  
                      l1145 05C3                        l1161 034D                        l1313 079E  
                      l1321 07BE                        l1305 0774                        l1403 0268  
                      l1219 04BE                        l1251 044B                        l1243 0430  
                      l1235 041E                        l1227 040E                        l1147 05C9  
                      l1163 0355                        l1323 07C5                        l1315 07A6  
                      l1307 0777                        l1171 02FC                        l1331 03B6  
                      l1411 02B5                        l1421 0254                        l1405 0272  
                      l1181 0461                        l1245 0434                        l1237 0424  
                      l1253 0451                        l1229 0413                        l1149 05D0  
                      l1157 0338                        l1261 0363                        l1325 07CB  
                      l1317 07AB                        l1309 077D                        l1173 0303  
                      l1165 02E9                        l1341 03EE                        l1333 03B8  
                      l1413 02C3                        l1501 032A                        l1423 025E  
                      l1431 0281                        l1191 0475                        l1183 0465  
                      l1255 0456                        l1247 043E                        l1239 0427  
                      l1159 033D                        l1271 038E                        l1263 0369  
                      l1327 07D1                        l1319 07B8                        l1175 0309  
                      l1167 02EB                        l1335 03C7                        l1343 03F3  
                      l1351 0668                        l1407 02A3                        l1503 0330  
                      l1511 04CF                        l1417 024F                        l1425 0276  
                      l1193 0477                        l1185 046A                        l1257 045B  
                      l1249 0444                        l1281 0242                        l1273 0396  
                      l1265 0374                        l1169 02EF                        l1345 0404  
                      l1337 03CB                        l1353 066C                        l1409 02A8  
                      l1441 02D2                        l1433 02C6                        l1521 04DE  
                      l1513 04D4                        l1505 04C3                        l1419 0253  
                      l1427 0277                        l1195 0479                        l1187 046C  
                      l1179 0460                        l1275 03AA                        l1267 037A  
                      l1291 0733                        l1339 03D9                        l1371 06AC  
                      l1363 0687                        l1355 0674                        l1443 02DF  
                      l1435 02CA                        l1451 053F                        l1531 0503  
                      l1523 04E6                        l1515 04DC                        l1507 04C8  
                      l1429 027F                        l1197 047F                        l1189 0470  
                      l1277 023D                        l1269 037F                        l1293 0739  
                      l1285 0717                        l1381 06D5                        l1373 06AF  
                      l1365 0694                        l1357 067A                        l1349 0657  
                      l1437 02CE                        l1461 0556                        l1453 054B  
                      l1541 0512                        l1525 04EE                        l1509 04CA  
                      l1199 0482                        l1279 0241                        l1295 073E  
                      l1287 071B                        l1383 06E2                        l1375 06B6  
                      l1367 0699                        l1359 067F                        l1439 02D0  
                      l1447 028A                        l1471 0575                        l1463 055A  
                      l1455 054C                        l1543 0518                        l1527 04F4  
                      l1297 0743                        l1289 072E                        l1385 06E7  
                      l1377 06BD                        l1369 06A8                        l1393 06FD  
                      l1449 022F                        l1481 0597                        l1473 057B  
                      l1465 055F                        l1457 054F                        l1545 0525  
                      l1529 04FC                        l1537 0508                        l1299 074D  
                      l1379 06C9                        l1491 05B9                        l1483 059D  
                      l1475 0581                        l1467 0565                        l1459 0554  
                      l1547 052C                        l1539 050E                        l1389 06F5  
                      l1493 05BB                        l1485 05A7                        l1477 058B  
                      l1469 056F                        l1549 0531                        l1399 0263  
                      l1487 05AD                        l1479 0591                        l1497 030E  
                      l1489 05B3                        l1499 0324                        ?_pad 0028  
                      STR_1 0009                        u1000 043E                        u1001 043D  
                      u1020 0451                        u1100 0721                        u1021 0450  
                      u1005 043A                        u1030 0456                        u1110 0733  
                      u1031 0455                        u1015 0445                        u1111 0732  
                      u1040 0369                        u1120 073E                        u1200 0404  
                      u1041 0368                        u1121 073D                        u1201 0403  
                      u1050 037A                        u1130 079E                        u1210 0668  
                      u1051 0379                        u1131 079D                        u1211 0667  
                      u1060 03A4                        u1140 07A6                        u1220 0699  
                      u1300 055F                        u1061 03A3                        u1141 07A5  
                      u1221 0698                        u1301 055E                        u1070 03AA  
                      u1150 07AB                        u1230 06AC                        u1310 0565  
                      u1071 03A9                        u1151 07AA                        u1135 079A  
                      u1231 06AB                        u1311 0564                        u1080 0241  
                      u1160 07B8                        u1240 06C9                        u1400 05A7  
                      u1320 056F                        u1081 0240                        u1065 03A0  
                      u1161 07B7                        u1241 06C8                        u1401 05A6  
                      u1321 056E                        u1170 07BE                        u1090 0720  
                      u1250 06D5                        u1410 05AD                        u1330 0575  
                      u1171 07BD                        u1091 071E                        u1251 06D4  
                      u1411 05AC                        u1331 0574                        u1180 07C5  
                      u1260 02C3                        u1420 05B3                        u1340 057B  
                      u1181 07C4                        u1165 07B4                        u1261 02C2  
                      u1421 05B2                        u1341 057A                        u1270 0289  
                      u1190 03C7                        u1430 05B9                        u1350 0581  
                      u1271 0288                        u1191 03C6                        u1431 05B8  
                      u1351 0580                        u1360 058B                        u1280 054B  
                      u1440 04EE                        u1361 058A                        u1281 054A  
                      u1441 04ED                        u1370 0591                        u1290 0554  
                      u1450 04F4                        u1507 026D                        u1371 0590  
                      u1291 0553                        u1451 04F3                        u1380 0597  
                      u1460 0525                        u1517 0259                        u1381 0596  
                      u1461 0524                        u1390 059D                        u1470 052C  
                      u1391 059C                        u1471 052B                        u1480 053B  
                      u1481 053A                        u1465 0521                        u1497 0235  
                      abs@a 0076                        _dbuf 00A5                        _main 04C3  
                      _dtoa 0717                        _prec 00A2                        pad@i 002D  
                      pad@p 002B                        btemp 007E                        start 0000  
             ?_atualiza_lcd 0070                       ??_abs 0078                       ??_pad 007D  
                     ?_main 0070                       ?_dtoa 002F             __end_of___awdiv 04C3  
           __end_of___awmod 0460             ___awdiv@divisor 0070             ___awdiv@counter 0074  
              vfpfcnvrt@fmt 003D                       _PORTD 0008                       _TRISB 0086  
                     _TRISC 0087                       _TRISD 0088                       _TRISE 0089  
                     _flags 006F         read_prec_or_width@c 0078         read_prec_or_width@n 0079  
                     _fputc 05BD                       _fputs 0338                       pad@fp 0028  
                     _width 00A0                       _putch 0224                       main@i 00C5  
                     dtoa@d 0031                       dtoa@i 0039                       dtoa@p 0035  
                     dtoa@s 0038                       dtoa@w 0036             __end_of_teclado 05BD  
                     pclath 000A              _tecla_anterior 00C9                       status 0003  
                     wtemp0 007E             __end_of_sprintf 02E9              ??_atualiza_lcd 005D  
           __initialization 07E2                __end_of_main 053F                __end_of_dtoa 07E2  
                    ??_main 007E                      ??_dtoa 007E              lcd_command@cmd 0072  
__end_of_read_prec_or_width 0409                      ?_fputc 0070                      ?_fputs 0020  
          ___awdiv@dividend 0072                      ?_putch 0070               vfpfcnvrt@done 0045  
          __end_of_debounce 023D            __end_of_lcd_data 0276                vfprintf@cfmt 004B  
                    ___wmul 02E9                   ??___awdiv 0074                   ??___awmod 0074  
         _tecla_pressionada 00A4        read_prec_or_width@ap 0077            ___awdiv@quotient 0076  
           ___awmod@divisor 0070             ___awmod@counter 0074                      pad@buf 002A  
                    dtoa@fp 002F                      fputc@c 0070                      fputs@c 0025  
                    fputs@i 0026                      fputs@s 0020                   ??_teclado 0070  
                    putch@c 0070            __end_of_vfprintf 02C6            ??_lcd_initialise 0073  
                 ??_sprintf 0050               lcd_string@str 0073     __end_of__initialization 07FC  
            __pcstackCOMMON 0070                __pidataBANK1 0225               __end_of_fputc 0657  
             __end_of_fputs 0363               __end_of_putch 0225        __end_of_atualiza_lcd 0338  
                   ??_fputc 0074                     ??_fputs 0023                     ??_putch 0070  
                __pbssBANK0 006F                  __pbssBANK1 00A0          atualiza_lcd@buffer 005F  
                __pmaintext 04C3                     ?___wmul 0070                   ?_debounce 0070  
                 ?_lcd_data 0070                  _lcd_string 0276                  __stringtab 0003  
            main@cursor_pos 00C8                     ___awdiv 0460                     ___awmod 0409  
                 ?_vfprintf 0047                     __ptext1 053F                     __ptext2 028A  
                   __ptext3 022F                     __ptext4 030E                     __ptext5 02C6  
                   __ptext6 02A3                     __ptext7 0657                     __ptext8 03B6  
                   __ptext9 02E9       read_prec_or_width@fmt 0076            ___awmod@dividend 0072  
                ??_debounce 0070                     _teclado 053F                  ??_lcd_data 0070  
                   _sprintf 02C6                     clrloop0 0228        end_of_initialization 07FC  
                   fputc@fp 0072                     fputs@fp 0021          _read_prec_or_width 03B6  
         __end_of_vfpfcnvrt 0717         ?_read_prec_or_width 0076            vfpfcnvrt@convarg 0041  
                ??_vfprintf 007E                   _PORTBbits 0006                   _PORTCbits 0007  
                 _PORTEbits 0009        ??_read_prec_or_width 0078                 ?_lcd_string 0073  
             ??_lcd_command 0070                _atualiza_lcd 030E                 vfpfcnvrt@ap 003E  
               vfpfcnvrt@cp 0046                 vfpfcnvrt@fp 003B              __end_of___wmul 030E  
       start_initialization 07E2                 __end_of_abs 024E                 __end_of_pad 03B6  
               vfprintf@fmt 0049                    ??___wmul 0074         __end_of_lcd_command 0262  
               __pdataBANK1 00C8                   ___latbits 0002               __pcstackBANK0 0020  
             __pcstackBANK1 00C5                    ?___awdiv 0070                    ?___awmod 0070  
                 __pstrings 0003                teclado@tecla 0070                    ?_teclado 0070  
                  ?_sprintf 004C              ___wmul@product 0074                   clear_ram0 0227  
               _lcd_command 024E                   _vfpfcnvrt 0657                 __stringbase 0008  
         ___wmul@multiplier 0070                   main@tecla 00C7                ??_lcd_string 0074  
                vfprintf@ap 004A                  vfprintf@fp 0047                  ?_vfpfcnvrt 003B  
        __end_of_lcd_string 028A          __end_of__stringtab 0009                  sprintf@fmt 004D  
                  _debounce 022F                    _dtoa$661 0033                    __ptext10 0717  
                  __ptext11 0363                    __ptext20 024E                    __ptext12 0338  
                  __ptext13 05BD                    __ptext14 0224                    __ptext15 023D  
                  __ptext16 0409                    __ptext17 0460                    __ptext18 0276  
                  __ptext19 0262                    _lcd_data 0262              _lcd_initialise 028A  
                  _vfprintf 02A3                   sprintf@ap 0051      __end_of_lcd_initialise 02A3  
                 stringcode 0003                 ??_vfpfcnvrt 003F                    sprintf@f 0052  
                  sprintf@s 004C                    stringdir 0003                    stringtab 0003  
           ?_lcd_initialise 0070                ?_lcd_command 0070  
