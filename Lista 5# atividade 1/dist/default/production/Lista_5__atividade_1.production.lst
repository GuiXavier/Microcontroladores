

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Tue Nov 19 15:41:40 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,space=0,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    13                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 12/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0004                     fsr             equ	4
    52     0004                     fsr0            equ	4
    53     0000                     indf            equ	0
    54     0000                     indf0           equ	0
    55     0002                     pc              equ	2
    56     0002                     pcl             equ	2
    57     000A                     pclath          equ	10
    58     0003                     status          equ	3
    59     0000                     INDF            equ	0	;# 
    60     0001                     TMR0            equ	1	;# 
    61     0002                     PCL             equ	2	;# 
    62     0003                     STATUS          equ	3	;# 
    63     0004                     FSR             equ	4	;# 
    64     0005                     PORTA           equ	5	;# 
    65     0006                     PORTB           equ	6	;# 
    66     0007                     PORTC           equ	7	;# 
    67     0008                     PORTD           equ	8	;# 
    68     0009                     PORTE           equ	9	;# 
    69     000A                     PCLATH          equ	10	;# 
    70     000B                     INTCON          equ	11	;# 
    71     000C                     PIR1            equ	12	;# 
    72     000D                     PIR2            equ	13	;# 
    73     000E                     TMR1            equ	14	;# 
    74     000E                     TMR1L           equ	14	;# 
    75     000F                     TMR1H           equ	15	;# 
    76     0010                     T1CON           equ	16	;# 
    77     0011                     TMR2            equ	17	;# 
    78     0012                     T2CON           equ	18	;# 
    79     0013                     SSPBUF          equ	19	;# 
    80     0014                     SSPCON          equ	20	;# 
    81     0015                     CCPR1           equ	21	;# 
    82     0015                     CCPR1L          equ	21	;# 
    83     0016                     CCPR1H          equ	22	;# 
    84     0017                     CCP1CON         equ	23	;# 
    85     0018                     RCSTA           equ	24	;# 
    86     0019                     TXREG           equ	25	;# 
    87     001A                     RCREG           equ	26	;# 
    88     001B                     CCPR2           equ	27	;# 
    89     001B                     CCPR2L          equ	27	;# 
    90     001C                     CCPR2H          equ	28	;# 
    91     001D                     CCP2CON         equ	29	;# 
    92     001E                     ADRESH          equ	30	;# 
    93     001F                     ADCON0          equ	31	;# 
    94     0081                     OPTION_REG      equ	129	;# 
    95     0085                     TRISA           equ	133	;# 
    96     0086                     TRISB           equ	134	;# 
    97     0087                     TRISC           equ	135	;# 
    98     0088                     TRISD           equ	136	;# 
    99     0089                     TRISE           equ	137	;# 
   100     008C                     PIE1            equ	140	;# 
   101     008D                     PIE2            equ	141	;# 
   102     008E                     PCON            equ	142	;# 
   103     0091                     SSPCON2         equ	145	;# 
   104     0092                     PR2             equ	146	;# 
   105     0093                     SSPADD          equ	147	;# 
   106     0094                     SSPSTAT         equ	148	;# 
   107     0098                     TXSTA           equ	152	;# 
   108     0099                     SPBRG           equ	153	;# 
   109     009E                     ADRESL          equ	158	;# 
   110     009F                     ADCON1          equ	159	;# 
   111     010C                     EEDATA          equ	268	;# 
   112     010D                     EEADR           equ	269	;# 
   113     010E                     EEDATH          equ	270	;# 
   114     010F                     EEADRH          equ	271	;# 
   115     018C                     EECON1          equ	396	;# 
   116     018D                     EECON2          equ	397	;# 
   117     0000                     INDF            equ	0	;# 
   118     0001                     TMR0            equ	1	;# 
   119     0002                     PCL             equ	2	;# 
   120     0003                     STATUS          equ	3	;# 
   121     0004                     FSR             equ	4	;# 
   122     0005                     PORTA           equ	5	;# 
   123     0006                     PORTB           equ	6	;# 
   124     0007                     PORTC           equ	7	;# 
   125     0008                     PORTD           equ	8	;# 
   126     0009                     PORTE           equ	9	;# 
   127     000A                     PCLATH          equ	10	;# 
   128     000B                     INTCON          equ	11	;# 
   129     000C                     PIR1            equ	12	;# 
   130     000D                     PIR2            equ	13	;# 
   131     000E                     TMR1            equ	14	;# 
   132     000E                     TMR1L           equ	14	;# 
   133     000F                     TMR1H           equ	15	;# 
   134     0010                     T1CON           equ	16	;# 
   135     0011                     TMR2            equ	17	;# 
   136     0012                     T2CON           equ	18	;# 
   137     0013                     SSPBUF          equ	19	;# 
   138     0014                     SSPCON          equ	20	;# 
   139     0015                     CCPR1           equ	21	;# 
   140     0015                     CCPR1L          equ	21	;# 
   141     0016                     CCPR1H          equ	22	;# 
   142     0017                     CCP1CON         equ	23	;# 
   143     0018                     RCSTA           equ	24	;# 
   144     0019                     TXREG           equ	25	;# 
   145     001A                     RCREG           equ	26	;# 
   146     001B                     CCPR2           equ	27	;# 
   147     001B                     CCPR2L          equ	27	;# 
   148     001C                     CCPR2H          equ	28	;# 
   149     001D                     CCP2CON         equ	29	;# 
   150     001E                     ADRESH          equ	30	;# 
   151     001F                     ADCON0          equ	31	;# 
   152     0081                     OPTION_REG      equ	129	;# 
   153     0085                     TRISA           equ	133	;# 
   154     0086                     TRISB           equ	134	;# 
   155     0087                     TRISC           equ	135	;# 
   156     0088                     TRISD           equ	136	;# 
   157     0089                     TRISE           equ	137	;# 
   158     008C                     PIE1            equ	140	;# 
   159     008D                     PIE2            equ	141	;# 
   160     008E                     PCON            equ	142	;# 
   161     0091                     SSPCON2         equ	145	;# 
   162     0092                     PR2             equ	146	;# 
   163     0093                     SSPADD          equ	147	;# 
   164     0094                     SSPSTAT         equ	148	;# 
   165     0098                     TXSTA           equ	152	;# 
   166     0099                     SPBRG           equ	153	;# 
   167     009E                     ADRESL          equ	158	;# 
   168     009F                     ADCON1          equ	159	;# 
   169     010C                     EEDATA          equ	268	;# 
   170     010D                     EEADR           equ	269	;# 
   171     010E                     EEDATH          equ	270	;# 
   172     010F                     EEADRH          equ	271	;# 
   173     018C                     EECON1          equ	396	;# 
   174     018D                     EECON2          equ	397	;# 
   175                           
   176                           	psect	idataCOMMON
   177     0756                     __pidataCOMMON:
   178                           
   179                           ;initializer for _sentido
   180     0756  3401               	retlw	1
   181                           
   182                           	psect	idataBANK0
   183     0757                     __pidataBANK0:
   184                           
   185                           ;initializer for _segment
   186     0757  343F               	retlw	63
   187     0758  3406               	retlw	6
   188     0759  345B               	retlw	91
   189     075A  344F               	retlw	79
   190     075B  3466               	retlw	102
   191     075C  346D               	retlw	109
   192     075D  347D               	retlw	125
   193     075E  3407               	retlw	7
   194     075F  347F               	retlw	127
   195     0760  346F               	retlw	111
   196     0761  3477               	retlw	119
   197     0762  347C               	retlw	124
   198     0763  3439               	retlw	57
   199     0764  345E               	retlw	94
   200     0765  3479               	retlw	121
   201     0766  3471               	retlw	113
   202     0008                     _PORTD          set	8
   203     0006                     _PORTBbits      set	6
   204     0081                     _OPTION_REGbits set	129
   205     0086                     _TRISB          set	134
   206     0088                     _TRISD          set	136
   207                           
   208                           	psect	cinit
   209     07E6                     start_initialization:	
   210                           ; #config settings
   211                           
   212     07E6                     __initialization:
   213                           
   214                           ; Initialize objects allocated to BANK0
   215     07E6  1383               	bcf	3,7	;select IRP bank0
   216     07E7  3030               	movlw	low (__pdataBANK0+16)
   217     07E8  00FD               	movwf	btemp+-1
   218     07E9  3007               	movlw	high __pidataBANK0
   219     07EA  00FE               	movwf	btemp
   220     07EB  3057               	movlw	low __pidataBANK0
   221     07EC  00FF               	movwf	btemp+1
   222     07ED  3020               	movlw	low __pdataBANK0
   223     07EE  0084               	movwf	4
   224     07EF  120A  118A  277E  120A  118A  	fcall	init_ram0
   225                           
   226                           ; Initialize objects allocated to COMMON
   227     07F4  120A  118A  2756  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   228     07F9  00F7               	movwf	__pdataCOMMON& (0+127)
   229                           
   230                           ; Clear objects allocated to COMMON
   231     07FA  01F5               	clrf	__pbssCOMMON& (0+127)
   232     07FB  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   233     07FC                     end_of_initialization:	
   234                           ;End of C runtime variable initialization code
   235                           
   236     07FC                     __end_of__initialization:
   237     07FC  0183               	clrf	3
   238     07FD  120A  118A  2F8D   	ljmp	_main	;jump to C main() function
   239                           
   240                           	psect	bssCOMMON
   241     0075                     __pbssCOMMON:
   242     0075                     _contador:
   243     0075                     	ds	1
   244     0076                     _i:
   245     0076                     	ds	1
   246                           
   247                           	psect	dataCOMMON
   248     0077                     __pdataCOMMON:
   249     0077                     _sentido:
   250     0077                     	ds	1
   251                           
   252                           	psect	dataBANK0
   253     0020                     __pdataBANK0:
   254     0020                     _segment:
   255     0020                     	ds	16
   256                           
   257                           	psect	inittext
   258     077A                     init_fetch0:	
   259                           ;	Called with low address in FSR and high address in W
   260                           
   261     077A  087E               	movf	btemp,w
   262     077B  008A               	movwf	10
   263     077C  087F               	movf	btemp+1,w
   264     077D  0082               	movwf	2
   265     077E                     init_ram0:	
   266                           ;Called with:
   267                           ;	high address of idata address in btemp 
   268                           ;	low address of idata address in btemp+1 
   269                           ;	low address of data in FSR
   270                           ;	high address + 1 of data in btemp-1
   271                           
   272     077E  120A  118A  277A  120A  118A  	fcall	init_fetch0
   273     0783  0080               	movwf	0
   274     0784  0A84               	incf	4,f
   275     0785  0804               	movf	4,w
   276     0786  067D               	xorwf	btemp+-1,w
   277     0787  1903               	btfsc	3,2
   278     0788  3400               	retlw	0
   279     0789  0AFF               	incf	btemp+1,f
   280     078A  1903               	btfsc	3,2
   281     078B  0AFE               	incf	btemp,f
   282     078C  2F7E               	goto	init_ram0
   283                           
   284                           	psect	cstackCOMMON
   285     0070                     __pcstackCOMMON:
   286     0070                     ?_verificarBotao:
   287     0070                     ?_main:	
   288                           ; 1 bytes @ 0x0
   289                           
   290     0070                     ??_verificarBotao:	
   291                           ; 1 bytes @ 0x0
   292                           
   293                           
   294                           ; 1 bytes @ 0x0
   295     0070                     	ds	2
   296     0072                     ??_main:
   297                           
   298                           ; 1 bytes @ 0x2
   299     0072                     	ds	3
   300                           
   301                           	psect	maintext
   302     078D                     __pmaintext:	
   303 ;;
   304 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   305 ;;
   306 ;; *************** function _main *****************
   307 ;; Defined at:
   308 ;;		line 36 in file "codigo.c"
   309 ;; Parameters:    Size  Location     Type
   310 ;;		None
   311 ;; Auto vars:     Size  Location     Type
   312 ;;		None
   313 ;; Return value:  Size  Location     Type
   314 ;;                  1    wreg      void 
   315 ;; Registers used:
   316 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   317 ;; Tracked objects:
   318 ;;		On entry : B00/0
   319 ;;		On exit  : 0/0
   320 ;;		Unchanged: 0/0
   321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   322 ;;      Params:         0       0       0       0       0
   323 ;;      Locals:         0       0       0       0       0
   324 ;;      Temps:          3       0       0       0       0
   325 ;;      Totals:         3       0       0       0       0
   326 ;;Total ram usage:        3 bytes
   327 ;; Hardware stack levels required when called: 1
   328 ;; This function calls:
   329 ;;		_verificarBotao
   330 ;; This function is called by:
   331 ;;		Startup code after reset
   332 ;; This function uses a non-reentrant model
   333 ;;
   334                           
   335     078D                     _main:	
   336                           ;psect for function _main
   337                           
   338     078D                     l595:	
   339                           ;incstack = 0
   340                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   341                           
   342                           
   343                           ;codigo.c: 38: 
   344     078D  1683               	bsf	3,5	;RP0=1, select bank1
   345     078E  1303               	bcf	3,6	;RP1=0, select bank1
   346     078F  0188               	clrf	8	;volatile
   347     0790                     l597:
   348                           
   349                           ;codigo.c: 39:         if (sentido) {
   350     0790  30FF               	movlw	255
   351     0791  0086               	movwf	6	;volatile
   352                           
   353                           ;codigo.c: 40:             contador++;
   354     0792  1283               	bcf	3,5	;RP0=0, select bank0
   355     0793  1303               	bcf	3,6	;RP1=0, select bank0
   356     0794  0188               	clrf	8	;volatile
   357     0795                     l599:
   358                           
   359                           ;codigo.c: 42:                 contador = 0;
   360     0795  1683               	bsf	3,5	;RP0=1, select bank1
   361     0796  1303               	bcf	3,6	;RP1=0, select bank1
   362     0797  1381               	bcf	1,7	;volatile
   363                           
   364                           ;codigo.c: 45:             if (contador == 0) {
   365     0798  2FD9               	goto	l621
   366     0799                     l601:
   367                           
   368                           ;codigo.c: 47:             } else {
   369     0799  120A  118A  2767  120A  118A  	fcall	_verificarBotao
   370     079E  3A00               	xorlw	0
   371     079F  1903               	skipnz
   372     07A0  2FA2               	goto	u21
   373     07A1  2FA3               	goto	u20
   374     07A2                     u21:
   375     07A2  2FAB               	goto	l32
   376     07A3                     u20:
   377     07A3                     l603:
   378                           
   379                           ;codigo.c: 48:                 contador--;;codigo.c: 49:             }
   380     07A3  0877               	movf	_sentido,w
   381     07A4  1903               	btfsc	3,2
   382     07A5  2FA7               	goto	u31
   383     07A6  2FA9               	goto	u30
   384     07A7                     u31:
   385     07A7  3001               	movlw	1
   386     07A8  2FAA               	goto	u40
   387     07A9                     u30:
   388     07A9  3000               	movlw	0
   389     07AA                     u40:
   390     07AA  00F7               	movwf	_sentido
   391     07AB                     l32:	
   392                           ;codigo.c: 50:         }
   393                           
   394                           
   395                           ;codigo.c: 53:         PORTD = segment[contador];
   396     07AB  0877               	movf	_sentido,w
   397     07AC  1903               	btfsc	3,2
   398     07AD  2FAF               	goto	u51
   399     07AE  2FB0               	goto	u50
   400     07AF                     u51:
   401     07AF  2FBA               	goto	l611
   402     07B0                     u50:
   403     07B0                     l605:
   404                           
   405                           ;codigo.c: 54:         _delay((unsigned long)((500)*(20000000/4000.0)));
   406     07B0  3001               	movlw	1
   407     07B1  07F5               	addwf	_contador,f
   408     07B2                     l607:
   409                           
   410                           ;codigo.c: 55:     }
   411     07B2  3010               	movlw	16
   412     07B3  0275               	subwf	_contador,w
   413     07B4  1C03               	skipc
   414     07B5  2FB7               	goto	u61
   415     07B6  2FB8               	goto	u60
   416     07B7                     u61:
   417     07B7  2FC4               	goto	l617
   418     07B8                     u60:
   419     07B8                     l609:
   420                           
   421                           ;codigo.c: 56: }
   422     07B8  01F5               	clrf	_contador
   423     07B9  2FC4               	goto	l617
   424     07BA                     l611:
   425     07BA  0875               	movf	_contador,w
   426     07BB  1D03               	btfss	3,2
   427     07BC  2FBE               	goto	u71
   428     07BD  2FBF               	goto	u70
   429     07BE                     u71:
   430     07BE  2FC2               	goto	l615
   431     07BF                     u70:
   432     07BF                     l613:
   433     07BF  300F               	movlw	15
   434     07C0  00F5               	movwf	_contador
   435     07C1  2FC4               	goto	l617
   436     07C2                     l615:
   437     07C2  3001               	movlw	1
   438     07C3  02F5               	subwf	_contador,f
   439     07C4                     l617:
   440     07C4  0875               	movf	_contador,w
   441     07C5  3E20               	addlw	(low (_segment| 0))& (0+255)
   442     07C6  0084               	movwf	4
   443     07C7  1383               	bcf	3,7	;select IRP bank0
   444     07C8  0800               	movf	0,w
   445     07C9  1283               	bcf	3,5	;RP0=0, select bank0
   446     07CA  1303               	bcf	3,6	;RP1=0, select bank0
   447     07CB  0088               	movwf	8	;volatile
   448     07CC                     l619:
   449     07CC  300D               	movlw	13
   450     07CD  00F4               	movwf	??_main+2
   451     07CE  30AF               	movlw	175
   452     07CF  00F3               	movwf	??_main+1
   453     07D0  30B6               	movlw	182
   454     07D1  00F2               	movwf	??_main
   455     07D2                     u97:
   456     07D2  0BF2               	decfsz	??_main,f
   457     07D3  2FD2               	goto	u97
   458     07D4  0BF3               	decfsz	??_main+1,f
   459     07D5  2FD2               	goto	u97
   460     07D6  0BF4               	decfsz	??_main+2,f
   461     07D7  2FD2               	goto	u97
   462     07D8  0000               	nop
   463     07D9                     l621:
   464                           
   465                           ;codigo.c: 45:             if (contador == 0) {
   466     07D9  120A  118A  2767  120A  118A  	fcall	_verificarBotao
   467     07DE  3A00               	xorlw	0
   468     07DF  1D03               	skipz
   469     07E0  2FE2               	goto	u81
   470     07E1  2FE3               	goto	u80
   471     07E2                     u81:
   472     07E2  2F99               	goto	l601
   473     07E3                     u80:
   474     07E3                     l39:
   475     07E3  120A  118A  2800   	ljmp	start
   476     07E6                     __end_of_main:
   477                           
   478                           	psect	text1
   479     0767                     __ptext1:	
   480 ;; *************** function _verificarBotao *****************
   481 ;; Defined at:
   482 ;;		line 21 in file "codigo.c"
   483 ;; Parameters:    Size  Location     Type
   484 ;;		None
   485 ;; Auto vars:     Size  Location     Type
   486 ;;		None
   487 ;; Return value:  Size  Location     Type
   488 ;;                  1    wreg      unsigned char 
   489 ;; Registers used:
   490 ;;		wreg
   491 ;; Tracked objects:
   492 ;;		On entry : 0/0
   493 ;;		On exit  : 0/0
   494 ;;		Unchanged: 0/0
   495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   496 ;;      Params:         0       0       0       0       0
   497 ;;      Locals:         0       0       0       0       0
   498 ;;      Temps:          2       0       0       0       0
   499 ;;      Totals:         2       0       0       0       0
   500 ;;Total ram usage:        2 bytes
   501 ;; Hardware stack levels used: 1
   502 ;; This function calls:
   503 ;;		Nothing
   504 ;; This function is called by:
   505 ;;		_main
   506 ;; This function uses a non-reentrant model
   507 ;;
   508                           
   509     0767                     _verificarBotao:	
   510                           ;psect for function _verificarBotao
   511                           
   512     0767                     l583:	
   513                           ;incstack = 0
   514                           ; Regs used in _verificarBotao: [wreg]
   515                           
   516                           
   517                           ;codigo.c: 22: void main(void) {
   518     0767  1283               	bcf	3,5	;RP0=0, select bank0
   519     0768  1303               	bcf	3,6	;RP1=0, select bank0
   520     0769  1806               	btfsc	6,0	;volatile
   521     076A  2F6C               	goto	u11
   522     076B  2F6D               	goto	u10
   523     076C                     u11:
   524     076C  2F78               	goto	l591
   525     076D                     u10:
   526     076D                     l585:
   527                           
   528                           ;codigo.c: 23: 
   529     076D  3082               	movlw	130
   530     076E  00F1               	movwf	??_verificarBotao+1
   531     076F  30DD               	movlw	221
   532     0770  00F0               	movwf	??_verificarBotao
   533     0771                     u107:
   534     0771  0BF0               	decfsz	??_verificarBotao,f
   535     0772  2F71               	goto	u107
   536     0773  0BF1               	decfsz	??_verificarBotao+1,f
   537     0774  2F71               	goto	u107
   538     0775  2F76               	nop2
   539                           
   540                           ;codigo.c: 25:     TRISB = 0xFF;
   541     0776  3001               	movlw	1
   542     0777  2F79               	goto	l24
   543     0778                     l591:
   544                           
   545                           ;codigo.c: 28:     OPTION_REGbits.nRBPU = 0;
   546     0778  3000               	movlw	0
   547     0779                     l24:
   548     0779  0008               	return
   549     077A                     __end_of_verificarBotao:
   550     0002                     ___latbits      equ	2
   551     007E                     btemp           set	126	;btemp
   552     007E                     wtemp0          set	126
   553                           
   554                           	psect	config
   555                           
   556                           ;Config register CONFIG @ 0x2007
   557                           ;	Oscillator Selection bits
   558                           ;	FOSC = HS, HS oscillator
   559                           ;	Watchdog Timer Enable bit
   560                           ;	WDTE = OFF, WDT disabled
   561                           ;	Power-up Timer Enable bit
   562                           ;	PWRTE = OFF, PWRT disabled
   563                           ;	FLASH Program Memory Code Protection bits
   564                           ;	CP = OFF, Code protection off
   565                           ;	Brown-out Reset Enable bit
   566                           ;	BOREN = OFF, BOR disabled
   567                           ;	Low Voltage In-Circuit Serial Programming Enable bit
   568                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   569                           ;	Data EE Memory Code Protection
   570                           ;	CPD = OFF, Code Protection off
   571                           ;	FLASH Program Memory Write Enable
   572                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
   573                           ;	In-Circuit Debugger Mode bit
   574                           ;	DEBUG = 0x1, unprogrammed default
   575     2007                     	org	8199
   576     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       8
    BANK0            80      0      16
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_verificarBotao

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0       0
                                              2 COMMON     3     3      0
                     _verificarBotao
 ---------------------------------------------------------------------------------
 (1) _verificarBotao                                       2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _verificarBotao

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80      0      16     20.0%
BITBANK0            80      0       0      0.0%
COMMON              14      5       8     57.1%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      24      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Tue Nov 19 15:41:40 2024

                      _i 0076                        pc 0002                       l24 0779  
                     l32 07AB                       l39 07E3                       u10 076D  
                     u11 076C                       u20 07A3                       u21 07A2  
                     u30 07A9                       u31 07A7                       u40 07AA  
                     u50 07B0                       u51 07AF                       u60 07B8  
                     u61 07B7                       u70 07BF                       u71 07BE  
                     u80 07E3                       u81 07E2                       u97 07D2  
                     fsr 0004                      l601 0799                      l611 07BA  
                    l603 07A3                      l613 07BF                      l605 07B0  
                    l621 07D9                      l615 07C2                      l607 07B2  
                    l609 07B8                      l617 07C4                      l619 07CC  
                    l591 0778                      l583 0767                      l585 076D  
                    l595 078D                      l597 0790                      l599 0795  
                    u107 0771                      fsr0 0004                      indf 0000  
        ?_verificarBotao 0070                     _main 078D                     btemp 007E  
                   start 0000                    ?_main 0070                    _PORTD 0008  
                  _TRISB 0086                    _TRISD 0088                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07E6  
           __end_of_main 07E6                   ??_main 0072             __pdataCOMMON 0077  
__end_of__initialization 07FC           __pcstackCOMMON 0070             __pidataBANK0 0757  
       ??_verificarBotao 0070           _OPTION_REGbits 0081               __pmaintext 078D  
                __ptext1 0767                  _segment 0020                  _sentido 0077  
   end_of_initialization 07FC                _PORTBbits 0006            __pidataCOMMON 0756  
    start_initialization 07E6               init_fetch0 077A              __pdataBANK0 0020  
            __pbssCOMMON 0075                ___latbits 0002                 _contador 0075  
               init_ram0 077E           _verificarBotao 0767   __end_of_verificarBotao 077A  
