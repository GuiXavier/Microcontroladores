

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Nov 25 23:16:52 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    12                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=1
    20                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=1
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23     0000                     
    24                           ; Generated 12/10/2023 GMT
    25                           ; 
    26                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F877 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58     0004                     fsr             equ	4
    59     0004                     fsr0            equ	4
    60     0000                     indf            equ	0
    61     0000                     indf0           equ	0
    62     0002                     pc              equ	2
    63     0002                     pcl             equ	2
    64     000A                     pclath          equ	10
    65     0003                     status          equ	3
    66     0000                     INDF            equ	0	;# 
    67     0001                     TMR0            equ	1	;# 
    68     0002                     PCL             equ	2	;# 
    69     0003                     STATUS          equ	3	;# 
    70     0004                     FSR             equ	4	;# 
    71     0005                     PORTA           equ	5	;# 
    72     0006                     PORTB           equ	6	;# 
    73     0007                     PORTC           equ	7	;# 
    74     0008                     PORTD           equ	8	;# 
    75     0009                     PORTE           equ	9	;# 
    76     000A                     PCLATH          equ	10	;# 
    77     000B                     INTCON          equ	11	;# 
    78     000C                     PIR1            equ	12	;# 
    79     000D                     PIR2            equ	13	;# 
    80     000E                     TMR1            equ	14	;# 
    81     000E                     TMR1L           equ	14	;# 
    82     000F                     TMR1H           equ	15	;# 
    83     0010                     T1CON           equ	16	;# 
    84     0011                     TMR2            equ	17	;# 
    85     0012                     T2CON           equ	18	;# 
    86     0013                     SSPBUF          equ	19	;# 
    87     0014                     SSPCON          equ	20	;# 
    88     0015                     CCPR1           equ	21	;# 
    89     0015                     CCPR1L          equ	21	;# 
    90     0016                     CCPR1H          equ	22	;# 
    91     0017                     CCP1CON         equ	23	;# 
    92     0018                     RCSTA           equ	24	;# 
    93     0019                     TXREG           equ	25	;# 
    94     001A                     RCREG           equ	26	;# 
    95     001B                     CCPR2           equ	27	;# 
    96     001B                     CCPR2L          equ	27	;# 
    97     001C                     CCPR2H          equ	28	;# 
    98     001D                     CCP2CON         equ	29	;# 
    99     001E                     ADRESH          equ	30	;# 
   100     001F                     ADCON0          equ	31	;# 
   101     0081                     OPTION_REG      equ	129	;# 
   102     0085                     TRISA           equ	133	;# 
   103     0086                     TRISB           equ	134	;# 
   104     0087                     TRISC           equ	135	;# 
   105     0088                     TRISD           equ	136	;# 
   106     0089                     TRISE           equ	137	;# 
   107     008C                     PIE1            equ	140	;# 
   108     008D                     PIE2            equ	141	;# 
   109     008E                     PCON            equ	142	;# 
   110     0091                     SSPCON2         equ	145	;# 
   111     0092                     PR2             equ	146	;# 
   112     0093                     SSPADD          equ	147	;# 
   113     0094                     SSPSTAT         equ	148	;# 
   114     0098                     TXSTA           equ	152	;# 
   115     0099                     SPBRG           equ	153	;# 
   116     009E                     ADRESL          equ	158	;# 
   117     009F                     ADCON1          equ	159	;# 
   118     010C                     EEDATA          equ	268	;# 
   119     010D                     EEADR           equ	269	;# 
   120     010E                     EEDATH          equ	270	;# 
   121     010F                     EEADRH          equ	271	;# 
   122     018C                     EECON1          equ	396	;# 
   123     018D                     EECON2          equ	397	;# 
   124     0000                     INDF            equ	0	;# 
   125     0001                     TMR0            equ	1	;# 
   126     0002                     PCL             equ	2	;# 
   127     0003                     STATUS          equ	3	;# 
   128     0004                     FSR             equ	4	;# 
   129     0005                     PORTA           equ	5	;# 
   130     0006                     PORTB           equ	6	;# 
   131     0007                     PORTC           equ	7	;# 
   132     0008                     PORTD           equ	8	;# 
   133     0009                     PORTE           equ	9	;# 
   134     000A                     PCLATH          equ	10	;# 
   135     000B                     INTCON          equ	11	;# 
   136     000C                     PIR1            equ	12	;# 
   137     000D                     PIR2            equ	13	;# 
   138     000E                     TMR1            equ	14	;# 
   139     000E                     TMR1L           equ	14	;# 
   140     000F                     TMR1H           equ	15	;# 
   141     0010                     T1CON           equ	16	;# 
   142     0011                     TMR2            equ	17	;# 
   143     0012                     T2CON           equ	18	;# 
   144     0013                     SSPBUF          equ	19	;# 
   145     0014                     SSPCON          equ	20	;# 
   146     0015                     CCPR1           equ	21	;# 
   147     0015                     CCPR1L          equ	21	;# 
   148     0016                     CCPR1H          equ	22	;# 
   149     0017                     CCP1CON         equ	23	;# 
   150     0018                     RCSTA           equ	24	;# 
   151     0019                     TXREG           equ	25	;# 
   152     001A                     RCREG           equ	26	;# 
   153     001B                     CCPR2           equ	27	;# 
   154     001B                     CCPR2L          equ	27	;# 
   155     001C                     CCPR2H          equ	28	;# 
   156     001D                     CCP2CON         equ	29	;# 
   157     001E                     ADRESH          equ	30	;# 
   158     001F                     ADCON0          equ	31	;# 
   159     0081                     OPTION_REG      equ	129	;# 
   160     0085                     TRISA           equ	133	;# 
   161     0086                     TRISB           equ	134	;# 
   162     0087                     TRISC           equ	135	;# 
   163     0088                     TRISD           equ	136	;# 
   164     0089                     TRISE           equ	137	;# 
   165     008C                     PIE1            equ	140	;# 
   166     008D                     PIE2            equ	141	;# 
   167     008E                     PCON            equ	142	;# 
   168     0091                     SSPCON2         equ	145	;# 
   169     0092                     PR2             equ	146	;# 
   170     0093                     SSPADD          equ	147	;# 
   171     0094                     SSPSTAT         equ	148	;# 
   172     0098                     TXSTA           equ	152	;# 
   173     0099                     SPBRG           equ	153	;# 
   174     009E                     ADRESL          equ	158	;# 
   175     009F                     ADCON1          equ	159	;# 
   176     010C                     EEDATA          equ	268	;# 
   177     010D                     EEADR           equ	269	;# 
   178     010E                     EEDATH          equ	270	;# 
   179     010F                     EEADRH          equ	271	;# 
   180     018C                     EECON1          equ	396	;# 
   181     018D                     EECON2          equ	397	;# 
   182                           
   183                           	psect	idataCOMMON
   184     05B7                     __pidataCOMMON:
   185                           
   186                           ;initializer for _tecla_anterior
   187     05B7  34FF               	retlw	255
   188     0006                     _PORTBbits      set	6
   189     0007                     _PORTCbits      set	7
   190     0009                     _PORTEbits      set	9
   191     0008                     _PORTD          set	8
   192     0086                     _TRISB          set	134
   193     0087                     _TRISC          set	135
   194     0088                     _TRISD          set	136
   195     0089                     _TRISE          set	137
   196                           
   197                           	psect	strings
   198     0003                     __pstrings:
   199     0003                     stringtab:
   200     0003                     __stringtab:
   201                           
   202                           ;	String table - string pointers are 1 byte each
   203     0003  1BFF               	btfsc	btemp+1,7
   204     0004  280D               	ljmp	stringcode
   205     0005  1383               	bcf	3,7
   206     0006  187F               	btfsc	btemp+1,0
   207     0007  1783               	bsf	3,7
   208     0008  0800               	movf	0,w
   209     0009  0A84               	incf	4,f
   210     000A  1903               	skipnz
   211     000B  0AFF               	incf	btemp+1,f
   212     000C  0008               	return
   213     000D                     stringcode:
   214     000D                     stringdir:
   215     000D  3000               	movlw	high stringdir
   216     000E  008A               	movwf	10
   217     000F  0804               	movf	4,w
   218     0010  0A84               	incf	4,f
   219     0011  0782               	addwf	2,f
   220     0012                     __stringbase:
   221     0012  3400               	retlw	0
   222     0013                     __end_of__stringtab:
   223     0013                     STR_1:
   224     0013  3443               	retlw	67	;'C'
   225     0014  346F               	retlw	111	;'o'
   226     0015  346E               	retlw	110	;'n'
   227     0016  3474               	retlw	116	;'t'
   228     0017  3461               	retlw	97	;'a'
   229     0018  3464               	retlw	100	;'d'
   230     0019  346F               	retlw	111	;'o'
   231     001A  3472               	retlw	114	;'r'
   232     001B  3420               	retlw	32	;' '
   233     001C  3463               	retlw	99	;'c'
   234     001D  346C               	retlw	108	;'l'
   235     001E  3469               	retlw	105	;'i'
   236     001F  3471               	retlw	113	;'q'
   237     0020  3475               	retlw	117	;'u'
   238     0021  3465               	retlw	101	;'e'
   239     0022  3473               	retlw	115	;'s'
   240     0023  3400               	retlw	0
   241                           
   242                           	psect	cinit
   243     07F4                     start_initialization:	
   244                           ; #config settings
   245                           
   246     07F4                     __initialization:
   247                           
   248                           ; Initialize objects allocated to COMMON
   249     07F4  120A  118A  25B7  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   250     07F9  00F8               	movwf	__pdataCOMMON& (0+127)
   251                           
   252                           ; Clear objects allocated to BANK0
   253     07FA  01B4               	clrf	__pbssBANK0& (0+127)
   254     07FB  01B5               	clrf	(__pbssBANK0+1)& (0+127)
   255     07FC                     end_of_initialization:	
   256                           ;End of C runtime variable initialization code
   257                           
   258     07FC                     __end_of__initialization:
   259     07FC  0183               	clrf	3
   260     07FD  120A  118A  2EA7   	ljmp	_main	;jump to C main() function
   261                           
   262                           	psect	dataCOMMON
   263     0078                     __pdataCOMMON:
   264     0078                     _tecla_anterior:
   265     0078                     	ds	1
   266                           
   267                           	psect	bssBANK0
   268     0034                     __pbssBANK0:
   269     0034                     _contador:
   270     0034                     	ds	2
   271                           
   272                           	psect	cstackCOMMON
   273     0070                     __pcstackCOMMON:
   274     0070                     ?_lcd_data:
   275     0070                     ?_lcd_command:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     0070                     ?_lcd_initialise:	
   279                           ; 1 bytes @ 0x0
   280                           
   281     0070                     ?_debounce:	
   282                           ; 1 bytes @ 0x0
   283                           
   284     0070                     ?_teclado:	
   285                           ; 1 bytes @ 0x0
   286                           
   287     0070                     ?_atualiza_lcd:	
   288                           ; 1 bytes @ 0x0
   289                           
   290     0070                     ?_main:	
   291                           ; 1 bytes @ 0x0
   292                           
   293     0070                     ?___lwdiv:	
   294                           ; 1 bytes @ 0x0
   295                           
   296     0070                     ?___lwmod:	
   297                           ; 2 bytes @ 0x0
   298                           
   299     0070                     teclado@tecla:	
   300                           ; 2 bytes @ 0x0
   301                           
   302     0070                     ___lwdiv@divisor:	
   303                           ; 1 bytes @ 0x0
   304                           
   305     0070                     ___lwmod@divisor:	
   306                           ; 2 bytes @ 0x0
   307                           
   308     0070                     ??_lcd_data:	
   309                           ; 2 bytes @ 0x0
   310                           
   311     0070                     ??_lcd_command:	
   312                           ; 1 bytes @ 0x0
   313                           
   314     0070                     ??_debounce:	
   315                           ; 1 bytes @ 0x0
   316                           
   317     0070                     ??_teclado:	
   318                           ; 1 bytes @ 0x0
   319                           
   320                           
   321                           ; 1 bytes @ 0x0
   322     0070                     	ds	2
   323     0072                     lcd_data@data:
   324     0072                     lcd_command@cmd:	
   325                           ; 1 bytes @ 0x2
   326                           
   327     0072                     ___lwdiv@dividend:	
   328                           ; 1 bytes @ 0x2
   329                           
   330     0072                     ___lwmod@dividend:	
   331                           ; 2 bytes @ 0x2
   332                           
   333                           
   334                           ; 2 bytes @ 0x2
   335     0072                     	ds	1
   336     0073                     ?_lcd_string:
   337     0073                     lcd_string@str:	
   338                           ; 1 bytes @ 0x3
   339                           
   340     0073                     ??_lcd_initialise:	
   341                           ; 2 bytes @ 0x3
   342                           
   343                           
   344                           ; 1 bytes @ 0x3
   345     0073                     	ds	1
   346     0074                     ___lwmod@counter:
   347     0074                     ___lwdiv@quotient:	
   348                           ; 1 bytes @ 0x4
   349                           
   350     0074                     ??___lwdiv:	
   351                           ; 2 bytes @ 0x4
   352                           
   353     0074                     ??___lwmod:	
   354                           ; 1 bytes @ 0x4
   355                           
   356                           
   357                           ; 1 bytes @ 0x4
   358     0074                     	ds	1
   359     0075                     ??_lcd_string:
   360                           
   361                           ; 1 bytes @ 0x5
   362     0075                     	ds	1
   363     0076                     ___lwdiv@counter:
   364                           
   365                           ; 1 bytes @ 0x6
   366     0076                     	ds	1
   367     0077                     main@tecla:
   368     0077                     ??_atualiza_lcd:	
   369                           ; 1 bytes @ 0x7
   370                           
   371     0077                     ??_main:	
   372                           ; 1 bytes @ 0x7
   373                           
   374                           
   375                           ; 1 bytes @ 0x7
   376     0077                     	ds	1
   377                           
   378                           	psect	cstackBANK0
   379     0020                     __pcstackBANK0:
   380     0020                     atualiza_lcd@buffer:
   381                           
   382                           ; 16 bytes @ 0x0
   383     0020                     	ds	16
   384     0030                     atualiza_lcd@temp:
   385                           
   386                           ; 2 bytes @ 0x10
   387     0030                     	ds	2
   388     0032                     atualiza_lcd@pos:
   389                           
   390                           ; 2 bytes @ 0x12
   391     0032                     	ds	2
   392                           
   393                           	psect	maintext
   394     06A7                     __pmaintext:	
   395 ;;
   396 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   397 ;;
   398 ;; *************** function _main *****************
   399 ;; Defined at:
   400 ;;		line 118 in file "codigo.c"
   401 ;; Parameters:    Size  Location     Type
   402 ;;		None
   403 ;; Auto vars:     Size  Location     Type
   404 ;;  tecla           1    7[COMMON] unsigned char 
   405 ;; Return value:  Size  Location     Type
   406 ;;                  1    wreg      void 
   407 ;; Registers used:
   408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   409 ;; Tracked objects:
   410 ;;		On entry : B00/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   414 ;;      Params:         0       0       0       0       0
   415 ;;      Locals:         1       0       0       0       0
   416 ;;      Temps:          0       0       0       0       0
   417 ;;      Totals:         1       0       0       0       0
   418 ;;Total ram usage:        1 bytes
   419 ;; Hardware stack levels required when called: 3
   420 ;; This function calls:
   421 ;;		_atualiza_lcd
   422 ;;		_debounce
   423 ;;		_lcd_initialise
   424 ;;		_teclado
   425 ;; This function is called by:
   426 ;;		Startup code after reset
   427 ;; This function uses a non-reentrant model
   428 ;;
   429                           
   430     06A7                     _main:	
   431                           ;psect for function _main
   432                           
   433     06A7                     l930:	
   434                           ;incstack = 0
   435                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   436                           
   437                           
   438                           ;codigo.c: 119:     TRISE = 0x00;
   439     06A7  1683               	bsf	3,5	;RP0=1, select bank1
   440     06A8  1303               	bcf	3,6	;RP1=0, select bank1
   441     06A9  0189               	clrf	9	;volatile
   442                           
   443                           ;codigo.c: 120:     TRISD = 0x00;
   444     06AA  0188               	clrf	8	;volatile
   445                           
   446                           ;codigo.c: 121:     TRISC = 0x00;
   447     06AB  0187               	clrf	7	;volatile
   448     06AC                     l932:
   449                           
   450                           ;codigo.c: 122:     TRISB = 0xFF;
   451     06AC  30FF               	movlw	255
   452     06AD  0086               	movwf	6	;volatile
   453     06AE                     l934:
   454                           
   455                           ;codigo.c: 123:     lcd_initialise();
   456     06AE  120A  118A  25EE  120A  118A  	fcall	_lcd_initialise
   457     06B3                     l936:
   458                           
   459                           ;codigo.c: 125:     atualiza_lcd();
   460     06B3  120A  118A  2767  120A  118A  	fcall	_atualiza_lcd
   461     06B8                     l938:
   462                           
   463                           ;codigo.c: 128:         unsigned char tecla = teclado();
   464     06B8  120A  118A  26F2  120A  118A  	fcall	_teclado
   465     06BD  00F7               	movwf	main@tecla
   466     06BE                     l940:
   467                           
   468                           ;codigo.c: 130:         if (tecla != 0xFF) {
   469     06BE  0A77               	incf	main@tecla,w
   470     06BF  1903               	btfsc	3,2
   471     06C0  2EC2               	goto	u681
   472     06C1  2EC3               	goto	u680
   473     06C2                     u681:
   474     06C2  2EB8               	goto	l938
   475     06C3                     u680:
   476     06C3                     l942:
   477                           
   478                           ;codigo.c: 131:             debounce();
   479     06C3  120A  118A  25B8  120A  118A  	fcall	_debounce
   480     06C8                     l944:
   481                           
   482                           ;codigo.c: 133:             if (tecla == tecla_anterior) {
   483     06C8  0877               	movf	main@tecla,w
   484     06C9  0678               	xorwf	_tecla_anterior,w
   485     06CA  1D03               	skipz
   486     06CB  2ECD               	goto	u691
   487     06CC  2ECE               	goto	u690
   488     06CD                     u691:
   489     06CD  2ED7               	goto	l948
   490     06CE                     u690:
   491     06CE                     l946:
   492                           
   493                           ;codigo.c: 134:                 contador++;
   494     06CE  3001               	movlw	1
   495     06CF  1283               	bcf	3,5	;RP0=0, select bank0
   496     06D0  1303               	bcf	3,6	;RP1=0, select bank0
   497     06D1  07B4               	addwf	_contador,f
   498     06D2  1803               	skipnc
   499     06D3  0AB5               	incf	_contador+1,f
   500     06D4  3000               	movlw	0
   501     06D5  07B5               	addwf	_contador+1,f
   502                           
   503                           ;codigo.c: 135:             } else {
   504     06D6  2EDF               	goto	l950
   505     06D7                     l948:
   506                           
   507                           ;codigo.c: 136:                 contador = 1;
   508     06D7  3001               	movlw	1
   509     06D8  1283               	bcf	3,5	;RP0=0, select bank0
   510     06D9  1303               	bcf	3,6	;RP1=0, select bank0
   511     06DA  00B4               	movwf	_contador
   512     06DB  3000               	movlw	0
   513     06DC  00B5               	movwf	_contador+1
   514                           
   515                           ;codigo.c: 137:                 tecla_anterior = tecla;
   516     06DD  0877               	movf	main@tecla,w
   517     06DE  00F8               	movwf	_tecla_anterior
   518     06DF                     l950:
   519                           
   520                           ;codigo.c: 140:             atualiza_lcd();
   521     06DF  120A  118A  2767  120A  118A  	fcall	_atualiza_lcd
   522     06E4                     l952:	
   523                           ;codigo.c: 143:             while (teclado() != 0xFF);
   524                           
   525     06E4  120A  118A  26F2  120A  118A  	fcall	_teclado
   526     06E9  3AFF               	xorlw	255
   527     06EA  1D03               	skipz
   528     06EB  2EED               	goto	u701
   529     06EC  2EEE               	goto	u700
   530     06ED                     u701:
   531     06ED  2EE4               	goto	l952
   532     06EE                     u700:
   533     06EE  2EB8               	goto	l938
   534     06EF  120A  118A  2800   	ljmp	start
   535     06F2                     __end_of_main:
   536                           
   537                           	psect	text1
   538     06F2                     __ptext1:	
   539 ;; *************** function _teclado *****************
   540 ;; Defined at:
   541 ;;		line 61 in file "codigo.c"
   542 ;; Parameters:    Size  Location     Type
   543 ;;		None
   544 ;; Auto vars:     Size  Location     Type
   545 ;;  tecla           1    0[COMMON] unsigned char 
   546 ;; Return value:  Size  Location     Type
   547 ;;                  1    wreg      unsigned char 
   548 ;; Registers used:
   549 ;;		wreg, status,2
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   555 ;;      Params:         0       0       0       0       0
   556 ;;      Locals:         1       0       0       0       0
   557 ;;      Temps:          0       0       0       0       0
   558 ;;      Totals:         1       0       0       0       0
   559 ;;Total ram usage:        1 bytes
   560 ;; Hardware stack levels used: 1
   561 ;; This function calls:
   562 ;;		Nothing
   563 ;; This function is called by:
   564 ;;		_main
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568     06F2                     _teclado:	
   569                           ;psect for function _teclado
   570                           
   571     06F2                     l866:	
   572                           ;incstack = 0
   573                           ; Regs used in _teclado: [wreg+status,2]
   574                           
   575                           
   576                           ;codigo.c: 62:     unsigned char tecla = 0xFF;
   577     06F2  30FF               	movlw	255
   578     06F3  00F0               	movwf	teclado@tecla
   579                           
   580                           ;codigo.c: 64:     PORTCbits.RC0 = 0; PORTCbits.RC1 = 1; PORTCbits.RC2 = 1; PORTCbits.RC
      +                          3 = 1;
   581     06F4  1283               	bcf	3,5	;RP0=0, select bank0
   582     06F5  1303               	bcf	3,6	;RP1=0, select bank0
   583     06F6  1007               	bcf	7,0	;volatile
   584     06F7  1487               	bsf	7,1	;volatile
   585     06F8  1507               	bsf	7,2	;volatile
   586     06F9  1587               	bsf	7,3	;volatile
   587                           
   588                           ;codigo.c: 65:     if (PORTBbits.RB0 == 0) tecla = 0;
   589     06FA  1806               	btfsc	6,0	;volatile
   590     06FB  2EFD               	goto	u501
   591     06FC  2EFE               	goto	u500
   592     06FD                     u501:
   593     06FD  2EFF               	goto	l870
   594     06FE                     u500:
   595     06FE                     l868:
   596     06FE  01F0               	clrf	teclado@tecla
   597     06FF                     l870:
   598                           
   599                           ;codigo.c: 66:     if (PORTBbits.RB1 == 0) tecla = 1;
   600     06FF  1886               	btfsc	6,1	;volatile
   601     0700  2F02               	goto	u511
   602     0701  2F03               	goto	u510
   603     0702                     u511:
   604     0702  2F05               	goto	l44
   605     0703                     u510:
   606     0703                     l872:
   607     0703  3001               	movlw	1
   608     0704  00F0               	movwf	teclado@tecla
   609     0705                     l44:
   610                           
   611                           ;codigo.c: 67:     if (PORTBbits.RB2 == 0) tecla = 2;
   612     0705  1906               	btfsc	6,2	;volatile
   613     0706  2F08               	goto	u521
   614     0707  2F09               	goto	u520
   615     0708                     u521:
   616     0708  2F0B               	goto	l45
   617     0709                     u520:
   618     0709                     l874:
   619     0709  3002               	movlw	2
   620     070A  00F0               	movwf	teclado@tecla
   621     070B                     l45:
   622                           
   623                           ;codigo.c: 68:     if (PORTBbits.RB3 == 0) tecla = 3;
   624     070B  1986               	btfsc	6,3	;volatile
   625     070C  2F0E               	goto	u531
   626     070D  2F0F               	goto	u530
   627     070E                     u531:
   628     070E  2F11               	goto	l46
   629     070F                     u530:
   630     070F                     l876:
   631     070F  3003               	movlw	3
   632     0710  00F0               	movwf	teclado@tecla
   633     0711                     l46:
   634                           
   635                           ;codigo.c: 70:     PORTCbits.RC0 = 1; PORTCbits.RC1 = 0; PORTCbits.RC2 = 1; PORTCbits.RC
      +                          3 = 1;
   636     0711  1407               	bsf	7,0	;volatile
   637     0712  1087               	bcf	7,1	;volatile
   638     0713  1507               	bsf	7,2	;volatile
   639     0714  1587               	bsf	7,3	;volatile
   640                           
   641                           ;codigo.c: 71:     if (PORTBbits.RB0 == 0) tecla = 4;
   642     0715  1806               	btfsc	6,0	;volatile
   643     0716  2F18               	goto	u541
   644     0717  2F19               	goto	u540
   645     0718                     u541:
   646     0718  2F1B               	goto	l47
   647     0719                     u540:
   648     0719                     l878:
   649     0719  3004               	movlw	4
   650     071A  00F0               	movwf	teclado@tecla
   651     071B                     l47:
   652                           
   653                           ;codigo.c: 72:     if (PORTBbits.RB1 == 0) tecla = 5;
   654     071B  1886               	btfsc	6,1	;volatile
   655     071C  2F1E               	goto	u551
   656     071D  2F1F               	goto	u550
   657     071E                     u551:
   658     071E  2F21               	goto	l48
   659     071F                     u550:
   660     071F                     l880:
   661     071F  3005               	movlw	5
   662     0720  00F0               	movwf	teclado@tecla
   663     0721                     l48:
   664                           
   665                           ;codigo.c: 73:     if (PORTBbits.RB2 == 0) tecla = 6;
   666     0721  1906               	btfsc	6,2	;volatile
   667     0722  2F24               	goto	u561
   668     0723  2F25               	goto	u560
   669     0724                     u561:
   670     0724  2F27               	goto	l49
   671     0725                     u560:
   672     0725                     l882:
   673     0725  3006               	movlw	6
   674     0726  00F0               	movwf	teclado@tecla
   675     0727                     l49:
   676                           
   677                           ;codigo.c: 74:     if (PORTBbits.RB3 == 0) tecla = 7;
   678     0727  1986               	btfsc	6,3	;volatile
   679     0728  2F2A               	goto	u571
   680     0729  2F2B               	goto	u570
   681     072A                     u571:
   682     072A  2F2D               	goto	l50
   683     072B                     u570:
   684     072B                     l884:
   685     072B  3007               	movlw	7
   686     072C  00F0               	movwf	teclado@tecla
   687     072D                     l50:
   688                           
   689                           ;codigo.c: 76:     PORTCbits.RC0 = 1; PORTCbits.RC1 = 1; PORTCbits.RC2 = 0; PORTCbits.RC
      +                          3 = 1;
   690     072D  1407               	bsf	7,0	;volatile
   691     072E  1487               	bsf	7,1	;volatile
   692     072F  1107               	bcf	7,2	;volatile
   693     0730  1587               	bsf	7,3	;volatile
   694                           
   695                           ;codigo.c: 77:     if (PORTBbits.RB0 == 0) tecla = 8;
   696     0731  1806               	btfsc	6,0	;volatile
   697     0732  2F34               	goto	u581
   698     0733  2F35               	goto	u580
   699     0734                     u581:
   700     0734  2F37               	goto	l51
   701     0735                     u580:
   702     0735                     l886:
   703     0735  3008               	movlw	8
   704     0736  00F0               	movwf	teclado@tecla
   705     0737                     l51:
   706                           
   707                           ;codigo.c: 78:     if (PORTBbits.RB1 == 0) tecla = 9;
   708     0737  1886               	btfsc	6,1	;volatile
   709     0738  2F3A               	goto	u591
   710     0739  2F3B               	goto	u590
   711     073A                     u591:
   712     073A  2F3D               	goto	l52
   713     073B                     u590:
   714     073B                     l888:
   715     073B  3009               	movlw	9
   716     073C  00F0               	movwf	teclado@tecla
   717     073D                     l52:
   718                           
   719                           ;codigo.c: 79:     if (PORTBbits.RB2 == 0) tecla = 10;
   720     073D  1906               	btfsc	6,2	;volatile
   721     073E  2F40               	goto	u601
   722     073F  2F41               	goto	u600
   723     0740                     u601:
   724     0740  2F43               	goto	l53
   725     0741                     u600:
   726     0741                     l890:
   727     0741  300A               	movlw	10
   728     0742  00F0               	movwf	teclado@tecla
   729     0743                     l53:
   730                           
   731                           ;codigo.c: 80:     if (PORTBbits.RB3 == 0) tecla = 11;
   732     0743  1986               	btfsc	6,3	;volatile
   733     0744  2F46               	goto	u611
   734     0745  2F47               	goto	u610
   735     0746                     u611:
   736     0746  2F49               	goto	l54
   737     0747                     u610:
   738     0747                     l892:
   739     0747  300B               	movlw	11
   740     0748  00F0               	movwf	teclado@tecla
   741     0749                     l54:
   742                           
   743                           ;codigo.c: 82:     PORTCbits.RC0 = 1; PORTCbits.RC1 = 1; PORTCbits.RC2 = 1; PORTCbits.RC
      +                          3 = 0;
   744     0749  1407               	bsf	7,0	;volatile
   745     074A  1487               	bsf	7,1	;volatile
   746     074B  1507               	bsf	7,2	;volatile
   747     074C  1187               	bcf	7,3	;volatile
   748                           
   749                           ;codigo.c: 83:     if (PORTBbits.RB0 == 0) tecla = 12;
   750     074D  1806               	btfsc	6,0	;volatile
   751     074E  2F50               	goto	u621
   752     074F  2F51               	goto	u620
   753     0750                     u621:
   754     0750  2F53               	goto	l55
   755     0751                     u620:
   756     0751                     l894:
   757     0751  300C               	movlw	12
   758     0752  00F0               	movwf	teclado@tecla
   759     0753                     l55:
   760                           
   761                           ;codigo.c: 84:     if (PORTBbits.RB1 == 0) tecla = 13;
   762     0753  1886               	btfsc	6,1	;volatile
   763     0754  2F56               	goto	u631
   764     0755  2F57               	goto	u630
   765     0756                     u631:
   766     0756  2F59               	goto	l56
   767     0757                     u630:
   768     0757                     l896:
   769     0757  300D               	movlw	13
   770     0758  00F0               	movwf	teclado@tecla
   771     0759                     l56:
   772                           
   773                           ;codigo.c: 85:     if (PORTBbits.RB2 == 0) tecla = 14;
   774     0759  1906               	btfsc	6,2	;volatile
   775     075A  2F5C               	goto	u641
   776     075B  2F5D               	goto	u640
   777     075C                     u641:
   778     075C  2F5F               	goto	l57
   779     075D                     u640:
   780     075D                     l898:
   781     075D  300E               	movlw	14
   782     075E  00F0               	movwf	teclado@tecla
   783     075F                     l57:
   784                           
   785                           ;codigo.c: 86:     if (PORTBbits.RB3 == 0) tecla = 15;
   786     075F  1986               	btfsc	6,3	;volatile
   787     0760  2F62               	goto	u651
   788     0761  2F63               	goto	u650
   789     0762                     u651:
   790     0762  2F65               	goto	l902
   791     0763                     u650:
   792     0763                     l900:
   793     0763  300F               	movlw	15
   794     0764  00F0               	movwf	teclado@tecla
   795     0765                     l902:
   796                           
   797                           ;codigo.c: 88:     return tecla;
   798     0765  0870               	movf	teclado@tecla,w
   799     0766                     l59:
   800     0766  0008               	return
   801     0767                     __end_of_teclado:
   802                           
   803                           	psect	text2
   804     05EE                     __ptext2:	
   805 ;; *************** function _lcd_initialise *****************
   806 ;; Defined at:
   807 ;;		line 50 in file "codigo.c"
   808 ;; Parameters:    Size  Location     Type
   809 ;;		None
   810 ;; Auto vars:     Size  Location     Type
   811 ;;		None
   812 ;; Return value:  Size  Location     Type
   813 ;;                  1    wreg      void 
   814 ;; Registers used:
   815 ;;		wreg, status,2, status,0, pclath, cstack
   816 ;; Tracked objects:
   817 ;;		On entry : 0/0
   818 ;;		On exit  : 0/0
   819 ;;		Unchanged: 0/0
   820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   821 ;;      Params:         0       0       0       0       0
   822 ;;      Locals:         0       0       0       0       0
   823 ;;      Temps:          0       0       0       0       0
   824 ;;      Totals:         0       0       0       0       0
   825 ;;Total ram usage:        0 bytes
   826 ;; Hardware stack levels used: 1
   827 ;; Hardware stack levels required when called: 1
   828 ;; This function calls:
   829 ;;		_lcd_command
   830 ;; This function is called by:
   831 ;;		_main
   832 ;; This function uses a non-reentrant model
   833 ;;
   834                           
   835     05EE                     _lcd_initialise:	
   836                           ;psect for function _lcd_initialise
   837                           
   838     05EE                     l862:	
   839                           ;incstack = 0
   840                           ; Regs used in _lcd_initialise: [wreg+status,2+status,0+pclath+cstack]
   841                           
   842                           
   843                           ;codigo.c: 51:     lcd_command(0x38);
   844     05EE  3038               	movlw	56
   845     05EF  120A  118A  25C6  120A  118A  	fcall	_lcd_command
   846                           
   847                           ;codigo.c: 52:     lcd_command(0x06);
   848     05F4  3006               	movlw	6
   849     05F5  120A  118A  25C6  120A  118A  	fcall	_lcd_command
   850                           
   851                           ;codigo.c: 53:     lcd_command(0x0C);
   852     05FA  300C               	movlw	12
   853     05FB  120A  118A  25C6  120A  118A  	fcall	_lcd_command
   854                           
   855                           ;codigo.c: 54:     lcd_command(0x01);
   856     0600  3001               	movlw	1
   857     0601  120A  118A  25C6  120A  118A  	fcall	_lcd_command
   858     0606                     l37:
   859     0606  0008               	return
   860     0607                     __end_of_lcd_initialise:
   861                           
   862                           	psect	text3
   863     05B8                     __ptext3:	
   864 ;; *************** function _debounce *****************
   865 ;; Defined at:
   866 ;;		line 57 in file "codigo.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;		None
   869 ;; Auto vars:     Size  Location     Type
   870 ;;		None
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      void 
   873 ;; Registers used:
   874 ;;		wreg
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   880 ;;      Params:         0       0       0       0       0
   881 ;;      Locals:         0       0       0       0       0
   882 ;;      Temps:          3       0       0       0       0
   883 ;;      Totals:         3       0       0       0       0
   884 ;;Total ram usage:        3 bytes
   885 ;; Hardware stack levels used: 1
   886 ;; This function calls:
   887 ;;		Nothing
   888 ;; This function is called by:
   889 ;;		_main
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893     05B8                     _debounce:	
   894                           ;psect for function _debounce
   895                           
   896     05B8                     l864:	
   897                           ;incstack = 0
   898                           ; Regs used in _debounce: [wreg]
   899                           
   900                           
   901                           ;codigo.c: 58:     _delay((unsigned long)((50)*(20000000/4000.0)));
   902     05B8  3002               	movlw	2
   903     05B9  00F2               	movwf	??_debounce+2
   904     05BA  3045               	movlw	69
   905     05BB  00F1               	movwf	??_debounce+1
   906     05BC  30A9               	movlw	169
   907     05BD  00F0               	movwf	??_debounce
   908     05BE                     u717:
   909     05BE  0BF0               	decfsz	??_debounce,f
   910     05BF  2DBE               	goto	u717
   911     05C0  0BF1               	decfsz	??_debounce+1,f
   912     05C1  2DBE               	goto	u717
   913     05C2  0BF2               	decfsz	??_debounce+2,f
   914     05C3  2DBE               	goto	u717
   915     05C4  2DC5               	nop2
   916     05C5                     l40:
   917     05C5  0008               	return
   918     05C6                     __end_of_debounce:
   919                           
   920                           	psect	text4
   921     0767                     __ptext4:	
   922 ;; *************** function _atualiza_lcd *****************
   923 ;; Defined at:
   924 ;;		line 91 in file "codigo.c"
   925 ;; Parameters:    Size  Location     Type
   926 ;;		None
   927 ;; Auto vars:     Size  Location     Type
   928 ;;  buffer         16    0[BANK0 ] unsigned char [16]
   929 ;;  pos             2   18[BANK0 ] int 
   930 ;;  temp            2   16[BANK0 ] unsigned int 
   931 ;; Return value:  Size  Location     Type
   932 ;;                  1    wreg      void 
   933 ;; Registers used:
   934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   935 ;; Tracked objects:
   936 ;;		On entry : 0/0
   937 ;;		On exit  : 0/0
   938 ;;		Unchanged: 0/0
   939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   940 ;;      Params:         0       0       0       0       0
   941 ;;      Locals:         0      20       0       0       0
   942 ;;      Temps:          0       0       0       0       0
   943 ;;      Totals:         0      20       0       0       0
   944 ;;Total ram usage:       20 bytes
   945 ;; Hardware stack levels used: 1
   946 ;; Hardware stack levels required when called: 2
   947 ;; This function calls:
   948 ;;		___lwdiv
   949 ;;		___lwmod
   950 ;;		_lcd_command
   951 ;;		_lcd_string
   952 ;; This function is called by:
   953 ;;		_main
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957     0767                     _atualiza_lcd:	
   958                           ;psect for function _atualiza_lcd
   959                           
   960     0767                     l906:	
   961                           ;incstack = 0
   962                           ; Regs used in _atualiza_lcd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   963                           
   964                           
   965                           ;codigo.c: 92:     char buffer[16];;codigo.c: 93:     unsigned int temp = contador;
   966     0767  1283               	bcf	3,5	;RP0=0, select bank0
   967     0768  1303               	bcf	3,6	;RP1=0, select bank0
   968     0769  0835               	movf	_contador+1,w
   969     076A  00B1               	movwf	atualiza_lcd@temp+1
   970     076B  0834               	movf	_contador,w
   971     076C  00B0               	movwf	atualiza_lcd@temp
   972                           
   973                           ;codigo.c: 94:     int pos = 14;
   974     076D  300E               	movlw	14
   975     076E  00B2               	movwf	atualiza_lcd@pos
   976     076F  3000               	movlw	0
   977     0770  00B3               	movwf	atualiza_lcd@pos+1
   978     0771                     l908:
   979                           
   980                           ;codigo.c: 97:     buffer[15] = '\0';
   981     0771  01AF               	clrf	atualiza_lcd@buffer+15
   982                           
   983                           ;codigo.c: 98:     while (pos >= 2) {
   984     0772  2FA4               	goto	l916
   985     0773                     l910:
   986                           
   987                           ;codigo.c: 99:         buffer[pos--] = (temp % 10) + '0';
   988     0773  1283               	bcf	3,5	;RP0=0, select bank0
   989     0774  1303               	bcf	3,6	;RP1=0, select bank0
   990     0775  0832               	movf	atualiza_lcd@pos,w
   991     0776  3E20               	addlw	(low (atualiza_lcd@buffer| 0))& (0+255)
   992     0777  0084               	movwf	4
   993     0778  300A               	movlw	10
   994     0779  00F0               	movwf	___lwmod@divisor
   995     077A  3000               	movlw	0
   996     077B  00F1               	movwf	___lwmod@divisor+1
   997     077C  0831               	movf	atualiza_lcd@temp+1,w
   998     077D  00F3               	movwf	___lwmod@dividend+1
   999     077E  0830               	movf	atualiza_lcd@temp,w
  1000     077F  00F2               	movwf	___lwmod@dividend
  1001     0780  120A  118A  262D  120A  118A  	fcall	___lwmod
  1002     0785  0870               	movf	?___lwmod,w
  1003     0786  3E30               	addlw	48
  1004     0787  1383               	bcf	3,7	;select IRP bank0
  1005     0788  0080               	movwf	0
  1006     0789                     l912:
  1007     0789  30FF               	movlw	255
  1008     078A  1283               	bcf	3,5	;RP0=0, select bank0
  1009     078B  1303               	bcf	3,6	;RP1=0, select bank0
  1010     078C  07B2               	addwf	atualiza_lcd@pos,f
  1011     078D  1803               	skipnc
  1012     078E  0AB3               	incf	atualiza_lcd@pos+1,f
  1013     078F  30FF               	movlw	255
  1014     0790  07B3               	addwf	atualiza_lcd@pos+1,f
  1015     0791                     l914:
  1016                           
  1017                           ;codigo.c: 100:         temp /= 10;
  1018     0791  300A               	movlw	10
  1019     0792  00F0               	movwf	___lwdiv@divisor
  1020     0793  3000               	movlw	0
  1021     0794  00F1               	movwf	___lwdiv@divisor+1
  1022     0795  0831               	movf	atualiza_lcd@temp+1,w
  1023     0796  00F3               	movwf	___lwdiv@dividend+1
  1024     0797  0830               	movf	atualiza_lcd@temp,w
  1025     0798  00F2               	movwf	___lwdiv@dividend
  1026     0799  120A  118A  2665  120A  118A  	fcall	___lwdiv
  1027     079E  0871               	movf	?___lwdiv+1,w
  1028     079F  1283               	bcf	3,5	;RP0=0, select bank0
  1029     07A0  1303               	bcf	3,6	;RP1=0, select bank0
  1030     07A1  00B1               	movwf	atualiza_lcd@temp+1
  1031     07A2  0870               	movf	?___lwdiv,w
  1032     07A3  00B0               	movwf	atualiza_lcd@temp
  1033     07A4                     l916:
  1034                           
  1035                           ;codigo.c: 98:     while (pos >= 2) {
  1036     07A4  0833               	movf	atualiza_lcd@pos+1,w
  1037     07A5  3A80               	xorlw	128
  1038     07A6  00FF               	movwf	btemp+1
  1039     07A7  3080               	movlw	128
  1040     07A8  027F               	subwf	btemp+1,w
  1041     07A9  1D03               	skipz
  1042     07AA  2FAD               	goto	u665
  1043     07AB  3002               	movlw	2
  1044     07AC  0232               	subwf	atualiza_lcd@pos,w
  1045     07AD                     u665:
  1046     07AD  1803               	skipnc
  1047     07AE  2FB0               	goto	u661
  1048     07AF  2FB1               	goto	u660
  1049     07B0                     u661:
  1050     07B0  2F73               	goto	l910
  1051     07B1                     u660:
  1052     07B1  2FC0               	goto	l922
  1053     07B2                     l918:
  1054                           
  1055                           ;codigo.c: 105:         buffer[pos--] = ' ';
  1056     07B2  1283               	bcf	3,5	;RP0=0, select bank0
  1057     07B3  1303               	bcf	3,6	;RP1=0, select bank0
  1058     07B4  0832               	movf	atualiza_lcd@pos,w
  1059     07B5  3E20               	addlw	(low (atualiza_lcd@buffer| 0))& (0+255)
  1060     07B6  0084               	movwf	4
  1061     07B7  3020               	movlw	32
  1062     07B8  1383               	bcf	3,7	;select IRP bank0
  1063     07B9  0080               	movwf	0
  1064     07BA                     l920:
  1065     07BA  30FF               	movlw	255
  1066     07BB  07B2               	addwf	atualiza_lcd@pos,f
  1067     07BC  1803               	skipnc
  1068     07BD  0AB3               	incf	atualiza_lcd@pos+1,f
  1069     07BE  30FF               	movlw	255
  1070     07BF  07B3               	addwf	atualiza_lcd@pos+1,f
  1071     07C0                     l922:
  1072                           
  1073                           ;codigo.c: 104:     while (pos >= 2) {
  1074     07C0  1283               	bcf	3,5	;RP0=0, select bank0
  1075     07C1  1303               	bcf	3,6	;RP1=0, select bank0
  1076     07C2  0833               	movf	atualiza_lcd@pos+1,w
  1077     07C3  3A80               	xorlw	128
  1078     07C4  00FF               	movwf	btemp+1
  1079     07C5  3080               	movlw	128
  1080     07C6  027F               	subwf	btemp+1,w
  1081     07C7  1D03               	skipz
  1082     07C8  2FCB               	goto	u675
  1083     07C9  3002               	movlw	2
  1084     07CA  0232               	subwf	atualiza_lcd@pos,w
  1085     07CB                     u675:
  1086     07CB  1803               	skipnc
  1087     07CC  2FCE               	goto	u671
  1088     07CD  2FCF               	goto	u670
  1089     07CE                     u671:
  1090     07CE  2FB2               	goto	l918
  1091     07CF                     u670:
  1092     07CF                     l67:
  1093                           
  1094                           ;codigo.c: 109:     buffer[0] = 'N';
  1095     07CF  304E               	movlw	78
  1096     07D0  1283               	bcf	3,5	;RP0=0, select bank0
  1097     07D1  1303               	bcf	3,6	;RP1=0, select bank0
  1098     07D2  00A0               	movwf	atualiza_lcd@buffer
  1099                           
  1100                           ;codigo.c: 110:     buffer[1] = ':';
  1101     07D3  303A               	movlw	58
  1102     07D4  00A1               	movwf	atualiza_lcd@buffer+1
  1103     07D5                     l924:
  1104                           
  1105                           ;codigo.c: 112:     lcd_command(0x80);
  1106     07D5  3080               	movlw	128
  1107     07D6  120A  118A  25C6  120A  118A  	fcall	_lcd_command
  1108     07DB                     l926:
  1109                           
  1110                           ;codigo.c: 113:     lcd_string("Contador cliques");
  1111     07DB  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1112     07DC  00F3               	movwf	lcd_string@str
  1113     07DD  3080               	movlw	128
  1114     07DE  00F4               	movwf	lcd_string@str+1
  1115     07DF  120A  118A  2607  120A  118A  	fcall	_lcd_string
  1116     07E4                     l928:
  1117                           
  1118                           ;codigo.c: 114:     lcd_command(0xC0);
  1119     07E4  30C0               	movlw	192
  1120     07E5  120A  118A  25C6  120A  118A  	fcall	_lcd_command
  1121                           
  1122                           ;codigo.c: 115:     lcd_string(buffer);
  1123     07EA  3020               	movlw	(low (atualiza_lcd@buffer| 0))& (0+255)
  1124     07EB  00F3               	movwf	lcd_string@str
  1125     07EC  3000               	movlw	0
  1126     07ED  00F4               	movwf	lcd_string@str+1
  1127     07EE  120A  118A  2607  120A  118A  	fcall	_lcd_string
  1128     07F3                     l68:
  1129     07F3  0008               	return
  1130     07F4                     __end_of_atualiza_lcd:
  1131                           
  1132                           	psect	text5
  1133     0607                     __ptext5:	
  1134 ;; *************** function _lcd_string *****************
  1135 ;; Defined at:
  1136 ;;		line 44 in file "codigo.c"
  1137 ;; Parameters:    Size  Location     Type
  1138 ;;  str             2    3[COMMON] PTR const unsigned char 
  1139 ;;		 -> STR_1(17), atualiza_lcd@buffer(16), 
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;		None
  1142 ;; Return value:  Size  Location     Type
  1143 ;;                  1    wreg      void 
  1144 ;; Registers used:
  1145 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1146 ;; Tracked objects:
  1147 ;;		On entry : 0/0
  1148 ;;		On exit  : 0/0
  1149 ;;		Unchanged: 0/0
  1150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1151 ;;      Params:         2       0       0       0       0
  1152 ;;      Locals:         0       0       0       0       0
  1153 ;;      Temps:          0       0       0       0       0
  1154 ;;      Totals:         2       0       0       0       0
  1155 ;;Total ram usage:        2 bytes
  1156 ;; Hardware stack levels used: 1
  1157 ;; Hardware stack levels required when called: 1
  1158 ;; This function calls:
  1159 ;;		_lcd_data
  1160 ;; This function is called by:
  1161 ;;		_atualiza_lcd
  1162 ;; This function uses a non-reentrant model
  1163 ;;
  1164                           
  1165     0607                     _lcd_string:	
  1166                           ;psect for function _lcd_string
  1167                           
  1168     0607                     l806:	
  1169                           ;incstack = 0
  1170                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1171                           
  1172                           
  1173                           ;codigo.c: 45:     while (*str) {
  1174     0607  2E1C               	goto	l812
  1175     0608                     l808:
  1176                           
  1177                           ;codigo.c: 46:         lcd_data(*str++);
  1178     0608  0874               	movf	lcd_string@str+1,w
  1179     0609  00FF               	movwf	btemp+1
  1180     060A  0873               	movf	lcd_string@str,w
  1181     060B  0084               	movwf	4
  1182     060C  120A  118A  2003  120A  118A  	fcall	stringtab
  1183     0611  120A  118A  25DA  120A  118A  	fcall	_lcd_data
  1184     0616                     l810:
  1185     0616  3001               	movlw	1
  1186     0617  07F3               	addwf	lcd_string@str,f
  1187     0618  1803               	skipnc
  1188     0619  0AF4               	incf	lcd_string@str+1,f
  1189     061A  3000               	movlw	0
  1190     061B  07F4               	addwf	lcd_string@str+1,f
  1191     061C                     l812:
  1192                           
  1193                           ;codigo.c: 45:     while (*str) {
  1194     061C  0874               	movf	lcd_string@str+1,w
  1195     061D  1283               	bcf	3,5	;RP0=0, select bank0
  1196     061E  1303               	bcf	3,6	;RP1=0, select bank0
  1197     061F  00FF               	movwf	btemp+1
  1198     0620  0873               	movf	lcd_string@str,w
  1199     0621  0084               	movwf	4
  1200     0622  120A  118A  2003  120A  118A  	fcall	stringtab
  1201     0627  3A00               	xorlw	0
  1202     0628  1D03               	skipz
  1203     0629  2E2B               	goto	u361
  1204     062A  2E2C               	goto	u360
  1205     062B                     u361:
  1206     062B  2E08               	goto	l808
  1207     062C                     u360:
  1208     062C                     l34:
  1209     062C  0008               	return
  1210     062D                     __end_of_lcd_string:
  1211                           
  1212                           	psect	text6
  1213     05DA                     __ptext6:	
  1214 ;; *************** function _lcd_data *****************
  1215 ;; Defined at:
  1216 ;;		line 28 in file "codigo.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;  data            1    wreg     unsigned char 
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;  data            1    2[COMMON] unsigned char 
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      void 
  1223 ;; Registers used:
  1224 ;;		wreg
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1230 ;;      Params:         0       0       0       0       0
  1231 ;;      Locals:         1       0       0       0       0
  1232 ;;      Temps:          2       0       0       0       0
  1233 ;;      Totals:         3       0       0       0       0
  1234 ;;Total ram usage:        3 bytes
  1235 ;; Hardware stack levels used: 1
  1236 ;; This function calls:
  1237 ;;		Nothing
  1238 ;; This function is called by:
  1239 ;;		_lcd_string
  1240 ;; This function uses a non-reentrant model
  1241 ;;
  1242                           
  1243     05DA                     _lcd_data:	
  1244                           ;psect for function _lcd_data
  1245                           
  1246                           
  1247                           ;incstack = 0
  1248                           ; Regs used in _lcd_data: [wreg]
  1249                           ;lcd_data@data stored from wreg
  1250     05DA  00F2               	movwf	lcd_data@data
  1251     05DB                     l790:
  1252                           
  1253                           ;codigo.c: 29:     PORTD = data;
  1254     05DB  0872               	movf	lcd_data@data,w
  1255     05DC  1283               	bcf	3,5	;RP0=0, select bank0
  1256     05DD  1303               	bcf	3,6	;RP1=0, select bank0
  1257     05DE  0088               	movwf	8	;volatile
  1258     05DF                     l792:
  1259                           
  1260                           ;codigo.c: 30:     PORTEbits.RE0 = 1;
  1261     05DF  1409               	bsf	9,0	;volatile
  1262     05E0                     l794:
  1263                           
  1264                           ;codigo.c: 31:     PORTEbits.RE1 = 1;
  1265     05E0  1489               	bsf	9,1	;volatile
  1266                           
  1267                           ;codigo.c: 32:     _delay((unsigned long)((5)*(20000000/4000.0)));
  1268     05E1  3021               	movlw	33
  1269     05E2  00F1               	movwf	??_lcd_data+1
  1270     05E3  3076               	movlw	118
  1271     05E4  00F0               	movwf	??_lcd_data
  1272     05E5                     u727:
  1273     05E5  0BF0               	decfsz	??_lcd_data,f
  1274     05E6  2DE5               	goto	u727
  1275     05E7  0BF1               	decfsz	??_lcd_data+1,f
  1276     05E8  2DE5               	goto	u727
  1277     05E9  0000               	nop
  1278     05EA                     l796:
  1279                           
  1280                           ;codigo.c: 33:     PORTEbits.RE1 = 0;
  1281     05EA  1283               	bcf	3,5	;RP0=0, select bank0
  1282     05EB  1303               	bcf	3,6	;RP1=0, select bank0
  1283     05EC  1089               	bcf	9,1	;volatile
  1284     05ED                     l25:
  1285     05ED  0008               	return
  1286     05EE                     __end_of_lcd_data:
  1287                           
  1288                           	psect	text7
  1289     05C6                     __ptext7:	
  1290 ;; *************** function _lcd_command *****************
  1291 ;; Defined at:
  1292 ;;		line 36 in file "codigo.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;  cmd             1    wreg     unsigned char 
  1295 ;; Auto vars:     Size  Location     Type
  1296 ;;  cmd             1    2[COMMON] unsigned char 
  1297 ;; Return value:  Size  Location     Type
  1298 ;;                  1    wreg      void 
  1299 ;; Registers used:
  1300 ;;		wreg
  1301 ;; Tracked objects:
  1302 ;;		On entry : 0/0
  1303 ;;		On exit  : 0/0
  1304 ;;		Unchanged: 0/0
  1305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1306 ;;      Params:         0       0       0       0       0
  1307 ;;      Locals:         1       0       0       0       0
  1308 ;;      Temps:          2       0       0       0       0
  1309 ;;      Totals:         3       0       0       0       0
  1310 ;;Total ram usage:        3 bytes
  1311 ;; Hardware stack levels used: 1
  1312 ;; This function calls:
  1313 ;;		Nothing
  1314 ;; This function is called by:
  1315 ;;		_lcd_initialise
  1316 ;;		_atualiza_lcd
  1317 ;; This function uses a non-reentrant model
  1318 ;;
  1319                           
  1320     05C6                     _lcd_command:	
  1321                           ;psect for function _lcd_command
  1322                           
  1323                           
  1324                           ;incstack = 0
  1325                           ; Regs used in _lcd_command: [wreg]
  1326                           ;lcd_command@cmd stored from wreg
  1327     05C6  00F2               	movwf	lcd_command@cmd
  1328     05C7                     l798:
  1329                           
  1330                           ;codigo.c: 37:     PORTD = cmd;
  1331     05C7  0872               	movf	lcd_command@cmd,w
  1332     05C8  1283               	bcf	3,5	;RP0=0, select bank0
  1333     05C9  1303               	bcf	3,6	;RP1=0, select bank0
  1334     05CA  0088               	movwf	8	;volatile
  1335     05CB                     l800:
  1336                           
  1337                           ;codigo.c: 38:     PORTEbits.RE0 = 0;
  1338     05CB  1009               	bcf	9,0	;volatile
  1339     05CC                     l802:
  1340                           
  1341                           ;codigo.c: 39:     PORTEbits.RE1 = 1;
  1342     05CC  1489               	bsf	9,1	;volatile
  1343                           
  1344                           ;codigo.c: 40:     _delay((unsigned long)((5)*(20000000/4000.0)));
  1345     05CD  3021               	movlw	33
  1346     05CE  00F1               	movwf	??_lcd_command+1
  1347     05CF  3076               	movlw	118
  1348     05D0  00F0               	movwf	??_lcd_command
  1349     05D1                     u737:
  1350     05D1  0BF0               	decfsz	??_lcd_command,f
  1351     05D2  2DD1               	goto	u737
  1352     05D3  0BF1               	decfsz	??_lcd_command+1,f
  1353     05D4  2DD1               	goto	u737
  1354     05D5  0000               	nop
  1355     05D6                     l804:
  1356                           
  1357                           ;codigo.c: 41:     PORTEbits.RE1 = 0;
  1358     05D6  1283               	bcf	3,5	;RP0=0, select bank0
  1359     05D7  1303               	bcf	3,6	;RP1=0, select bank0
  1360     05D8  1089               	bcf	9,1	;volatile
  1361     05D9                     l28:
  1362     05D9  0008               	return
  1363     05DA                     __end_of_lcd_command:
  1364                           
  1365                           	psect	text8
  1366     062D                     __ptext8:	
  1367 ;; *************** function ___lwmod *****************
  1368 ;; Defined at:
  1369 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\lwmod.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;  divisor         2    0[COMMON] unsigned int 
  1372 ;;  dividend        2    2[COMMON] unsigned int 
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;  counter         1    4[COMMON] unsigned char 
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  2    0[COMMON] unsigned int 
  1377 ;; Registers used:
  1378 ;;		wreg, status,2, status,0
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1384 ;;      Params:         4       0       0       0       0
  1385 ;;      Locals:         1       0       0       0       0
  1386 ;;      Temps:          0       0       0       0       0
  1387 ;;      Totals:         5       0       0       0       0
  1388 ;;Total ram usage:        5 bytes
  1389 ;; Hardware stack levels used: 1
  1390 ;; This function calls:
  1391 ;;		Nothing
  1392 ;; This function is called by:
  1393 ;;		_atualiza_lcd
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397     062D                     ___lwmod:	
  1398                           ;psect for function ___lwmod
  1399                           
  1400     062D                     l840:	
  1401                           ;incstack = 0
  1402                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1403                           
  1404     062D  0870               	movf	___lwmod@divisor,w
  1405     062E  0471               	iorwf	___lwmod@divisor+1,w
  1406     062F  1903               	btfsc	3,2
  1407     0630  2E32               	goto	u441
  1408     0631  2E33               	goto	u440
  1409     0632                     u441:
  1410     0632  2E60               	goto	l858
  1411     0633                     u440:
  1412     0633                     l842:
  1413     0633  3001               	movlw	1
  1414     0634  00F4               	movwf	___lwmod@counter
  1415     0635  2E3F               	goto	l848
  1416     0636                     l844:
  1417     0636  3001               	movlw	1
  1418     0637                     u455:
  1419     0637  1003               	clrc
  1420     0638  0DF0               	rlf	___lwmod@divisor,f
  1421     0639  0DF1               	rlf	___lwmod@divisor+1,f
  1422     063A  3EFF               	addlw	-1
  1423     063B  1D03               	skipz
  1424     063C  2E37               	goto	u455
  1425     063D                     l846:
  1426     063D  3001               	movlw	1
  1427     063E  07F4               	addwf	___lwmod@counter,f
  1428     063F                     l848:
  1429     063F  1FF1               	btfss	___lwmod@divisor+1,7
  1430     0640  2E42               	goto	u461
  1431     0641  2E43               	goto	u460
  1432     0642                     u461:
  1433     0642  2E36               	goto	l844
  1434     0643                     u460:
  1435     0643                     l850:
  1436     0643  0871               	movf	___lwmod@divisor+1,w
  1437     0644  0273               	subwf	___lwmod@dividend+1,w
  1438     0645  1D03               	skipz
  1439     0646  2E49               	goto	u475
  1440     0647  0870               	movf	___lwmod@divisor,w
  1441     0648  0272               	subwf	___lwmod@dividend,w
  1442     0649                     u475:
  1443     0649  1C03               	skipc
  1444     064A  2E4C               	goto	u471
  1445     064B  2E4D               	goto	u470
  1446     064C                     u471:
  1447     064C  2E53               	goto	l854
  1448     064D                     u470:
  1449     064D                     l852:
  1450     064D  0870               	movf	___lwmod@divisor,w
  1451     064E  02F2               	subwf	___lwmod@dividend,f
  1452     064F  0871               	movf	___lwmod@divisor+1,w
  1453     0650  1C03               	skipc
  1454     0651  03F3               	decf	___lwmod@dividend+1,f
  1455     0652  02F3               	subwf	___lwmod@dividend+1,f
  1456     0653                     l854:
  1457     0653  3001               	movlw	1
  1458     0654                     u485:
  1459     0654  1003               	clrc
  1460     0655  0CF1               	rrf	___lwmod@divisor+1,f
  1461     0656  0CF0               	rrf	___lwmod@divisor,f
  1462     0657  3EFF               	addlw	-1
  1463     0658  1D03               	skipz
  1464     0659  2E54               	goto	u485
  1465     065A                     l856:
  1466     065A  3001               	movlw	1
  1467     065B  02F4               	subwf	___lwmod@counter,f
  1468     065C  1D03               	btfss	3,2
  1469     065D  2E5F               	goto	u491
  1470     065E  2E60               	goto	u490
  1471     065F                     u491:
  1472     065F  2E43               	goto	l850
  1473     0660                     u490:
  1474     0660                     l858:
  1475     0660  0873               	movf	___lwmod@dividend+1,w
  1476     0661  00F1               	movwf	?___lwmod+1
  1477     0662  0872               	movf	___lwmod@dividend,w
  1478     0663  00F0               	movwf	?___lwmod
  1479     0664                     l458:
  1480     0664  0008               	return
  1481     0665                     __end_of___lwmod:
  1482                           
  1483                           	psect	text9
  1484     0665                     __ptext9:	
  1485 ;; *************** function ___lwdiv *****************
  1486 ;; Defined at:
  1487 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\lwdiv.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;  divisor         2    0[COMMON] unsigned int 
  1490 ;;  dividend        2    2[COMMON] unsigned int 
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  quotient        2    4[COMMON] unsigned int 
  1493 ;;  counter         1    6[COMMON] unsigned char 
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  2    0[COMMON] unsigned int 
  1496 ;; Registers used:
  1497 ;;		wreg, status,2, status,0
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1503 ;;      Params:         4       0       0       0       0
  1504 ;;      Locals:         3       0       0       0       0
  1505 ;;      Temps:          0       0       0       0       0
  1506 ;;      Totals:         7       0       0       0       0
  1507 ;;Total ram usage:        7 bytes
  1508 ;; Hardware stack levels used: 1
  1509 ;; This function calls:
  1510 ;;		Nothing
  1511 ;; This function is called by:
  1512 ;;		_atualiza_lcd
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516     0665                     ___lwdiv:	
  1517                           ;psect for function ___lwdiv
  1518                           
  1519     0665                     l814:	
  1520                           ;incstack = 0
  1521                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1522                           
  1523     0665  01F4               	clrf	___lwdiv@quotient
  1524     0666  01F5               	clrf	___lwdiv@quotient+1
  1525     0667                     l816:
  1526     0667  0870               	movf	___lwdiv@divisor,w
  1527     0668  0471               	iorwf	___lwdiv@divisor+1,w
  1528     0669  1903               	btfsc	3,2
  1529     066A  2E6C               	goto	u371
  1530     066B  2E6D               	goto	u370
  1531     066C                     u371:
  1532     066C  2EA2               	goto	l836
  1533     066D                     u370:
  1534     066D                     l818:
  1535     066D  3001               	movlw	1
  1536     066E  00F6               	movwf	___lwdiv@counter
  1537     066F  2E79               	goto	l824
  1538     0670                     l820:
  1539     0670  3001               	movlw	1
  1540     0671                     u385:
  1541     0671  1003               	clrc
  1542     0672  0DF0               	rlf	___lwdiv@divisor,f
  1543     0673  0DF1               	rlf	___lwdiv@divisor+1,f
  1544     0674  3EFF               	addlw	-1
  1545     0675  1D03               	skipz
  1546     0676  2E71               	goto	u385
  1547     0677                     l822:
  1548     0677  3001               	movlw	1
  1549     0678  07F6               	addwf	___lwdiv@counter,f
  1550     0679                     l824:
  1551     0679  1FF1               	btfss	___lwdiv@divisor+1,7
  1552     067A  2E7C               	goto	u391
  1553     067B  2E7D               	goto	u390
  1554     067C                     u391:
  1555     067C  2E70               	goto	l820
  1556     067D                     u390:
  1557     067D                     l826:
  1558     067D  3001               	movlw	1
  1559     067E                     u405:
  1560     067E  1003               	clrc
  1561     067F  0DF4               	rlf	___lwdiv@quotient,f
  1562     0680  0DF5               	rlf	___lwdiv@quotient+1,f
  1563     0681  3EFF               	addlw	-1
  1564     0682  1D03               	skipz
  1565     0683  2E7E               	goto	u405
  1566     0684  0871               	movf	___lwdiv@divisor+1,w
  1567     0685  0273               	subwf	___lwdiv@dividend+1,w
  1568     0686  1D03               	skipz
  1569     0687  2E8A               	goto	u415
  1570     0688  0870               	movf	___lwdiv@divisor,w
  1571     0689  0272               	subwf	___lwdiv@dividend,w
  1572     068A                     u415:
  1573     068A  1C03               	skipc
  1574     068B  2E8D               	goto	u411
  1575     068C  2E8E               	goto	u410
  1576     068D                     u411:
  1577     068D  2E95               	goto	l832
  1578     068E                     u410:
  1579     068E                     l828:
  1580     068E  0870               	movf	___lwdiv@divisor,w
  1581     068F  02F2               	subwf	___lwdiv@dividend,f
  1582     0690  0871               	movf	___lwdiv@divisor+1,w
  1583     0691  1C03               	skipc
  1584     0692  03F3               	decf	___lwdiv@dividend+1,f
  1585     0693  02F3               	subwf	___lwdiv@dividend+1,f
  1586     0694                     l830:
  1587     0694  1474               	bsf	___lwdiv@quotient,0
  1588     0695                     l832:
  1589     0695  3001               	movlw	1
  1590     0696                     u425:
  1591     0696  1003               	clrc
  1592     0697  0CF1               	rrf	___lwdiv@divisor+1,f
  1593     0698  0CF0               	rrf	___lwdiv@divisor,f
  1594     0699  3EFF               	addlw	-1
  1595     069A  1D03               	skipz
  1596     069B  2E96               	goto	u425
  1597     069C                     l834:
  1598     069C  3001               	movlw	1
  1599     069D  02F6               	subwf	___lwdiv@counter,f
  1600     069E  1D03               	btfss	3,2
  1601     069F  2EA1               	goto	u431
  1602     06A0  2EA2               	goto	u430
  1603     06A1                     u431:
  1604     06A1  2E7D               	goto	l826
  1605     06A2                     u430:
  1606     06A2                     l836:
  1607     06A2  0875               	movf	___lwdiv@quotient+1,w
  1608     06A3  00F1               	movwf	?___lwdiv+1
  1609     06A4  0874               	movf	___lwdiv@quotient,w
  1610     06A5  00F0               	movwf	?___lwdiv
  1611     06A6                     l448:
  1612     06A6  0008               	return
  1613     06A7                     __end_of___lwdiv:
  1614     0002                     ___latbits      equ	2
  1615     007E                     btemp           set	126	;btemp
  1616     007E                     wtemp0          set	126
  1617                           
  1618                           	psect	config
  1619                           
  1620                           ;Config register CONFIG @ 0x2007
  1621                           ;	Oscillator Selection bits
  1622                           ;	FOSC = HS, HS oscillator
  1623                           ;	Watchdog Timer Enable bit
  1624                           ;	WDTE = OFF, WDT disabled
  1625                           ;	Power-up Timer Enable bit
  1626                           ;	PWRTE = OFF, PWRT disabled
  1627                           ;	FLASH Program Memory Code Protection bits
  1628                           ;	CP = OFF, Code protection off
  1629                           ;	Brown-out Reset Enable bit
  1630                           ;	BOREN = OFF, BOR disabled
  1631                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  1632                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1633                           ;	Data EE Memory Code Protection
  1634                           ;	CPD = OFF, Code Protection off
  1635                           ;	FLASH Program Memory Write Enable
  1636                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  1637                           ;	In-Circuit Debugger Mode bit
  1638                           ;	DEBUG = 0x1, unprogrammed default
  1639     2007                     	org	8199
  1640     2007  3D3A               	dw	15674

Data Sizes:
    Strings     17
    Constant    0
    Data        1
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       9
    BANK0            80     20      22
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_string@str	PTR const unsigned char  size(2) Largest target is 17
		 -> atualiza_lcd@buffer(BANK0[16]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _lcd_initialise->_lcd_command
    _atualiza_lcd->___lwdiv
    _lcd_string->_lcd_data

Critical Paths under _main in BANK0

    _main->_atualiza_lcd

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     823
                                              7 COMMON     1     1      0
                       _atualiza_lcd
                           _debounce
                     _lcd_initialise
                            _teclado
 ---------------------------------------------------------------------------------
 (1) _teclado                                              1     1      0      39
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_initialise                                       0     0      0      29
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _debounce                                             3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _atualiza_lcd                                        20    20      0     688
                                              0 BANK0     20    20      0
                            ___lwdiv
                            ___lwmod
                        _lcd_command
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _lcd_string                                           2     0      2      76
                                              3 COMMON     2     0      2
                           _lcd_data
 ---------------------------------------------------------------------------------
 (3) _lcd_data                                             3     3      0      29
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          3     3      0      29
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     161
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     164
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _atualiza_lcd
     ___lwdiv
     ___lwmod
     _lcd_command
     _lcd_string
       _lcd_data
   _debounce
   _lcd_initialise
     _lcd_command
   _teclado

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80     20      22     27.5%
BITBANK0            80      0       0      0.0%
COMMON              14      8       9     64.3%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      31      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Nov 25 23:16:52 2024

                      pc 0002             lcd_data@data 0072                       l40 05C5  
                     l25 05ED                       l34 062C                       l50 072D  
                     l51 0737                       l28 05D9                       l52 073D  
                     l44 0705                       l37 0606                       l53 0743  
                     l45 070B                       l54 0749                       l46 0711  
                     l55 0753                       l47 071B                       l56 0759  
                     l48 0721                       l57 075F                       l49 0727  
                     l67 07CF                       l59 0766                       l68 07F3  
                     fsr 0004                      l448 06A6                      l800 05CB  
                    l458 0664                      l802 05CC                      l810 0616  
                    l820 0670                      l804 05D6                      l812 061C  
                    l900 0763                      l830 0694                      l822 0677  
                    l814 0665                      l806 0607                      l910 0773  
                    l902 0765                      l832 0695                      l824 0679  
                    l816 0667                      l840 062D                      l808 0608  
                    l920 07BA                      l912 0789                      l834 069C  
                    l826 067D                      l818 066D                      l850 0643  
                    l842 0633                      l922 07C0                      l914 0791  
                    l906 0767                      l930 06A7                      l828 068E  
                    l836 06A2                      l852 064D                      l844 0636  
                    l924 07D5                      l916 07A4                      l908 0771  
                    l940 06BE                      l932 06AC                      l854 0653  
                    l846 063D                      l790 05DB                      l926 07DB  
                    l918 07B2                      l862 05EE                      l870 06FF  
                    l950 06DF                      l942 06C3                      l934 06AE  
                    l856 065A                      l848 063F                      l792 05DF  
                    l928 07E4                      l864 05B8                      l880 071F  
                    l872 0703                      l952 06E4                      l944 06C8  
                    l936 06B3                      l858 0660                      l794 05E0  
                    l890 0741                      l882 0725                      l874 0709  
                    l866 06F2                      l946 06CE                      l938 06B8  
                    l796 05EA                      l892 0747                      l884 072B  
                    l876 070F                      l868 06FE                      l948 06D7  
                    l798 05C7                      l894 0751                      l886 0735  
                    l878 0719                      l896 0757                      l888 073B  
                    l898 075D                      u410 068E                      u411 068D  
                    u500 06FE                      u405 067E                      u501 06FD  
                    u430 06A2                      u510 0703                      u431 06A1  
                    u415 068A                      u511 0702                      u440 0633  
                    u360 062C                      u600 0741                      u520 0709  
                    u425 0696                      u441 0632                      u361 062B  
                    u601 0740                      u521 0708                      u370 066D  
                    u610 0747                      u530 070F                      u371 066C  
                    u611 0746                      u531 070E                      u460 0643  
                    u620 0751                      u540 0719                      u700 06EE  
                    u461 0642                      u621 0750                      u541 0718  
                    u701 06ED                      u390 067D                      u470 064D  
                    u630 0757                      u550 071F                      u391 067C  
                    u471 064C                      u455 0637                      u631 0756  
                    u551 071E                      u640 075D                      u560 0725  
                    u385 0671                      u641 075C                      u561 0724  
                    u490 0660                      u650 0763                      u570 072B  
                    u491 065F                      u475 0649                      u651 0762  
                    u571 072A                      u660 07B1                      u580 0735  
                    u485 0654                      u661 07B0                      u717 05BE  
                    u581 0734                      u670 07CF                      u590 073B  
                    u727 05E5                      u671 07CE                      u591 073A  
                    u680 06C3                      u737 05D1                      u665 07AD  
                    u681 06C2                      u690 06CE                      u675 07CB  
                    u691 06CD                      fsr0 0004                      indf 0000  
                   STR_1 0013                     _main 06A7                     btemp 007E  
                   start 0000            ?_atualiza_lcd 0070                    ?_main 0070  
        __end_of___lwdiv 06A7          __end_of___lwmod 0665                    _PORTD 0008  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
                  _TRISE 0089          __end_of_teclado 0767                    pclath 000A  
         _tecla_anterior 0078                    status 0003                    wtemp0 007E  
         ??_atualiza_lcd 0077          __initialization 07F4             __end_of_main 06F2  
                 ??_main 0077           lcd_command@cmd 0072         __end_of_debounce 05C6  
       __end_of_lcd_data 05EE                ??___lwdiv 0074                ??___lwmod 0074  
           __pdataCOMMON 0078                ??_teclado 0070         ??_lcd_initialise 0073  
          lcd_string@str 0073  __end_of__initialization 07FC           __pcstackCOMMON 0070  
   __end_of_atualiza_lcd 07F4               __pbssBANK0 0034       atualiza_lcd@buffer 0020  
             __pmaintext 06A7         atualiza_lcd@temp 0030                ?_debounce 0070  
              ?_lcd_data 0070               _lcd_string 0607               __stringtab 0003  
                ___lwdiv 0665                  ___lwmod 062D                  __ptext1 06F2  
                __ptext2 05EE                  __ptext3 05B8                  __ptext4 0767  
                __ptext5 0607                  __ptext6 05DA                  __ptext7 05C6  
                __ptext8 062D                  __ptext9 0665               ??_debounce 0070  
                _teclado 06F2               ??_lcd_data 0070     end_of_initialization 07FC  
              _PORTBbits 0006                _PORTCbits 0007                _PORTEbits 0009  
            ?_lcd_string 0073            ??_lcd_command 0070             _atualiza_lcd 0767  
          __pidataCOMMON 05B7      start_initialization 07F4      __end_of_lcd_command 05DA  
              ___latbits 0002            __pcstackBANK0 0020         ___lwdiv@dividend 0072  
        atualiza_lcd@pos 0032                 ?___lwdiv 0070                 ?___lwmod 0070  
              __pstrings 0003             teclado@tecla 0070                 ?_teclado 0070  
       ___lwdiv@quotient 0074              _lcd_command 05C6              __stringbase 0012  
              main@tecla 0077             ??_lcd_string 0075       __end_of_lcd_string 062D  
     __end_of__stringtab 0013                 _debounce 05B8          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0076                 _lcd_data 05DA                 _contador 0034  
         _lcd_initialise 05EE         ___lwmod@dividend 0072   __end_of_lcd_initialise 0607  
              stringcode 000D          ___lwmod@divisor 0070          ___lwmod@counter 0074  
               stringdir 000D                 stringtab 0003          ?_lcd_initialise 0070  
           ?_lcd_command 0070  
